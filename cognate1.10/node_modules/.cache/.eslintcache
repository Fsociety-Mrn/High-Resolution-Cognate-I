[{"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\index.js":"1","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\App.js":"2","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Authenticate.jsx":"3","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Forgot_password.js":"4","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Mainpage.js":"5","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Login.js":"6","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Dashboard.jsx":"7","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Edit_profile.jsx":"8","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Salesreport.jsx":"9","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Show_archive.jsx":"10","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Products.jsx":"11","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Add_item.jsx":"12","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Invoice.jsx":"13","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Edit_draft.jsx":"14","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Add_data.jsx":"15","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Edit_data.jsx":"16","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Show_draft.jsx":"17","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\chart\\linerechart.js":"18","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetTs.jsx":"19","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\FeaturedInfo.jsx":"20","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetLg.jsx":"21","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\dummyData.js":"22","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\chart\\area.rechart.js":"23","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetMs.jsx":"24","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Verification_code.js":"25","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Authenticate_code.jsx":"26","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Stocks.jsx":"27"},{"size":615,"mtime":1647167949616,"results":"28","hashOfConfig":"29"},{"size":3339,"mtime":1652609906807,"results":"30","hashOfConfig":"29"},{"size":511,"mtime":1652531961879,"results":"31","hashOfConfig":"29"},{"size":8240,"mtime":1651494697496,"results":"32","hashOfConfig":"29"},{"size":7200,"mtime":1652282800426,"results":"33","hashOfConfig":"29"},{"size":5629,"mtime":1652539587906,"results":"34","hashOfConfig":"29"},{"size":1277,"mtime":1650276753361,"results":"35","hashOfConfig":"29"},{"size":10960,"mtime":1651494115363,"results":"36","hashOfConfig":"29"},{"size":243,"mtime":1645864339718,"results":"37","hashOfConfig":"29"},{"size":11687,"mtime":1652608094432,"results":"38","hashOfConfig":"29"},{"size":12307,"mtime":1651563227974,"results":"39","hashOfConfig":"29"},{"size":15278,"mtime":1652604269789,"results":"40","hashOfConfig":"29"},{"size":20326,"mtime":1651564218660,"results":"41","hashOfConfig":"29"},{"size":26672,"mtime":1652446725792,"results":"42","hashOfConfig":"29"},{"size":26786,"mtime":1652609530274,"results":"43","hashOfConfig":"29"},{"size":26650,"mtime":1652447550628,"results":"44","hashOfConfig":"29"},{"size":16873,"mtime":1651564354123,"results":"45","hashOfConfig":"29"},{"size":1857,"mtime":1648046266800,"results":"46","hashOfConfig":"29"},{"size":7399,"mtime":1651063451751,"results":"47","hashOfConfig":"29"},{"size":5433,"mtime":1651568425452,"results":"48","hashOfConfig":"29"},{"size":10928,"mtime":1651568700624,"results":"49","hashOfConfig":"29"},{"size":1398,"mtime":1646284794789,"results":"50","hashOfConfig":"29"},{"size":2287,"mtime":1649161016626,"results":"51","hashOfConfig":"29"},{"size":7914,"mtime":1651063489998,"results":"52","hashOfConfig":"29"},{"size":3825,"mtime":1652601888113,"results":"53","hashOfConfig":"29"},{"size":531,"mtime":1652539073852,"results":"54","hashOfConfig":"29"},{"size":21229,"mtime":1652607565114,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1irddyk",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"59"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"59"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"59"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"59"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"59"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"59"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":1,"source":"134","usedDeprecatedRules":"59"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"59"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"59"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149","usedDeprecatedRules":"59"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\index.js",[],[],["161","162"],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\App.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176"],[],"import React, { createContext,  useState } from 'react';\nimport './index.css';\nimport './App.css';\nimport Login from './pages/Login';\nimport Forgot_password from './pages/Forgot_password';\nimport Authenticate from './Authenticate';\nimport Authenticate_code from './Authenticate_code';\nimport Verification_code from './Verification_code';\n\n\nimport { Routes ,Route,Navigate ,Outlet, useNavigate, useLocation, } from 'react-router-dom';\n\nimport Mainpage from './pages/Mainpage';\n\n\nimport Dashboard from './pages/Components/Dashboard';\nimport Stocks from './pages/Components/Stocks';\nimport Products from './pages/Components/products/Products';\nimport Add_item from './pages/Components/products/Add_item';\nimport Show_archive from './pages/Components/products/Show_archive';\nimport Salesreport from './pages/Components/Salesreport';\nimport Invoice from './pages/Components/invoice/Invoice';\nimport Add_data from './pages/Components/invoice/Add_data';\nimport Show_draft from './pages/Components/invoice/Show_draft';\nimport Edit_data from './pages/Components/invoice/Edit_data';\nimport Edit_draft from './pages/Components/invoice/Edit_draft';\n\n\n// import Message_dialog from './pages/Components/Message_dialog';\n\nimport Edit_profile from './pages/Components/Edit_profile';\n\nexport const UserContext = createContext({});\nexport const UserContext_code = createContext({});\n\n\nconst SidebarLayout = () => (\n  <>\n    <Mainpage />\n    <Outlet />\n  </>\n);\n\nconst outket = () => (\n  <>\n    <Outlet />\n  </>\n);\n\n\n\nfunction App(){\n\n  const [user, setUser] = useState({ loggedIn: false });\n  const [user_code, setUser_code] = useState({ loggedIn_code: false });\n\n  return (\n    <>\n\n  <UserContext.Provider value={{ user, setUser , user_code, setUser_code}}>\n\n    <Routes>\n    \n          <Route path=\"/\" element={<Login/>}/>\n          <Route path=\"/Forgotpassword\" element={<Forgot_password/>}/>\n          <Route path=\"*\" element={<Navigate to=\"/\"/>}/>\n \n {/* send verification code */}\n          <Route element={<Authenticate_code />}>\n            <Route path=\"/Authentication\" element={<Verification_code/> } /> \n          </Route>\n\n{/* route to mainpage */}\n          <Route element={<Authenticate />}>\n                <Route element={<SidebarLayout/> } >\n\n                  <Route path=\"/Mainpage\" element={<Dashboard/> } /> \n                  <Route path=\"/Mainpage/Stocks\" element={<Stocks/> } /> \n                  <Route path=\"/Mainpage/Products\" element={<Products/> } />\n                    <Route path = \"/Mainpage/Products/AddItem\" element={<Add_item/>}/>\n                    <Route path = \"/Mainpage/Products/ArchiveList\" element={<Show_archive/>}/>\n\n                  <Route path=\"/Mainpage/Invoice\" element={<Invoice/> } />\n                    <Route path = \"/Mainpage/Invoice/AddData\" element={<Add_data/>}/>\n                    <Route path = \"/Mainpage/Invoice/EditData\" element={<Edit_data/>}/>\n                    <Route path = \"/Mainpage/Invoice/DraftList\" element={<Show_draft/>}/>\n                    <Route path = \"/Mainpage/Invoice/EditDraft\" element={<Edit_draft/>}/>\n                  <Route path=\"/Mainpage/EditProfile\" element={<Edit_profile/> } /> \n                 \n                </Route>\n          </Route>\n         \n   </Routes>\n       \n  </UserContext.Provider>     \n     \n   \n        </>\n    \n  );\n}\n\nexport default App;\n","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Authenticate.jsx",[],[],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Forgot_password.js",["177","178"],[],"import styled from '@emotion/styled'\r\nimport { AppBar, Button, Collapse, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport axios from 'axios';\r\n\r\nconst Forgot_password = () => {\r\n    let NavS = useNavigate();\r\n// header for forgot password\r\n    const Capp = styled(AppBar)({\r\n        backgroundColor: \"#9B3C21\",\r\n      \r\n      })\r\n\r\n// security verification value\r\nconst [sec,setSec]  = useState(\r\n    {\r\n        email: null,\r\n        password: null,\r\n        sec1: \"\",\r\n        sec2: \"\"\r\n    }\r\n)\r\n\r\nconst [pass,setPass] = useState({\r\n    pass1: '',\r\n    password: ''\r\n})\r\n\r\n// ecuirty\r\nconst [show,setShow] = useState(false)\r\n// error\r\nconst [shower,setShower] = useState(true)\r\n// show result\r\nconst [Result,setResult] = useState()\r\n\r\n// show result\r\nconst [Result1,setResult1] = useState()\r\n\r\n// Message\r\nconst [message,setMessage] = useState(\"\")\r\n\r\nconst onSubmit = e =>{\r\n\r\ne.preventDefault()\r\n      // HTTP REQUEST\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', sec)\r\n  .then(\r\n    res=>{\r\n        setShower(res.data[0].Result)\r\n        setShow(res.data[0].Result)\r\n        console.log(res.data[0].Result)\r\n\r\n    } \r\n  )\r\n\r\n}\r\n\r\nconst onSubmit_password = e =>{\r\n\r\n    e.preventDefault()\r\n          // HTTP REQUEST\r\n      axios.post('http://localhost/REACTJS/cognate1%20api/Change_passwordAPI.php', pass)\r\n      .then(\r\n        res=>{\r\n            res.data[0].Result ? \r\n            setResult(false) : setResult(true)\r\n            setResult1(res.data[0].Result)\r\n            setMessage(res.data[0].Message)\r\n            console.log(res.data)\r\n    \r\n        } \r\n      )\r\n    \r\n    }\r\n\r\n  return (\r\n    <div>\r\n\r\n{/* pang break */}\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n\r\n\r\n\r\n{/* Message is false */}\r\n\r\n<Dialog\r\n        open={Result1}\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n              Password has\r\n            {message}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          <Button onClick={e=>NavS('/')} autoFocus>\r\n            Okay\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n{/* Message is false */}\r\n\r\n    <Dialog\r\n        open={Result}\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {message}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          <Button onClick={e=>setResult(false)} autoFocus>\r\n            Okay\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n        {/* Whole container */}\r\n        <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n        >\r\n\r\n            {/* Item container */}\r\n            <Grid item md={8} style={{ width: 700}}>\r\n                \r\n                {/* Header */}\r\n                <Capp position='static'>\r\n                    <Typography variant='h5' margin={2}>Forgot password</Typography>\r\n                </Capp>\r\n\r\n                {/* Components */}\r\n                <Grid         \r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                padding={2}\r\n  \r\n                style={\r\n                    {\r\n                        backgroundColor: \"white\",\r\n                        border: \"solid 2px black\"\r\n                    }\r\n                }>\r\n                    <Collapse in={show ? false : true}>\r\n                    <form>\r\n                    {/* First Question */}\r\n                    <Grid item>\r\n                        <Typography variant='h6'> Unforgettable experience that you have already forgotten?</Typography>\r\n                        <TextField \r\n                        multiline \r\n                        fullWidth \r\n                        placeholder='Answer this please' \r\n                        margin='normal'\r\n                        helperText='I dont know'\r\n                        value={sec.sec1}\r\n                        error={shower ? false : true}\r\n                        onChange={\r\n                            e=>{\r\n                                setSec({...sec, sec1: e.target.value})\r\n                            }\r\n                        }\r\n                        required/>\r\n                    </Grid>\r\n\r\n                    {/* Second Question */}\r\n                    <Grid item >\r\n                        <Typography variant='h6'> Something you neglected?</Typography>\r\n                        <TextField \r\n                        required\r\n                        multiline \r\n                        fullWidth \r\n                        placeholder='Answer this please' \r\n                        margin='normal'\r\n                        helperText='I dont know'\r\n                        value={sec.sec2}\r\n                        error={shower ? false : true}\r\n                        onChange={\r\n                            e=>setSec({...sec, sec2: e.target.value})\r\n                        }\r\n                        />\r\n                    </Grid>\r\n\r\n                                        {/* Second Question */}\r\n                    <Grid item md={3} padding={1} >\r\n                        <Button type='submit' fullWidth variant='contained' onClick={onSubmit}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Grid>\r\n                    <Grid item md={3} padding={1} >\r\n                        <Button fullWidth variant='contained' onClick={e=>NavS(\"/\")} >\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    </form>\r\n                    </Collapse>\r\n\r\n{/* Change password */}\r\n                    <Collapse in={show}>\r\n                    <form>\r\n                    {/* First Question */}\r\n                    <Grid item>\r\n                        <Typography variant='h6'> Change password</Typography>\r\n                        <TextField \r\n                        type='password'\r\n                        fullWidth \r\n                        placeholder='Type your new password' \r\n                        margin='normal'\r\n                        value={pass.pass1}\r\n                        error={shower ? false : true}\r\n                        onChange={\r\n                            e=>{\r\n                                setPass({...pass, pass1: e.target.value})\r\n                            }\r\n                        }\r\n                        required/>\r\n                    </Grid>\r\n\r\n                    {/* Second Question */}\r\n                    <Grid item >\r\n                        <Typography variant='h6'> Confirm password</Typography>\r\n                        <TextField \r\n                        required\r\n                        type='password'\r\n                        fullWidth \r\n                        placeholder='Confirm your new password' \r\n                        margin='normal'\r\n                        value={pass.password}\r\n                        error={shower ? false : true}\r\n                        onChange={\r\n                            e=>{\r\n                                setPass({...pass, password: e.target.value})\r\n                            }\r\n                        }\r\n                        />\r\n                    </Grid>\r\n\r\n                                        {/* Second Question */}\r\n                    <Grid item md={3} padding={1} style={{width:600}} >\r\n                        <Button type='submit' fullWidth variant='contained' onClick={onSubmit_password}>\r\n                            Submit\r\n                        </Button>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    </form>\r\n                    </Collapse>\r\n\r\n                </Grid>\r\n                \r\n            </Grid>\r\n\r\n        </Grid>\r\n          \r\n    </div>\r\n  )\r\n}\r\n\r\n// {/* <Collapse in={true}>\r\n\r\n\r\n\r\n\r\n// </Collapse> */}\r\nexport default Forgot_password","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Mainpage.js",["179","180","181"],[],"  import {  \r\n    Typography, \r\n    IconButton, \r\n    Toolbar, \r\n    Drawer, \r\n    Grid,\r\n    Box,\r\n    ButtonGroup,\r\n    Button,\r\n    Alert,\r\n    Collapse,\r\n    AlertTitle,\r\n\r\n  } from '@mui/material';\r\n\r\n  import React, { useContext, useEffect, useState } from 'react'\r\n  import { \r\n    styled, \r\n  } from '@mui/material/styles';\r\n\r\n  import {  useNavigate } from 'react-router-dom';\r\n\r\n  import MuiAppBar from '@mui/material/AppBar';\r\n\r\n  ///ICONS\r\n\r\n  import LOGO  from './icons/user.png'\r\n\r\n  import MenuRoundedIcon from '@mui/icons-material/MenuRounded';\r\n  import AnalyticsOutlinedIcon from '@mui/icons-material/AnalyticsOutlined';\r\n  import AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\r\n  import BusinessCenterOutlinedIcon from '@mui/icons-material/BusinessCenterOutlined';\r\n  import AutoGraphOutlinedIcon from '@mui/icons-material/AutoGraphOutlined';\r\n  import FeedOutlinedIcon from '@mui/icons-material/FeedOutlined';\r\n  import LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';\r\n\r\n  import { UserContext } from '../App';\r\nimport axios from 'axios';\r\n  \r\n\r\n\r\n  const drawerWidth = 240;\r\n     // Custom Header\r\n const AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  transition: theme.transitions.create(['margin', 'width'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: `${drawerWidth}px`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n \r\n\r\n\r\n  const Mainpage = () => {\r\n\r\n    // const [drawerWidth,setdrawerWidth] = useState(240)\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n      .then(res=>{\r\n        [...res.data]?.filter(e=>e.Product_stocks <= 0).length === 0 ?\r\n        setAlert_stocks(false) : setAlert_stocks(true)          \r\n      }\r\n        \r\n\r\n        \r\n    )\r\n    // !stocsk ? setAlert_stocks(true) : setAlert_stocks(false)\r\n     \r\n      });\r\n\r\n    // NAVIGATION TO ANOTHER PAGE\r\n    let nv = useNavigate()\r\n\r\n\r\n    //Hook for sidebar true or false\r\n    const [open ,setOpen] = useState(false)\r\n// alert\r\n    const [alert_stocks,setAlert_stocks] =useState(false)\r\n    const [stocsk,setStocsk] = useState()\r\n  \r\n  // CUSTOM BUTTON\r\n  const buttons = [\r\n\r\n    // Button Dashboard\r\n    <IconButton  color=\"secondary\" onClick={(e)=>{e.preventDefault(); nv(\"/Mainpage\") }}>\r\n      {/* Icon */}\r\n      <AnalyticsOutlinedIcon  fontSize='large'/> \r\n      {/* Text */}\r\n      <Typography  variant='h6'marginX={3} >Dashboard</Typography>\r\n    </IconButton>,\r\n\r\n    // Button Stocks\r\n    <IconButton  color=\"secondary\" onClick={(e)=>{e.preventDefault(); nv(\"/Mainpage/Stocks\")}}>\r\n      <AddShoppingCartOutlinedIcon  margin='dense' fontSize='large'/>\r\n      <Typography variant='h6' marginX={5.5} >Stocks</Typography>\r\n    </IconButton>,\r\n\r\n\r\n      // Button Products\r\n    <IconButton  color=\"secondary\" onClick={(e)=>{e.preventDefault(); nv(\"/Mainpage/Products\")}}>\r\n      <BusinessCenterOutlinedIcon  margin='dense' fontSize='large'/>\r\n      <Typography variant='h6'marginX={4.2} >Products</Typography>\r\n    </IconButton>,\r\n\r\n    //   // Button Sales Report\r\n    // <IconButton fullwidth color=\"secondary\" onClick={(e)=>{e.preventDefault(); nv(\"/Mainpage/Salesreport\")}}>\r\n    //   <AutoGraphOutlinedIcon  margin='dense' fontSize='large'/>\r\n    //   <Typography noWrap variant='h6' marginX={2}  >Sales Report</Typography>\r\n    // </IconButton>,\r\n\r\n      // Button Invoice\r\n    <IconButton  color=\"secondary\" onClick={(e)=>{e.preventDefault(); nv(\"/Mainpage/Invoice\") }}>\r\n      <FeedOutlinedIcon  margin='dense' fontSize='large'/>\r\n      <Typography variant='h6'marginX={5.5} >Invoice</Typography>\r\n    </IconButton>,\r\n\r\n  ];\r\n\r\n\r\n  const { setUser} = useContext(UserContext);\r\n\r\n    return (\r\n      <div>\r\n\r\n  <AppBar position='fixed' open={open} \r\n    onClick={() => {\r\n      if(open){\r\n        setOpen(false)\r\n      }\r\n    }}>\r\n      \r\n\r\n       <Toolbar variant='dense'>\r\n\r\n\r\n   \r\n\r\n        <IconButton\r\n              size=\"large\"\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n              sx={{ mr: 2, ...(open && { display: 'none' }) }}\r\n            onClick={(e) => {\r\n              e.preventDefault()\r\n              setOpen(true)\r\n            }}>\r\n  {/* ICON */}\r\n              <MenuRoundedIcon fontSize='large' />\r\n            </IconButton>\r\n\r\n\r\n           \r\n            <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            >\r\n\r\n            \r\n            \r\n\r\n{/* Logout */}\r\n            <IconButton size='large' edge ='end' color=\"inherit\" onClick={setUser}>\r\n              <LogoutOutlinedIcon fontSize='large' />\r\n            </IconButton>\r\n\r\n            </Grid>\r\n    \r\n\r\n  {/* SIDE BAR */}\r\n        <Drawer\r\n  // permanent\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n\r\n\r\n        sx={{\r\n          \r\n          width: 0,\r\n          flexShrink: drawerWidth,\r\n          '& .MuiDrawer-paper': {\r\n            width: drawerWidth,\r\n            boxSizing: 'border-box',\r\n          },\r\n        }}>\r\n\r\n          \r\n          <Grid           \r\n            item \r\n    \r\n            container \r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\">\r\n\r\n              {/* Picturebox */}\r\n              <Box\r\n              fixed\r\n              component='img'\r\n              marginY={2}\r\n\r\n              sx={{\r\n                width: 100,\r\n                height: 100,\r\n              }}\r\n              src={LOGO} />\r\n              \r\n\r\n  {/* LABEL */}\r\n              <Typography variant='subtitle1'> Frances Bryan Maneclang</Typography>\r\n              <Typography variant='subtitle2'> CEO</Typography>\r\n\r\n  {/* Edit Profile  */}\r\n              <br/>\r\n              <Button variant='outlined' color='secondary' \r\n              onClick={\r\n                (e)=>{\r\n                  e.preventDefault()\r\n                  // setUser({ loggedIn: false });\r\n                  nv(\"/Mainpage/EditProfile\")\r\n            \r\n\r\n                }\r\n              }> Account Settings </Button>\r\n              <br/>\r\n\r\n          </Grid>\r\n\r\n\r\n\r\n                  <ButtonGroup\r\n                  fullWidth\r\n                  orientation=\"vertical\"\r\n                  aria-label=\"vertical contained button group\"\r\n                  variant=\"outlined\">\r\n\r\n\r\n                  {buttons}\r\n\r\n                </ButtonGroup>\r\n        \r\n\r\n        \r\n    \r\n        </Drawer>\r\n\r\n   \r\n            </Toolbar>\r\n    </AppBar>\r\n\r\n\r\n    <br/>\r\n    <br/>\r\n    <br/>\r\n    <br/>\r\n    <Collapse in={alert_stocks}>\r\n      <Alert severity=\"error\">\r\n        <AlertTitle>Warning</AlertTitle>\r\n        Some of your product items were <strong>out of stock!</strong>\r\n      </Alert>\r\n    </Collapse>\r\n      \r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Mainpage","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Login.js",["182"],[],"import {  AppBar, Button, Grid, TextField, Typography } from '@mui/material'\r\nimport { styled } from '@mui/material/styles';\r\nimport { Box } from '@mui/system';\r\nimport React, { useContext,  useState } from 'react'\r\nimport Logo from './Logo.ico'\r\nimport {  useNavigate } from 'react-router-dom';\r\nimport LOGO  from './LOGO.png'\r\nimport { UserContext } from '../App';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Cutom Button\r\nconst CButton = styled(Button)({\r\n  color: \"white\",\r\n  boxShadow: \"none\",\r\n  textTransform: \"none\",\r\n  fontSize: 18,\r\n  padding: \"6px 12px\",\r\n  border: \"2px solid\",\r\n  lineHeight: 1.5,\r\n  backgroundColor: \"#9B3C21\",\r\n  borderColor: \"white\",\r\n\r\n  \"&:hover\": {\r\n    backgroundColor: \"white\",\r\n    borderColor: \"#9B3C21\",\r\n    color: \"#9B3C21\",\r\n    boxShadow: \"none\"\r\n  }\r\n});\r\n\r\nconst Capp = styled(AppBar)({\r\n  backgroundColor: \"#9B3C21\",\r\n\r\n})\r\n\r\n// Custom Textbox\r\nconst CTextField = styled(TextField)({\r\n  '& label.Mui-focused': {\r\n    color: '#9B3C21',\r\n  },\r\n  '& .MuiInput-underline:after': {\r\n    borderBottomColor: '#9B3C21',\r\n    color: '#9B3C21',\r\n  },\r\n  '& .MuiOutlinedInput-root': {\r\n    '& fieldset': {\r\n      borderColor: 'Black',\r\n      color:'black',\r\n      border:'2px solid black'\r\n    },\r\n\r\n    '&.Mui-focused fieldset': {\r\n      borderColor: '#9B3C21',\r\n      color: '#9B3C21',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nconst Login = () => {\r\n\r\nconst {setUser_code } = useContext(UserContext);\r\n\r\nconst  [input, setInput]= useState({\r\n  email: '',\r\n  password:'',\r\n  sec1: null,\r\n  sec2: null\r\n\r\n})\r\n\r\nlet NavS = useNavigate();\r\n\r\n// error\r\nconst [shower,setShower] = useState(true)\r\n\r\nconst log =(e) => {\r\n  e.preventDefault(); \r\n\r\n  // HTTP REQUEST\r\n\r\n\r\n  //http://localhost/REACTJS/cognate1%20api/LoginAPI.php\r\n  //http://highresolutionapi.epizy.com/REACTjs/cognate1%20api/LoginAPI.php\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', input)\r\n  .then(\r\n    res=>{\r\n\r\n      setShower(res.data[0].Result)\r\n      setUser_code({loggedIn_code: res.data[0].Result})\r\n      if (res.data[0].Result) {NavS(\"/Authentication\")}\r\n    } \r\n  )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div >\r\n     \r\n      \r\n<form noValidate>\r\n   \r\n{/* Container Whole */}\r\n      <Grid\r\n      container\r\n      backgroundColor\r\n      spacing={0}\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"stretch\"\r\n\r\n      style={\r\n        {\r\n          minHeight:'100vh',\r\n          // backgroundImage: `url(${back1})`,\r\n          // backgroundRepeat:'no-repeat',\r\n          \r\n\r\n        }}>\r\n\r\n{/* Container Logo */}\r\n          <Grid\r\n          item \r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          xs={12} md={6}>\r\n\r\n\r\n{/* Picture box */}       \r\n            <Box\r\n            fixed\r\n            component='img'\r\n            sx={{\r\n              width: '90%',\r\n              height: 'auto',\r\n              maxHeight: { xs: 'auto', md: 'auto' },\r\n              maxWidth: { xs: 300, md: '90%' },\r\n            }}\r\n            src={LOGO} />\r\n              \r\n            </Grid>\r\n\r\n\r\n{/* Container Login */}\r\n            <Grid\r\n            item \r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            xs={12} md={6}>\r\n\r\n\r\n{/* Container Box */}\r\n              <Box\r\n              sx={{\r\n                width:400,\r\n                height:500,\r\n                backgroundColor: '#ffffff',\r\n                maxHeight: { xs: '500', md: '300' },\r\n                maxWidth: { xs: '350', md: '600' },\r\n                border:\"3px solid black\",\r\n                borderRadius:2\r\n              }}>\r\n\r\n{/* Header */}\r\n               <Capp position='relative'>\r\n                 \r\n                 <Typography variant='h5' margin={2}>LOG IN</Typography>\r\n\r\n               </Capp>\r\n              \r\n\r\n{/* Textfield,Login Hyperlink container */}\r\n            <Grid\r\n            container\r\n            item \r\n            paddingTop={8}\r\n            paddingX={2}\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n>\r\n\r\n{/* Email Textbox */}\r\n              <CTextField \r\n              type='email' \r\n              error={shower ? false : true}\r\n              value = {input.email}\r\n              onChange={e => setInput({ ...input, email: e.target.value})}\r\n\r\n              onClick={e=>setShower(true)}\r\n              \r\n              label='email' \r\n              placeholder='input email' \r\n              fullWidth \r\n\r\n              margin='dense' \r\n              variant='outlined'\r\n              size='normal'/>\r\n\r\n{/* Password Textbox */}\r\n              <CTextField\r\n\r\n              value = {input.password}\r\n              onChange={e => setInput({ ...input, password: e.target.value})}\r\n              error={shower ? false : true}\r\n              helperText={shower ? \"\" : \"error occur unable to log in\"}\r\n              onClick={e=>setShower(true)}\r\n              label='password' \r\n              placeholder='input password' \r\n              type='password' \r\n              fullWidth \r\n              margin='dense' \r\n              variant='outlined'\r\n              size='normal'/>\r\n\r\n{/* Hyperlink */}\r\n              <Typography variant='h5'  margin={2}>\r\n              <a href='/Forgotpassword'> forgot password</a></Typography>\r\n\r\n{/* Log in Button */}\r\n              <CButton onClick={log} variant='contained' fullWidth > Log in</CButton>\r\n\r\n              </Grid>\r\n\r\n\r\n\r\n\r\n              </Box>\r\n\r\n              </Grid>\r\n\r\n\r\n       </Grid>\r\n       \r\n</form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Login","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Dashboard.jsx",["183","184","185","186"],[],"import React from 'react';\r\nimport FeaturedInfo from \"./widget/FeaturedInfo\";\r\n\r\nimport WidgetLg from \"./widget/WidgetLg\";\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport Linerechart from \"./chart/linerechart\";\r\nimport WidgetTs from \"./widget/WidgetTs\"\r\nimport { Typography } from '@mui/material';\r\n\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n}));\r\n\r\n//info ng sales revenue,linecharts\r\nexport default function Dashboard() {\r\n    return (\r\n\r\n\r\n\r\n        <Box sx={{ flexGrow: 0 }}>\r\n            <Grid container spacing={3}>\r\n        {/* Dashboard */}\r\n            <Grid container item xs={12} md={10}>\r\n                <Typography variant='h3' marginY={2} marginLeft={2}> Dashboard</Typography>\r\n            </Grid>\r\n\r\n                <Grid item xs={30}>\r\n\r\n                    <FeaturedInfo />\r\n                \r\n                </Grid>\r\n             \r\n\r\n          \r\n            </Grid>\r\n        </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Edit_profile.jsx",["187","188","189","190"],[],"import { \r\n  Grid, \r\n  Box,\r\n  Paper, \r\n  Typography, \r\n  Stack, \r\n  TextField, \r\n  Button,\r\n  IconButton, \r\n  Divider, \r\n  Collapse, \r\n  Alert, \r\n  InputAdornment,\r\n  Fab,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContentText,\r\n  DialogContent,\r\n  DialogActions} from '@mui/material'\r\n\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport React, { useEffect, useRef, useState } from 'react'\r\n\r\n//ICONS\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\n\r\nimport LOGO  from '../icons/user.png'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\n// Custom TextField\r\n\r\nexport const CTextField = styled(TextField)({\r\n    '& .MuiInputBase-input': {\r\n  \r\n      position: 'relative',\r\n      fontSize: 20,\r\n      padding: '12px',\r\n  \r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-disabled\": {\r\n      \"&  fieldset\": {\r\n        \r\n        borderColor: \"#FFFFFF\",\r\n        \r\n      },\r\n      \"& text\": {\r\n        color: \"#000000\"\r\n      }\r\n\r\n    },\r\n    \"& label.Mui-focused\": {\r\n      color: \"#9B3C21\"\r\n    },\r\n\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        border: \"2px solid #000000\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n  \r\n        border: \"2px solid #9B3C21\"\r\n      }\r\n    }\r\n  });\r\n\r\nconst Edit_profile = () => {\r\n\r\n///show pass\r\nconst [show,setShow] = useState(true)\r\n\r\n//Login_Data storage\r\n  const [edit_data, setEdit_data] = useState([])\r\n\r\n  //Query Json\r\n  const [data,setData] = useState({\r\n    \"email\" : \"\",\r\n    \"password\": \"\",\r\n    \"sec1\" : \"\",\r\n    \"sec2\" : \"\"\r\n  })\r\n\r\n//enable hooks\r\n  const [enble, setEnble] = useState(true)\r\n\r\n//For alert success\r\n  const [show_alert,setShow_alert] = useState()\r\n//For alert error\r\n  const [show_error,setShow_error] = useState()\r\n// edit sjow\r\nconst [sec,setSec] = useState(false)\r\n\r\n\r\nconst update = (e) =>{\r\n  e.preventDefault()\r\n\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/Update_LoginAPI.php' , data)\r\n  .then(res=> {\r\n    setShow_alert(res.data[0].Result)\r\n    console.log(res.data)\r\n    console.log(data)\r\n    res.data[0].Result ? setShow_error(false) : setShow_error(true)\r\n \r\n  }\r\n    )\r\n}\r\n\r\nconst defaultvalue = () => {\r\n  setData(\r\n    {\r\n    email: String(edit_data.map(e=>e.email)),\r\n    password: String(edit_data.map(e=>e.password)),\r\n    sec1: String(edit_data.map(e=>e.sec1)),\r\n    sec2: String(edit_data.map(e=>e.sec2))\r\n  }\r\n  )\r\n\r\n}\r\n\r\n// NAVIGATION TO ANOTHER PAGE\r\n    let nv = useNavigate()\r\n\r\n\r\n    // HTTP REQUEST\r\n    useEffect(() => {\r\n        \r\n     let api_calls = true\r\n      axios.get('http://localhost/REACTJS/cognate1%20api/View_LoginAPI.php')\r\n      .then(res=> \r\n        {\r\n          if (api_calls)\r\n          {\r\n            setEdit_data(res.data)\r\n          }\r\n          \r\n        }\r\n        )\r\n        .catch(err=>console.log(err))\r\n        \r\n    return () => api_calls = false\r\n      \r\n    });\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n\r\n      <Dialog\r\n        open={sec}\r\n        // onClose={close}\r\n        // PaperComponent={PaperComponent}\r\n        // aria-labelledby=\"draggable-dialog-title\"\r\n      >\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n\r\n          Setup security question\r\n \r\n          \r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n{/* Question #1 */}\r\n<Typography>\r\nUnforgettable experience that you have already forgotten?\r\n</Typography>\r\n\r\n<CTextField \r\n  fullWidth \r\n  type='email'  \r\n  variant=\"outlined\" \r\n  margin=\"normal\" \r\n  value={String(data.sec1)}\r\n  onChange={e=>{\r\n    setData({...data, sec1: e.target.value})\r\n  }}\r\n  disable={true}\r\n/> \r\n\r\n{/* Question #2 */}\r\n<Typography>\r\nSomething you neglected?\r\n</Typography>\r\n\r\n<CTextField \r\n  fullWidth \r\n  type='email'  \r\n  variant=\"outlined\" \r\n  margin=\"normal\"\r\n \r\n  value={String(data.sec2)}\r\n\r\n  onChange={e=>{\r\n    setData({...data, sec2: e.target.value})\r\n  }}\r\n  disable={true}\r\n\r\n/> \r\n\r\n{/* Save edit */}\r\n<Fab  variant='extended' color='primary' onClick={update} >\r\n  save edit\r\n</Fab>  \r\n          </DialogContentText>\r\n\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n{/* cancel edit */}\r\n          <Button autoFocus onClick={e=> {\r\n            e.preventDefault()\r\n            setSec(false)\r\n             }} >\r\n            Cancel\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Alert if success */}\r\n      <Collapse in={show_alert}>\r\n        <Alert severity=\"success\"\r\n           onClose={()=>\r\n            {\r\n              setShow_alert(false)\r\n              setEnble(true)\r\n            }\r\n\r\n           \r\n           }>\r\n           Data has been updated\r\n        </Alert>\r\n      </Collapse>\r\n\r\n      {/* Alert if not*/}\r\n      <Collapse in={show_error}>\r\n        <Alert severity=\"error\"\r\n           onClose={()=>\r\n            {\r\n              setShow_error(false)\r\n\r\n            }\r\n\r\n           \r\n           }>\r\n           Unable to update\r\n        </Alert>\r\n\r\n      </Collapse>\r\n      \r\n\r\n        <Grid\r\n        container\r\n        direction=\"column \"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\">\r\n\r\n        <Box padding={2} paddingTop={10}>\r\n\r\n            <Grid \r\n            component={Paper} \r\n            variant='outlined' \r\n            padding={3}\r\n            style={{\r\n                backgroundColor:'white',\r\n                border:'2px solid black'\r\n            }}>\r\n                <Stack\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={2}>\r\n\r\n                  {/* Logo */}\r\n                    <Box \r\n                    fixed\r\n                    component='img'\r\n                    style={{\r\n                        width:120,\r\n                        height:120,\r\n                    }}\r\n                    src={LOGO}/>\r\n\r\n                    {/* Label Name */}\r\n                    <Typography  variant='h4'>Francis Maneclang</Typography>\r\n                    <Typography  variant='h6'>CEO</Typography>\r\n\r\n{/* Edit and cancel edit button */}\r\n                    <Grid container justifyContent=\"flex-end\">\r\n\r\n                    {/* SetUp security question */}\r\n                      <IconButton color='primary'\r\n                      onClick={e=>{\r\n                        setSec(true)\r\n  \r\n                        defaultvalue()\r\n                       \r\n                      }}>\r\n                        <SettingsIcon fontSize='large'/>\r\n                        asdsd\r\n                      </IconButton>\r\n\r\n                      <IconButton color='primary' onClick={e=>{\r\n                        e.preventDefault(); \r\n                        defaultvalue()\r\n                        enble ?\r\n                        setEnble(false): setEnble(true)}}>\r\n                          \r\n                          {\r\n                            enble ? <BorderColorOutlinedIcon fontSize='large' /> : <CloseIcon fontSize='large' />\r\n                          }\r\n                          \r\n                        \r\n                      </IconButton>\r\n\r\n                    </Grid>\r\n\r\n                <Collapse in={enble}>\r\n                  \r\n\r\n{/* email edit */}\r\n         \r\n                  <CTextField \r\n                    fullWidth \r\n                    type='email'  \r\n                    variant=\"outlined\" \r\n                    margin=\"normal\"\r\n                   \r\n                    value={String(edit_data.map(e=>e.email))}\r\n                    disable={true}\r\n\r\n                  />       \r\n\r\n\r\n{/* password edit */}\r\n                  <CTextField \r\n                    fullWidth \r\n                    type='password'\r\n                    variant=\"outlined\" \r\n                    margin=\"normal\"\r\n                    value={String(edit_data.map(e=>e.password))}\r\n                    disable={true}\r\n\r\n                   \r\n                    />\r\n                </Collapse> \r\n\r\n\r\n{/* FOR UPDATE QUERY */}\r\n                    {enble === true && <Divider>Click edit button to edit</Divider> }              \r\n                  \r\n                <Collapse in={enble ? false : true}>\r\n\r\n{/* Email */}\r\n                     <CTextField \r\n                      fullWidth \r\n                      type='email'\r\n                      placeholder='Enter your new password'\r\n                      variant=\"outlined\" \r\n                      margin=\"normal\"\r\n                      \r\n                      value ={data.email}\r\n                     \r\n                      onChange={e=>{\r\n                      setData({...data, email: e.target.value})\r\n                      }}\r\n\r\n                      onClick={()=>{\r\n                        if (data.password === \"\")\r\n                        {\r\n                          setData({...data, password: String(edit_data.map(e=>e.password))})\r\n                        }\r\n                        \r\n\r\n                      }}\r\n                    \r\n                      />\r\n{/* Password */}\r\n                      <CTextField \r\n                      fullWidth \r\n                      type='password'\r\n                      placeholder='Enter your new password'\r\n                      variant=\"outlined\" \r\n                      margin=\"normal\"\r\n                      value ={data.password}\r\n                      onChange={e=>{\r\n                        setData({...data, password: e.target.value})\r\n                      }}\r\n                      onClick={()=>{\r\n                        if (data.password === String(edit_data.map(e=>e.password)))\r\n                        {\r\n                          setData({...data, password: \"\"})\r\n                        }\r\n                        \r\n\r\n                      }}\r\n                \r\n                        \r\n                      />\r\n\r\n\r\n                </Collapse>\r\n                     \r\n                   \r\n                    <Button\r\n                    variant='contained'\r\n\r\n                    disabled={enble}  \r\n\r\n                    style={{\r\n                    borderRadius: '20px',\r\n                    width:150,\r\n                    padding:10,\r\n                    }}\r\n                    onClick={update}\r\n                    \r\n                    \r\n                    > Save </Button>\r\n\r\n                    <Button \r\n                    variant='contained' \r\n                    style={{\r\n                    borderRadius: '20px',\r\n                    width:150,\r\n                    padding:10}}\r\n                    \r\n                    onClick={e=> nv(\"/Mainpage\")}\r\n                    \r\n                    > cancel </Button>\r\n\r\n                    \r\n\r\n      \r\n\r\n\r\n                </Stack>\r\n              \r\n\r\n\r\n\r\n\r\n              \r\n\r\n\r\n            \r\n\r\n\r\n\r\n\r\n            </Grid>\r\n       \r\n                \r\n\r\n            \r\n\r\n\r\n         \r\n    \r\n        </Box>\r\n         \r\n        </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Edit_profile","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Salesreport.jsx",[],[],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Show_archive.jsx",["191","192"],[],"import { \r\n\r\n  Alert,\r\n  Button,\r\n  Collapse,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Fab, \r\n  Grid, \r\n  IconButton, \r\n  InputAdornment, \r\n  TextField, \r\n  Tooltip, \r\n  Typography ,\r\n\r\n} from '@mui/material'\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport {React , useEffect, useState }from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport OutboxIcon from '@mui/icons-material/Outbox';\r\n\r\n//npm i @mui/x-data-grid\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport {useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CTextField = styled(TextField)({\r\n  '& .MuiInputBase-input': {\r\n\r\n    position: 'relative',\r\n    fontSize: 20,\r\n    padding: '10px 12px',\r\n\r\n  },\r\n\r\n})\r\n\r\n\r\n// MAIN FUNCTIOM \r\nconst Show_archive = () => {\r\n\r\n\r\nlet NavS = useNavigate();\r\n\r\n// Category data variable\r\nconst [category, setCategory] = useState(\"None\")\r\n\r\n//Data from API\r\nconst [Data,setData] = useState() \r\n\r\n// Data from Login\r\n\r\nconst [login,setLogin] = useState({\r\n  \"email\": \"\",\r\n  \"password\" : \"\"\r\n})\r\n\r\n//search data variable\r\nconst [search,setSearch] = useState(\"\") \r\n\r\n\r\n// Filtering data \r\nconst filtered = !search ? \r\nData \r\n: Data?.filter((person) => \r\n    person.Product_name.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n\r\n  // http request api archive\r\nuseEffect(() => {\r\n\r\n\r\n  axios.get('http://localhost/REACTJS/cognate1%20api/Archive_productdataAPI.php')\r\n  .then(res=>setData(res.data))\r\n\r\n \r\n  });\r\n\r\n  // Password\r\n  const [errors,setErrors] = useState(true)\r\n\r\n  // Show Alert\r\n  const [show_success,setShow_success] = useState()\r\n\r\n  // Delete product data\r\nconst delete_product = () => {\r\n\r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Delete_archiveProductAPI.php\", { \"Product_ID\": productID } )\r\n    .then(res => {\r\n\r\n      setOpenDialog(false)\r\n      setShow_success(res.data[0].Result)\r\n      \r\n    }\r\n    )\r\n    setLogin({...login , password: \"\"})\r\n}\r\n\r\n\r\n// show retrieve success\r\nconst [show_retrieve,setShow_retrieve] = useState()\r\n\r\n // Retrieve product data\r\n const Retrieve_product = (paramdata) => {\r\n\r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Retrieve_archiveAPI.php\", { \"Product_ID\": paramdata } )\r\n  .then(res => {\r\n\r\n    setShow_retrieve(res.data[0].Result)\r\n    \r\n  }\r\n  )\r\n  setLogin({...login , password: \"\"})\r\n}\r\n\r\nconst verification_delete = e =>{\r\n  e.preventDefault()\r\n\r\n\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', login)\r\n  .then(res=>{\r\n    if (res.data[0].Result)\r\n    {\r\n      delete_product() \r\n      setErrors(res.data[0].Result)\r\n    }else{\r\n      setErrors(res.data[0].Result)\r\n    }\r\n    \r\n  }\r\n  )\r\n}\r\n\r\n// product ID\r\nconst [openDialog,setOpenDialog] = useState(false)\r\n\r\n// product ID\r\nconst [productID,setProductID] = useState(false)\r\n\r\n// Open dialog\r\nconst open_dialog = (param) => {\r\n\r\n  axios.get('http://localhost/REACTJS/cognate1%20api/View_LoginAPI.php')\r\n  .then(res=>setLogin({...login, email: res.data[0].email}))\r\n  \r\n\r\n  if(param.field === \"action\")\r\n  {\r\n    setProductID(param.id)\r\n    setOpenDialog(true)\r\n  }\r\n\r\n  if(param.field === \"Retrieve\")\r\n  {\r\n    // setProductID(param.id)\r\n    Retrieve_product(param.id)\r\n  }\r\n \r\n}\r\n\r\n\r\n// Column header\r\n\r\n  const columns = [\r\n\r\n    // ID Column\r\n    { field: 'Product_ID', \r\n      headerName: 'ID', \r\n      width: 70 ,\r\n      headerAlign: 'center',\r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n\r\n    // ID Column\r\n    { field: 'Product_name', \r\n      headerName: 'name', \r\n      width: 200,\r\n      headerClassName: 'super-app-theme--header',\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    \r\n    },\r\n\r\n    { field: 'Product_category', \r\n      headerName: 'category', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n  \r\n    \r\n    },\r\n\r\n    { field: 'Product_stocks', \r\n      headerName: 'stocks ', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n        <div\r\n        style={{\r\n          color: \"black\",\r\n          fontSize: 18,\r\n          width: \"100%\",\r\n          textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n          </div>\r\n          );\r\n      }\r\n    },\r\n\r\n    { field: 'Product_price', \r\n      headerName: 'price', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    \r\n// delete\r\n    {\r\n      field: 'action',\r\n      headerName: 'Delete',\r\n      width: 130,\r\n      headerAlign: 'center', \r\n      renderCell: () => {\r\n        return (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              textAlign: \"center\",\r\n              // marginRight: '2'\r\n            }}\r\n          >\r\n           \r\n\r\n          <IconButton color=\"primary\" aria-label=\"delete\">\r\n              <DeleteOutlineOutlinedIcon/>\r\n          </IconButton>\r\n           \r\n  \r\n          </div>\r\n\r\n\r\n        );\r\n      }\r\n    },\r\n    // Retrieve\r\n    {\r\n      field: 'Retrieve',\r\n      headerName: 'Retrieve',\r\n      width: 130,\r\n      headerAlign: 'center', \r\n      renderCell: () => {\r\n        return (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              textAlign: \"center\",\r\n              // marginRight: '2'\r\n            }}\r\n          >\r\n           \r\n\r\n          <IconButton color=\"primary\" aria-label=\"delete\">\r\n              <OutboxIcon/>\r\n          </IconButton>\r\n           \r\n  \r\n          </div>\r\n\r\n\r\n        );\r\n      }\r\n    },\r\n\r\n  ];\r\n \r\n  return (\r\n    <div>\r\n\r\n{/* Alert Success */}\r\n<Collapse in={show_success}>\r\n          <Alert severity=\"success\"\r\n          onClose={()=>{   \r\n            setShow_success(false) \r\n          }}\r\n          >\r\n            Data has been succesfully permantly deleted\r\n          </Alert>\r\n</Collapse>\r\n\r\n{/* Alert Success retrieve */}\r\n<Collapse in={show_retrieve}>\r\n          <Alert severity=\"success\"\r\n          onClose={()=>{   \r\n            setShow_retrieve(false) \r\n          }}\r\n          >\r\n            Data has been succesfully retrieve\r\n          </Alert>\r\n</Collapse>\r\n\r\n{/* Whole Container  */}\r\n<Grid container spacing={2}>\r\n\r\n\r\n\r\n  {/* Message Dialog */}\r\n  <Dialog\r\n  open={openDialog}\r\n  >\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle>\r\n        <Typography variant='h5'>\r\n                    High Resolution\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n        <Typography variant='body1'>\r\n          Are you sure you want to permantly delete this ?\r\n        </Typography>\r\n\r\n    {/* Message Textbox */}\r\n        <TextField \r\n        type='password' \r\n        fullWidth \r\n        placeholder='If do, please type your password' \r\n        fontSize={9} \r\n        size='small' \r\n        margin='normal'\r\n        value={login.password}\r\n        error={errors ? false : true}\r\n        helperText={errors ? \"\" : \"very wrong\"}\r\n        onChange={e=>setLogin({...login,password: e.target.value})}\r\n        />\r\n                \r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n          <Button onClick={verification_delete} autoFocus >Okay</Button>\r\n          <Button onClick={()=>{\r\n            setLogin({email: \"\", \r\n            password: \"\"})\r\n            setOpenDialog(false)\r\n            setErrors(true)}} >\r\n                    Cancel\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n\r\n{/* Products */}\r\n    <Grid container item xs={12} md={8}>\r\n      <Typography variant='h3' marginY={2} marginLeft={6}> Archive List</Typography>\r\n    </Grid>\r\n\r\n{/* Button container style */}\r\n    <Grid container item xs={12} md={3.5} >\r\n\r\n{/* Button container para may margin na maayos */}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-end\"\r\n        alignItems=\"center\"\r\n        margin={2}\r\n        spacing={2}>\r\n\r\n            <Grid item>\r\n\r\n{/*Go back */}\r\n\r\n              <Tooltip title=\"Add Item\">\r\n                <Fab color=\"primary\" variant='extended' aria-label=\"add\" onClick={e=>NavS(\"/Mainpage/Products\")} >\r\n                  <ArrowBackIcon />\r\n                  go back\r\n                </Fab>\r\n              </Tooltip>  \r\n\r\n            </Grid>\r\n            \r\n\r\n        </Grid>\r\n\r\n    </Grid>\r\n\r\n{/* Search bar and data container */}\r\n    <Grid\r\n      container\r\n      item\r\n      xs={12}\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"flex-start\">\r\n\r\n      {/* Container para maayos ang margin */}\r\n        <Grid container item xs={12} marginLeft={3} marginRight={3} style={{width: '1000'}}>\r\n\r\n   {/* Search bar */}\r\n          <CTextField \r\n          fullWidth \r\n          value = {search} \r\n          onChange={e => setSearch(e.target.value)}  \r\n          placeholder='Search by product name' \r\n          variant='standard'\r\n          disabled={Data ? false : true}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">\r\n\r\n                <SearchOutlinedIcon fontSize='large' />\r\n             \r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          \r\n          \r\n          />\r\n   {/* CATEGORY STOCKS */}\r\n   <Grid container item xs={2} md={1} margin={2}>\r\n          {/* <Select\r\n          value={category}\r\n          label=\"category\"\r\n          defaultValue=\"{category}\"\r\n          onChange={e => setCategory(e.target.value)}  \r\n          \r\n        >\r\n\r\n          <MenuItem >Ten</MenuItem>\r\n          <MenuItem  >Twenty</MenuItem>\r\n          <MenuItem>Thirty</MenuItem>\r\n        </Select> */}\r\n\r\n          </Grid>\r\n\r\n         \r\n          {/* Datagrid */}\r\n          <Grid\r\n          container\r\n          marginLeft={2}\r\n          marginRight={4}\r\n          marginBottom={3}\r\n          style={{\r\n          height:550 ,\r\n          width:'100%',\r\n          backgroundColor: 'White',\r\n          border:'2px solid black',\r\n          \r\n          \r\n          }}>\r\n\r\n               <DataGrid\r\n                  columns={columns}\r\n                  getRowId={(rows)=> rows.Product_ID}\r\n                  rows={filtered} // data na pinasok yung data \r\n                  \r\n                  pageSize={10}\r\n                  onCellClick={open_dialog}\r\n                />\r\n\r\n               \r\n    \r\n        </Grid>\r\n        \r\n      </Grid>\r\n\r\n    \r\n    </Grid> \r\n    \r\n\r\n          \r\n</Grid>\r\n\r\n\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Show_archive","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Products.jsx",["193","194","195","196","197","198"],[],"import { \r\n\r\n  Alert,\r\n  Button,\r\n  Collapse,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Fab, \r\n  Grid, \r\n  IconButton, \r\n  InputAdornment, \r\n\r\n  SpeedDial, \r\n\r\n  SpeedDialAction, \r\n\r\n  TextField, \r\n  Tooltip, \r\n  Typography ,\r\n\r\n} from '@mui/material'\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport {React , useEffect, useState }from 'react';\r\nimport axios from 'axios';\r\n\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport ArchiveOutlinedIcon from '@mui/icons-material/ArchiveOutlined';\r\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\r\n\r\n//npm i @mui/x-data-grid\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport {useNavigate } from 'react-router-dom';\r\nimport { CcTextField } from '../Stocks';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const CTextField = styled(TextField)({\r\n  '& .MuiInputBase-input': {\r\n\r\n    position: 'relative',\r\n    fontSize: 20,\r\n    padding: '10px 12px',\r\n\r\n  },\r\n\r\n})\r\n\r\nconst actions = [\r\n  { icon: <AddIcon />, name: 'Add item' },\r\n  { icon: <ArchiveOutlinedIcon />, name: 'Save' },\r\n];\r\n\r\n\r\n// MAIN FUNCTIOM \r\nconst Products = () => {\r\n\r\n\r\nlet NavS = useNavigate();\r\n\r\n// Category data variable\r\nconst [category, setCategory] = useState(\"None\")\r\n\r\n//Data from API\r\nconst [Data,setData] = useState() \r\n\r\n// Data from Login\r\n\r\nconst [login,setLogin] = useState({\r\n  \"email\": \"\",\r\n  \"password\" : \"\",\r\n  \"sec1\": null,\r\n  \"sec2\": null\r\n})\r\n\r\n//search data variable\r\nconst [search,setSearch] = useState(\"\") \r\n\r\n\r\n// Filtering data \r\nconst filtered = !search ? \r\nData \r\n: Data?.filter((person) => \r\n    person.Product_name.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  // http request api\r\n\r\n\r\n  const [setTrue, setSetTrue] = useState(true)\r\n  const [list_stocks,setList_stocks] = useState()\r\n  const [show_dia,setShow_dia] =  useState(false)\r\nuseEffect(() => {\r\n  let api = true\r\n  axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n  .then(res=>{\r\n    if (api)\r\n    {\r\n      setData(res.data)\r\n\r\n      if (setTrue)\r\n      {\r\n        // console.log(\"run\")\r\n        if ([...res.data]?.filter(e=>e.Product_stocks <= 0).length === 0){\r\n          setShow_dia(false)\r\n        }else{\r\n          setList_stocks([...res.data]?.filter(e=>e.Product_stocks <= 0).map(e=>e.Product_name))\r\n          setShow_dia(true)\r\n\r\n        }\r\n      }\r\n\r\n\r\n        // [...res.data]?.filter(e=>e.Product_stocks <= 0).length === 0 ?\r\n        // setAlert_stocks(false) : setAlert_stocks(true) \r\n    }\r\n\r\n    \r\n  }\r\n    \r\n\r\n    \r\n    )\r\n\r\n return () => api = false\r\n  });\r\n\r\n  // Password\r\n  const [errors,setErrors] = useState(true)\r\n\r\n  // Show Alert\r\n\r\n  const [show_success,setShow_success] = useState()\r\n\r\n  // Delete product data\r\nconst delete_product = () => {\r\n\r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Delete_productdataAPI.php\", { \"Product_ID\": productID } )\r\n    .then(res => {\r\n\r\n      setOpenDialog(false)\r\n      setShow_success(res.data[0].Result)\r\n      \r\n    }\r\n    )\r\n    setLogin({...login , password: \"\"})\r\n}\r\n\r\nconst verification_delete = e =>{\r\n  e.preventDefault()\r\n\r\n\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', login)\r\n  .then(res=>{\r\n    if (res.data[0].Result)\r\n    {\r\n      delete_product() \r\n      setErrors(res.data[0].Result)\r\n    }else{\r\n      setErrors(res.data[0].Result)\r\n    }\r\n    \r\n  }\r\n  )\r\n}\r\n\r\n// product ID\r\nconst [openDialog,setOpenDialog] = useState(false)\r\n\r\n// product ID\r\nconst [productID,setProductID] = useState(false)\r\n\r\n// Open dialog\r\nconst open_dialog = (param) => {\r\n\r\n  axios.get('http://localhost/REACTJS/cognate1%20api/View_LoginAPI.php')\r\n  .then(res=>setLogin({...login, email: res.data[0].email}))\r\n  \r\n\r\n  if(param.field === \"action\")\r\n  {\r\n    setProductID(param.id)\r\n    setOpenDialog(true)\r\n  }\r\n \r\n}\r\n\r\n\r\n// Column header\r\n\r\n  const columns = [\r\n\r\n\r\n    // ID Column\r\n    { field: 'Product_ID', \r\n      headerName: 'ID', \r\n      width: 70 ,\r\n      headerAlign: 'center',\r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n\r\n    // name Column\r\n    { field: 'Product_name', \r\n      headerName: 'name', \r\n      width: 200,\r\n      headerClassName: 'super-app-theme--header',\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    \r\n    },\r\n\r\n    { field: 'Product_category', \r\n      headerName: 'category', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n  \r\n    \r\n    },\r\n\r\n    { field: 'Product_stocks', \r\n      headerName: 'stocks ', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n        <div\r\n        style={{\r\n          color: \"black\",\r\n          fontSize: 18,\r\n          width: \"100%\",\r\n          textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n          </div>\r\n          );\r\n      }\r\n    },\r\n\r\n    { field: 'Product_price', \r\n      headerName: 'price', \r\n      width: 130,\r\n      headerAlign: 'center', \r\n\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              fontSize: 18,\r\n              width: \"100%\",\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    \r\n// delete\r\n    {\r\n      field: 'action',\r\n      headerName: 'Action',\r\n      width: 130,\r\n      headerAlign: 'center', \r\n      renderCell: () => {\r\n        return (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              textAlign: \"center\",\r\n              // marginRight: '2'\r\n            }}\r\n          >\r\n           \r\n\r\n          <IconButton color=\"primary\" aria-label=\"delete\">\r\n              <DeleteOutlineOutlinedIcon/>\r\n          </IconButton>\r\n           \r\n  \r\n          </div>\r\n\r\n\r\n        );\r\n      }\r\n    }\r\n\r\n  ];\r\n \r\n  return (\r\n    <div>\r\n{/* Alert Success */}\r\n<Collapse in={show_success}>\r\n          <Alert severity=\"success\"\r\n          onClose={()=>{\r\n            \r\n            setShow_success(false) \r\n          }}\r\n          >\r\n            Data has been succesfully move to archive\r\n          </Alert>\r\n</Collapse>\r\n{/* Whole Container  */}\r\n<Grid container spacing={2}>\r\n\r\n\r\n{/* Restock notification!*/}\r\n\r\n<Dialog\r\n        open={show_dia}\r\n      >\r\n        {/* Dialog Tittle */}\r\n      <DialogTitle>\r\n      Please restock of the follwing!\r\n      </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n              {\"Product: \" + list_stocks}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          <Button onClick={()=>{\r\n            setSetTrue(false)\r\n            setShow_dia(false)\r\n          }} autoFocus>\r\n            Okay\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n  {/* Message Dialog */}\r\n  <Dialog\r\n  open={openDialog}\r\n  >\r\n\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle>\r\n        <Typography variant='h5'>\r\n                    High Resolution\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n        <Typography variant='body1'>\r\n          Are you sure you want to move this into archive ?\r\n        </Typography>\r\n\r\n    {/* Message Textbox */}\r\n        <TextField \r\n        type='password' \r\n        fullWidth \r\n        placeholder='If do, please type your password' \r\n        fontSize={9} \r\n        size='small' \r\n        margin='normal'\r\n        value={login.password}\r\n        error={errors ? false : true}\r\n        helperText={errors ? \"\" : \"very wrong\"}\r\n        onChange={e=>setLogin({...login,password: e.target.value})}\r\n        />\r\n                \r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n          <Button onClick={verification_delete} autoFocus >Okay</Button>\r\n          <Button onClick={()=>{\r\n            setLogin({email: \"\", \r\n            password: \"\"})\r\n            setOpenDialog(false)\r\n            setErrors(true)}} >\r\n                    Cancel\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n\r\n{/* Products */}\r\n    <Grid container item xs={12} md={10}>\r\n      <Typography variant='h3' marginY={2} marginLeft={2}> Products</Typography>\r\n    </Grid>\r\n\r\n{/* Button container style */}\r\n    <Grid container item xs={12} md={2} >\r\n\r\n{/* Button container para may margin na maayos */}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-end\"\r\n        alignItems=\"center\"\r\n        margin={2}\r\n        spacing={2}>\r\n\r\n            <Grid item>\r\n\r\n{/*add item */}\r\n\r\n            <Tooltip title=\"Add Item\">\r\n              <Fab color=\"primary\" aria-label=\"add\" onClick={e=>NavS(\"/Mainpage/Products/AddItem\")} >\r\n                <SpeedDialIcon />\r\n              </Fab>\r\n            </Tooltip>  \r\n\r\n            </Grid>\r\n            \r\n{/* Show archive*/}\r\n            <Grid item>\r\n\r\n            <Tooltip title=\"Show archive\">\r\n\r\n              <Fab color=\"primary\"  aria-label=\"add\" onClick={e=>NavS(\"/Mainpage/Products/ArchiveList\")} >\r\n                  <ArchiveOutlinedIcon />\r\n              </Fab>\r\n\r\n            </Tooltip> \r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n    </Grid>\r\n\r\n{/* Search bar and data container */}\r\n    <Grid\r\n      container\r\n      item\r\n      xs={12}\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"flex-start\">\r\n\r\n      {/* Container para maayos ang margin */}\r\n        <Grid container item xs={12} marginLeft={3} marginRight={3} style={{width: '1000'}}>\r\n\r\n   {/* Search bar */}\r\n          <CTextField \r\n          fullWidth \r\n          value = {search} \r\n          onChange={e => setSearch(e.target.value)}  \r\n          placeholder='Search by product name' \r\n          variant='standard'\r\n          disabled={Data ? false : true}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">\r\n\r\n                <SearchOutlinedIcon fontSize='large' />\r\n             \r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          \r\n          \r\n          />\r\n\r\n   {/* CATEGORY STOCKS */}\r\n          <Grid container item xs={2} md={1} margin={2}>\r\n          {/* <Select\r\n          value={category}\r\n          label=\"category\"\r\n          defaultValue=\"{category}\"\r\n          onChange={e => setCategory(e.target.value)}  \r\n          \r\n        >\r\n\r\n          <MenuItem >Ten</MenuItem>\r\n          <MenuItem  >Twenty</MenuItem>\r\n          <MenuItem>Thirty</MenuItem>\r\n        </Select> */}\r\n\r\n          </Grid>\r\n         \r\n          {/* Datagrid */}\r\n          <Grid\r\n          container\r\n          marginLeft={2}\r\n          marginRight={4}\r\n          marginBottom={3}\r\n          style={{\r\n          height:550 ,\r\n          width:'100%',\r\n          backgroundColor: 'White',\r\n          border:'2px solid black',\r\n          \r\n          \r\n          }}>\r\n\r\n               <DataGrid\r\n                  columns={columns}\r\n                  getRowId={(rows)=> rows.Product_ID}\r\n                  rows={filtered} // data na pinasok yung data \r\n                  \r\n                  pageSize={10}\r\n                  onCellClick={open_dialog}\r\n                />\r\n\r\n               \r\n    \r\n        </Grid>\r\n        \r\n      </Grid>\r\n\r\n    \r\n    </Grid> \r\n    \r\n\r\n          \r\n</Grid>\r\n\r\n\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Products","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\products\\Add_item.jsx",["199","200"],[],"import { Autocomplete, Avatar, Box, Button,  Dialog,  DialogActions,  DialogContent,  DialogTitle,  Grid,  Hidden,  InputAdornment,  TextField, Typography} from '@mui/material'\r\nimport { styled } from \"@mui/material/styles\";\r\nimport React, { useEffect, useState } from 'react'\r\nimport {useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nimport Alert from '@mui/material/Alert';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\nimport Default_Image from './image.png'\r\n\r\n// Custom TextField\r\nconst CTextField = styled(TextField)({\r\n  '& .MuiInputBase-input': {\r\n\r\n    position: 'relative',\r\n    fontSize: 20,\r\n    padding: '12px',\r\n\r\n  },\r\n  \"& label.Mui-focused\": {\r\n    color: \"#9B3C21\"\r\n  },\r\n\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      border: \"2px solid #000000\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n\r\n      border: \"2px solid #9B3C21\"\r\n    }\r\n  }\r\n});\r\n\r\n\r\nconst Add_item = () => {\r\n\r\n  ///Data\r\n  const [Data,setData]= useState([])\r\n\r\n\r\n\r\nconst [show_alertfal,setShow_alertfal] = useState()\r\nconst [show_alert,setShow_alert] = useState()\r\nconst [mensahe, setMensahe] = useState()\r\n\r\n//Json create\r\n\r\nconst [create, setCreate] = useState({\r\n  \"Product_image\" : Default_Image,\r\n  \"Product_name\" : \"\",\r\n  \"Product_category\" : \"\",\r\n  \"Product_stocks\" : 0,\r\n  \"Product_price\" : 0,\r\n  \"Product_Status\": \"Available\"\r\n})\r\n\r\nuseEffect(() => {\r\n  let api = true\r\n  axios.get(\"http://localhost/REACTJS/cognate1%20api/category.php\")\r\n  .then(res=>{\r\n    if (api)\r\n    {\r\n      setData(res.data?.map(e=>e.category))\r\n    }\r\n\r\n     // setData(res.data)\r\n    \r\n  }\r\n  )\r\n\r\n  return () => api = false\r\n  \r\n});\r\n\r\nconst create_submit = () => {\r\n\r\n  // console.log(create)\r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_productdataAPI.php\", create)\r\n  .then(res=>\r\n    {\r\n\r\n      setShow_alert(res.data[0].Result)\r\n      setShow_alertfal(res.data[0].Result)\r\n      setDialog(false)\r\n      setMensahe(res.data[0].Message)\r\n      console.log(res.data)\r\n      \r\n    }\r\n  )\r\n\r\n\r\n}\r\nlet nav = useNavigate()\r\n\r\n// Show message Dialog\r\nconst [dialog,setDialog] = useState(false)\r\n\r\n// Set data\r\nconst [login,setLogin] = useState({\r\n  \"email\": \"\",\r\n  \"password\" : \"\",\r\n  \"sec1\": null,\r\n  \"sec2\": null\r\n})\r\n\r\n// set email\r\nconst setemail = e => {\r\n  \r\n  axios.get('http://localhost/REACTJS/cognate1%20api/View_LoginAPI.php')\r\n  .then(res=>\r\n    {\r\n      setLogin({...login, email: res.data[0].email})\r\n     \r\n    }\r\n  )\r\n \r\n}\r\n\r\n\r\n\r\n  // Password\r\nconst [errors,setErrors] = useState(true)\r\n\r\n// Set verification\r\nconst veri_password = e => {\r\n  e.preventDefault()\r\n  axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', login)\r\n  .then(res=>\r\n    {\r\n      res.data[0].Result ? create_submit() : setErrors(res.data[0].Result) \r\n      setErrors(res.data[0].Result)\r\n\r\n    }\r\n  )\r\n\r\n}\r\n\r\nconst [disble,setDisble] = useState(false)\r\n  return (\r\n    <div>\r\n\r\n<Dialog\r\n  open={dialog}\r\n  >\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle>\r\n        <Typography variant='h5'>\r\n                    High Resolution\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n        <Typography variant='body1'>\r\n         Please review of the following: \r\n        </Typography>\r\n\r\n    {/* Confirm Textbox */}\r\n\r\n        <TextField\r\n        size='small'\r\n        label='Product name'\r\n        fullWidth \r\n        type='text' \r\n        placeholder='Input product name' \r\n        variant=\"outlined\" \r\n        margin=\"normal\"\r\n        value = {create.Product_name}\r\n        onChange = {e => setCreate({...create, Product_name: e.target.value})}/>\r\n\r\n        <Autocomplete\r\n        size='small'\r\n        label='Product category'\r\n        freeSolo\r\n        disablePortal\r\n        options={Data}\r\n        value = {create.Product_category}\r\n        onChange = {(e, value) => setCreate({...create, Product_category: value})}\r\n \r\n          // onChange={(event, value) => setCategory(value)}\r\n          sx={{\r\n              width: 400\r\n          }}\r\n          renderInput={\r\n            (params) =>\r\n\r\n              // Textfield\r\n            <TextField\r\n            {...params}\r\n                   \r\n            value = {create.Product_category}\r\n            onChange = {e => setCreate({...create, Product_category: e.target.value})}\r\n   \r\n            type='text' \r\n            placeholder='Input product category'\r\n            variant=\"outlined\" \r\n            margin=\"normal\"/>} /> \r\n\r\n\r\n        <TextField \r\n        size='small'\r\n        label='Product stocks'\r\n        fullWidth \r\n        type='number' \r\n        placeholder='Input product stocks' \r\n        variant=\"outlined\" \r\n        margin=\"normal\"\r\n        value = {create.Product_stocks}\r\n        onChange = {e => setCreate({...create, Product_stocks: e.target.value})}\r\n        />\r\n\r\n        <TextField \r\n        size='small'\r\n        label='Product price'\r\n        fullWidth \r\n        type='number' \r\n        placeholder='Input product price' \r\n        variant=\"outlined\" \r\n        margin=\"normal\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <p>Php</p>\r\n                   \r\n            </InputAdornment>\r\n            ),\r\n          }}\r\n        value = {create.Product_price}\r\n        onChange = {e => setCreate({...create, Product_price: e.target.value})}\r\n                  />\r\n                  \r\n\r\n\r\n\r\n\r\n\r\n        <CTextField \r\n        error={!errors ? true : false }\r\n        helperText={!errors ? \"Password are incorrect\" : \"\"}\r\n        fullWidth \r\n        label='Password'\r\n        type='password' \r\n        placeholder='Please input your password ' \r\n        variant=\"outlined\" \r\n        margin=\"normal\"\r\n        value = {login.password}\r\n        onChange = {e => setLogin({...login, password: e.target.value})}\r\n        />    \r\n                \r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n          <Button \r\n          onClick={veri_password} \r\n          autoFocus >Okay</Button>\r\n\r\n          <Button \r\n         onClick={()=>{\r\n          setDialog(false)\r\n          setErrors(true)\r\n          setLogin({...login , password: \"\"})\r\n          setDisble(false)\r\n\r\n         }}\r\n           \r\n             >\r\n                    Cancel\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n  {/* show when success  */}\r\n      <Collapse in={show_alert}>\r\n\r\n        <Alert  severity=\"success\"\r\n           onClose={()=>{\r\n             setShow_alert(false)\r\n             setCreate({\r\n              Product_image:Default_Image,\r\n               Product_name:\"\",\r\n               Product_category:\"\",\r\n               Product_stocks:0,\r\n               Product_price:0,\r\n               Product_Status: \"Available\"\r\n             })\r\n             setLogin({...login , password: \"\"})\r\n             setDisble(false)\r\n             }}>\r\n           Data has been added\r\n        </Alert>\r\n\r\n      </Collapse>\r\n\r\n      {/* show when error  */}\r\n      <Collapse in={show_alertfal ? false : true}>\r\n\r\n      <Alert  severity=\"error\"\r\n        onClose={()=>{\r\n          setShow_alertfal(true)\r\n          setLogin({...login , password: \"\"})\r\n          setDisble(false)\r\n          }}>\r\n          {mensahe ? mensahe : \"Product name and Product category should not empty\" }\r\n        \r\n      </Alert>\r\n\r\n      </Collapse>\r\n\r\n\r\n\r\n\r\n\r\n      {/* WHOLE CONTAINER LOADS */}\r\n      <Grid \r\n        container \r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\">\r\n\r\n\r\n  {/* Add Item */}\r\n\r\n          <Typography marginTop= {15} variant='h3'> Add new item</Typography>\r\n      \r\n      \r\n  {/* container inputs */}\r\n        <Grid\r\n        item\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\">\r\n\r\n{/* isa pang container para maayos ang margin */}\r\n          <Grid\r\n          container\r\n          marginY={2}\r\n          marginLeft={5}\r\n          marginRight={2}\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\">\r\n\r\n\r\n            <Grid container\r\n            margin={2}\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            style={{\r\n              width:800,\r\n              border: '2px solid black',\r\n              borderRadius: '8px',\r\n              backgroundColor: 'white'\r\n                 }}\r\n            >\r\n\r\n             {/* Upload Image */}\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  padding={2}\r\n                  spacing={2}\r\n                >\r\n\r\n                  <Grid item>\r\n\r\n                    {/* IMAGE */}\r\n                    <Avatar\r\n                      \r\n                      src={create.Product_image}\r\n                      sx={{ width: 200, height: 200 , border: '2px solid black'}}\r\n                      \r\n                     // marginBottom={2}\r\n                    />\r\n                  </Grid>\r\n         \r\n                  <Grid item>\r\n                      <CTextField  \r\n                      type='file' \r\n                      // value={create.Product_image}\r\n                      onChange={e=>{\r\n                        let fileReader = new FileReader();\r\n                        fileReader.readAsDataURL(e.target.files[0]);\r\n                      \r\n                        fileReader.onload = (event) => {\r\n                        \r\n                          setCreate({...create, Product_image: event.target.result})\r\n                           }\r\n                      }}\r\n                      \r\n\r\n\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <EditIcon/>\r\n    \r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      \r\n                      />\r\n                  </Grid>\r\n                </Grid>\r\n           \r\n\r\n\r\n\r\n          {/* Label Productname */}\r\n              <Grid container  item md={5} justifyContent=\"center\" margin={2}>\r\n                 <Typography \r\n                 variant='h5'\r\n                 >Product name</Typography>\r\n              </Grid>\r\n\r\n          {/* Input Productname*/}\r\n              <Grid item md={6} marginX={1}>\r\n\r\n              <CTextField \r\n                fullWidth \r\n                type='text' \r\n                placeholder='Input product name' \r\n                variant=\"outlined\" \r\n                margin=\"normal\"\r\n                value = {create.Product_name}\r\n                onChange = {e => setCreate({...create, Product_name: e.target.value})}\r\n                onClick={()=>setemail()}\r\n                />\r\n\r\n\r\n              </Grid>\r\n\r\n\r\n{/* ////////////////////////////////////////////////////////// */}\r\n\r\n  {/* Label Productname */}\r\n              <Grid container item md={5} justifyContent=\"center\" margin={2}>\r\n                 <Typography  variant='h5'>Product Category</Typography>\r\n              </Grid>\r\n\r\n  {/* Input Product Category */}\r\n              <Grid item md={6} marginX={1}>\r\n\r\n\r\n                <Autocomplete\r\n        \r\n                freeSolo\r\n                disablePortal\r\n                \r\n                options={Data}\r\n                value = {create.Product_category}\r\n                onChange = {(e, value) => setCreate({...create, Product_category: value})}\r\n \r\n                // onChange={(event, value) => setCategory(value)}\r\n                sx={{\r\n                  width: 400\r\n                }}\r\n                renderInput={\r\n                  (params) =>\r\n\r\n                  // Textfield\r\n                  <CTextField\r\n                  {...params}\r\n                   \r\n                  value = {create.Product_category}\r\n                  onChange = {e => setCreate({...create, Product_category: e.target.value})}\r\n   \r\n                  type='text' \r\n                  placeholder='Input product category'\r\n                  variant=\"outlined\" \r\n                  margin=\"normal\"/>} \r\n                  onClick={()=>setemail()}\r\n                  /> \r\n\r\n        \r\n              </Grid>\r\n\r\n{/* ////////////////////////////////////////////////////////// */}\r\n\r\n     \r\n          {/* Label Productstocks */}\r\n          <Grid container  item md={5} justifyContent=\"center\" margin={2}>\r\n                 <Typography  variant='h5'>Product Stocks</Typography>\r\n              </Grid>\r\n\r\n          {/* Input Productstocks*/}\r\n              <Grid item md={6} marginX={1}>\r\n                <CTextField \r\n                fullWidth \r\n                type='number' \r\n                placeholder='Input product stocks' \r\n                variant=\"outlined\" \r\n                margin=\"normal\"\r\n                value = {create.Product_stocks}\r\n                onChange = {e => setCreate({...create, Product_stocks: e.target.value})}\r\n                onClick={()=>setemail()}\r\n                />\r\n\r\n\r\n                \r\n              </Grid>\r\n\r\n\r\n\r\n{/* ////////////////////////////////////////////////////////// */}   \r\n\r\n      {/* Label Product price */}\r\n              <Grid container  item md={5} justifyContent=\"center\" margin={2}>\r\n                 <Typography  variant='h5'>Product Price</Typography>\r\n              </Grid>\r\n\r\n      {/* Input Product product*/}\r\n              <Grid item md={6} marginTop={1} marginBottom={2}>\r\n                <CTextField \r\n                fullWidth \r\n                type='number' \r\n                placeholder='Input product price' \r\n                variant=\"outlined\" \r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <p>Php</p>\r\n                   \r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                value = {create.Product_price}\r\n                onChange = {e => setCreate({...create, Product_price: e.target.value})}\r\n                onClick={()=>setemail()}\r\n                />\r\n                          </Grid>\r\n\r\n\r\n\r\n\r\n            </Grid>\r\n            \r\n\r\n\r\n                  </Grid>\r\n\r\n\r\n              \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <Grid item margin={1}>\r\n            \r\n            <Button\r\n            variant='contained'  \r\n            onClick={()=>{\r\n              setDialog(true)\r\n              setDisble(true)\r\n    \r\n             }}\r\n             disabled={disble}\r\n            style={{\r\n              borderRadius: '10px',\r\n              width:200,\r\n              marginBottom:10,\r\n              padding:10,\r\n           \r\n            }}> create </Button>\r\n\r\n          </Grid>\r\n\r\n          <Grid item margin={1}>\r\n            <Button \r\n            variant='contained'  \r\n            onClick={e=>{e.preventDefault(); nav(\"/Mainpage/Products\")}}\r\n            style={{\r\n            borderRadius: '10px',\r\n            width:200,\r\n            marginBottom:10,\r\n            padding:10,\r\n     \r\n          }}> cancel </Button>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Add_item\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",["201","202"],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Invoice.jsx",["203","204"],[],"// Library components\r\n\r\nimport { Grid, \r\n        InputAdornment,\r\n        Typography,\r\n        Fab,\r\n        IconButton,\r\n        Collapse,\r\n        Button,\r\n        FormControlLabel,\r\n        Alert,\r\n        RadioGroup,\r\n        Radio,\r\n        Tooltip,\r\n        Dialog,\r\n        DialogTitle,\r\n        DialogContent,\r\n        DialogContentText,\r\n        DialogActions,\r\n        ListItemText,\r\n\r\n} from '@mui/material'\r\nimport { CTextField } from '../products/Products' \r\n\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\n// Icons\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport moment from 'moment'\r\nimport ModeEditOutlineRoundedIcon from '@mui/icons-material/ModeEditOutlineRounded';\r\nimport DraftsOutlinedIcon from '@mui/icons-material/DraftsOutlined';\r\n\r\n// Routes\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n// Transfer data to edit data\r\nexport var dataT = {}\r\nexport var set_para_di_maedits = true\r\n\r\n\r\n\r\n\r\nconst Invoice = () => {\r\n// Navigation\r\nlet NavS = useNavigate();\r\n\r\n\r\n\r\n\r\n// Column header\r\nconst columns = [\r\n\r\n  // ID Column\r\n  { field: 'Customer_ID', \r\n    headerName: 'ID', \r\n    width: 70 ,\r\n    headerAlign: 'center',\r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n\r\n  // name Column\r\n  { field: 'Customer_name', \r\n    headerName: 'name', \r\n    width: 200,\r\n    headerClassName: 'super-app-theme--header',\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n  },\r\n\r\n\r\n\r\n  { field: 'Customer_email', \r\n    headerName: 'email', \r\n    width: 130,\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n      <div\r\n      style={{\r\n        color: \"black\",\r\n        fontSize: 18,\r\n        width: \"100%\",\r\n        textAlign: \"center\"\r\n        }}\r\n      >\r\n        {cellValues.value}\r\n        </div>\r\n        );\r\n    }\r\n  },\r\n\r\n  { field: 'Customer_cell', \r\n    headerName: 'Cellphone number', \r\n    width: 150,\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n\r\n\r\n{ field: 'Customer_date', \r\nheaderName: 'date', \r\nwidth: 150,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        color: \"black\",\r\n        fontSize: 18,\r\n        width: \"100%\",\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      {cellValues.value}\r\n    </div>\r\n  );\r\n}\r\n},\r\n\r\n{ field: 'Customer_total', \r\nheaderName: 'total payment', \r\nwidth: 130,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        color: \"black\",\r\n        fontSize: 18,\r\n        width: \"100%\",\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      {cellValues.value}\r\n    </div>\r\n  );\r\n}\r\n},\r\n\r\n{ field: 'Customer_payment', \r\nheaderName: 'status', \r\nwidth: 130,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        color: \"black\",\r\n        fontSize: 18,\r\n        width: \"100%\",\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      {cellValues.value}\r\n    </div>\r\n  );\r\n}\r\n},\r\n  \r\n// delete\r\n  {\r\n    field: 'action',\r\n    headerName: 'Delete',\r\n    width: 130,\r\n    headerAlign: 'center', \r\n    renderCell: () => {\r\n      return (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            // marginRight: '2'\r\n          }}\r\n        >\r\n         \r\n\r\n        <IconButton color=\"primary\" aria-label=\"delete\">\r\n            <DeleteOutlineOutlinedIcon/>\r\n        </IconButton>\r\n         \r\n        </div>\r\n\r\n\r\n      );\r\n    }\r\n  },\r\n  // edit\r\n  {\r\n    field: 'View',\r\n    headerName: 'View',\r\n    width: 130,\r\n    headerAlign: 'center', \r\n    renderCell: () => {\r\n      return (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            // marginRight: '2'\r\n          }}\r\n        >\r\n         \r\n\r\n        <IconButton color=\"primary\" aria-label=\"delete\">\r\n            <ModeEditOutlineRoundedIcon/>\r\n        </IconButton>\r\n         \r\n        </div>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n\r\n];\r\n//search data variable\r\nconst [search,setSearch] = useState(\"\")\r\n\r\n// Data \r\nconst [Data,set] = useState()\r\n\r\nconst [data, setData] = useState({\r\n  \"Customer_name\": \"\",\r\n  \"Customer_email\": \"\",\r\n  \"Customer_cell\": \"\",\r\n  \"Customer_address\": \"\",\r\n  \"Customer_purchase\": \"A,B,C,D\",\r\n  \"Customer_date\": \"\",\r\n  \"Customer_Quantity\": \"0,1,2,3\",\r\n  \"Customer_modepayment\": \"PAYMAYA\",\r\n  \"Customer_payment\":  \"Paid\"\r\n})\r\n\r\n// \r\nconst test = () =>{\r\n    \r\n  const Customer_purchase = data.Customer_purchase.split(',')\r\n  const Customer_Quantity = data.Customer_Quantity.split(',')\r\n\r\n\r\n\r\n  return [...Array(Customer_purchase.length)].map(\r\n    (_ , i) => ({\r\n      Customer_ID: parseInt(i),\r\n      Customer_purchase: Customer_purchase[i],\r\n      Customer_price: parseInt(i),\r\n      Customer_Quantity: Customer_Quantity[i],\r\n      Customer_total: parseInt(i)\r\n    }));\r\n\r\n\r\n\r\n}\r\n\r\n// Status\r\nconst [stat, setStat] = useState(\"Paid\")\r\n\r\n// const data_stat = Data.filter(person=>person.Customer_payment === stat )\r\n\r\n// Filtering data \r\nconst filtered = !search ? \r\nData \r\n: Data.filter((person) => \r\n    person.Customer_name.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n\r\n// Show success\r\nconst [show_success,setShow_success] = useState(false)\r\n\r\n// Show error\r\nconst [show_error,setShow_error] = useState()\r\n\r\n\r\n// Htttp get request\r\nuseEffect(() => {\r\n  axios.get('http://localhost/REACTJS/cognate1%20api/CustomerdataAPI.php')\r\n.then(res=>set(res.data.filter(person=>\r\n  \r\n    person.Customer_payment === stat \r\n  \r\n)))\r\n.catch(err=>console.log(err)) \r\n})\r\n\r\n\r\n// Succesful deleted\r\nconst [del_ID,setDel_ID] = useState()\r\n\r\nconst success_delete = e =>\r\n{\r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Delete_CustomerdataAPI.php\", { \"Customer_ID\": del_ID } )\r\n  .then(res => \r\n    {\r\n      setShow_success(res.data[0].Result)   \r\n      setConfirm_delete(false)\r\n    }\r\n\r\n    \r\n    )\r\n}\r\n\r\n\r\n\r\n  // Delete customerdata\r\nconst delete_customerdata = (param) => {\r\n  \r\n  switch(param.field) {\r\n    // delete\r\n    case 'action':\r\n      setDel_ID(parseInt(param.id))\r\n      setConfirm_delete(true)\r\n    break;\r\n\r\n    // edit data\r\n    case 'View':\r\n        edit_customerdata(param)\r\n        NavS(\"/Mainpage/Invoice/EditData\")  \r\n    break;\r\n// view data\r\n    default:\r\n      view_data(param)\r\n      setView_data_(true)\r\n   \r\n  }\r\n\r\n}\r\n\r\n// view data\r\nconst view_data = (param) =>{\r\n  setData(\r\n    {\r\n      Customer_ID : param.id,\r\n  // Customer name\r\n      Customer_name: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_name)),\r\n  \r\n  // Customer email\r\n      Customer_email: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_email)),\r\n  \r\n  // Customer cell\r\n      Customer_cell: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_cell)),\r\n  \r\n  // Customer address\r\n      Customer_address: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_address)),\r\n  \r\n  // Customer purchase\r\n      Customer_purchase: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_purchase)),\r\n  \r\n  // Customer date\r\n      Customer_date: Date(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_date)),\r\n  \r\n  // Customer total\r\n      Customer_total: parseInt(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_total)),\r\n  \r\n  // Customer quantity\r\n      Customer_Quantity: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_Quantity)),\r\n  \r\n  // Customer modeofpayment\r\n      Customer_modepayment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_modepayment)),\r\n  \r\n  // Customer payment\r\n      Customer_payment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n      .map(ge=>ge.Customer_payment)),\r\n    }\r\n  \r\n  )\r\n}\r\n\r\n // Edit customerdata\r\nconst edit_customerdata = (param) => {\r\n  dataT = {\r\n    Customer_ID : param.id,\r\n// Customer name\r\n    Customer_name: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_name)),\r\n\r\n// Customer email\r\n    Customer_email: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_email)),\r\n\r\n// Customer cell\r\n    Customer_cell: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_cell)),\r\n\r\n// Customer address\r\n    Customer_address: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_address)),\r\n\r\n// Customer purchase\r\n    Customer_purchase: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_purchase)),\r\n\r\n// Customer date\r\n    Customer_date: filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_date),\r\n\r\n// Customer total\r\n    Customer_total: parseInt(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_total)),\r\n\r\n// Customer quantity\r\n    Customer_Quantity: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_Quantity)),\r\n\r\n// Customer modeofpayment\r\n    Customer_modepayment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_modepayment)),\r\n\r\n// Customer payment\r\n    Customer_payment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n    .map(ge=>ge.Customer_payment)),\r\n  }\r\n  set_para_di_maedits = true\r\n\r\n}\r\n\r\nconst [confirm_delete, setConfirm_delete] = useState(false)\r\nconst [view_data_, setView_data_] = useState(false)\r\n  return (\r\n    <div>\r\n{/* Alert Successful delete */}\r\n      <Collapse in={show_success}>\r\n          <Alert severity=\"success\"\r\n          onClose={()=>{\r\n            \r\n            setShow_success(false) \r\n          }}\r\n          >\r\n            data succesful deleted\r\n          </Alert>\r\n        </Collapse>\r\n\r\n\r\n      {/* Whole Container */}\r\n        <Grid container>\r\n\r\n{/* Confirm Delete Dialog */}\r\n        <Dialog\r\n        open={confirm_delete}\r\n      >\r\n        <DialogTitle>\r\n          {\"High Resolution\"}\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>\r\n              are you sure you want delete this forever ?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n\r\n          <Button onClick={success_delete} autoFocus>\r\n            Yes\r\n          </Button>\r\n\r\n          <Button onClick={e=>setConfirm_delete(false)} >No</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n {/* View Message Dialog */}\r\n  \r\n <Dialog\r\n  open={view_data_}\r\n  >\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle >\r\n                    <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                padding={2}\r\n                >\r\n        <Typography variant='h5'>\r\n            High Resolution\r\n        </Typography>\r\n        </Grid>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n         {/* Customer name */}\r\n         <Typography  variant='h6' marginTop={2} fontSize={15}>\r\n           Name: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_name}\r\n         </Typography>\r\n\r\n          {/* Customer email */}\r\n          <Typography type='email' variant='h6' marginTop={2} fontSize={15}>\r\n           Email: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_email}\r\n         </Typography>\r\n\r\n          {/* Customer cell number */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Contact number: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_cell}\r\n         </Typography>\r\n\r\n          {/* Customer Address */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Address: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_address}\r\n         </Typography>\r\n\r\n          {/* Customer Date purchase */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Date of purchase: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {moment(data.Customer_date,\"mm-dd-yyyy\").format().split('T')[0]}\r\n         </Typography>\r\n\r\n          <Grid container spacing={2}>\r\n\r\n            <Grid item>\r\n              {/* Payment Status */}\r\n              <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                Payment Status: \r\n              </Typography>\r\n              <Typography variant='h6' fontSize={18}>\r\n                {data.Customer_payment}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              {/* Payment Status */}\r\n              <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                Mode of Payment: \r\n              </Typography>\r\n              <Typography variant='h6' fontSize={18}>\r\n                {data.Customer_modepayment}\r\n              </Typography>\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n          \r\n          <Grid container spacing={2}>\r\n\r\n              <Grid item>\r\n                <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                >\r\n                                 \r\n                  <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                    Purchase list:\r\n                  </Typography>\r\n                  {test().map((e,i)=>\r\n                  <ListItemText key={i}>\r\n                      {e.Customer_purchase}\r\n                  </ListItemText>)} \r\n                </Grid>\r\n\r\n              </Grid>\r\n\r\n              <Grid item>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                >\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Quantity:\r\n                </Typography>\r\n                {test().map((e,i)=>\r\n                <ListItemText key={i}>\r\n                    {e.Customer_Quantity}\r\n                </ListItemText>)} \r\n                </Grid>\r\n              </Grid>\r\n\r\n              \r\n            </Grid>\r\n          {/* Customer Address */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Total of Payment: \r\n         </Typography>\r\n\r\n         <Typography variant='h6' fontSize={18}>\r\n           {parseInt(data.Customer_total).toLocaleString(undefined, {maximumFractionDigits: 2})}\r\n         </Typography>\r\n\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button \r\n         onClick={()=>{\r\n          setView_data_(false)\r\n         }}\r\n             >\r\n                    CLOSE\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n        {/* Invoice */}\r\n        <Grid  item xs={12} md={10}>\r\n                <Typography variant='h3' marginY={2} marginLeft={2}> Invoice</Typography>\r\n            </Grid>\r\n        \r\n{/* Search bar container */}\r\n          <Grid item md={10} xs={12}>\r\n\r\n          \r\n\r\n            {/* Para may padding */}\r\n           <Grid \r\n           container \r\n           padding={3}\r\n           direction=\"row\"\r\n           justifyContent=\"center\"\r\n           alignItems=\"flex-start\">\r\n\r\n             {/* Search bar */}\r\n              <CTextField \r\n              variant='standard' \r\n              fullWidth \r\n              placeholder='Searchbar'\r\n              value={search}\r\n              onChange={e=>setSearch(e.target.value)}\r\n              disabled={Data ? false : true}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n    \r\n                    <SearchOutlinedIcon fontSize='large' />\r\n                 \r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              />\r\n\r\n          \r\n           </Grid>\r\n         \r\n    \r\n          </Grid>\r\n\r\n {/* add button */}\r\n          <Grid item md={1} xs={7} padding={3}>\r\n\r\n              <Tooltip title=\"Add data\">\r\n\r\n              {/* Button add */}\r\n                <Fab \r\n                color=\"primary\" \r\n                aria-label=\"add\" \r\n                // variant='extended'\r\n                onClick={e=>NavS(\"/Mainpage/Invoice/AddData\")} \r\n                >\r\n                  <AddIcon />\r\n                  {/* Add Item */}\r\n                </Fab>\r\n              </Tooltip>\r\n          </Grid>\r\n\r\n\r\n {/* Show draft button */}\r\n          <Grid item md={1} xs={7} padding={3}>\r\n\r\n              <Tooltip title=\"Draft list\">\r\n\r\n              {/* Button add */}\r\n                <Fab \r\n                color=\"primary\" \r\n                aria-label=\"add\" \r\n                onClick={e=>NavS(\"/Mainpage/Invoice/DraftList\")} \r\n                // variant='extended'\r\n                >\r\n                  <DraftsOutlinedIcon />\r\n                  {/* Draft List */}\r\n                </Fab>\r\n              </Tooltip>\r\n          </Grid>\r\n\r\n{/* Status */}\r\n          <Grid item md={12}>\r\n              {/* Container para may padding */}\r\n            <Grid \r\n            container \r\n            paddingLeft={5}\r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"center\">\r\n\r\n              {/* Radio Button for payment status */}\r\n              <RadioGroup\r\n              row\r\n              value={stat}\r\n              onChange={e => {\r\n                setStat(e.target.value)\r\n              }}\r\n              \r\n            >\r\n              <FormControlLabel  disabled={Data ? false : true} value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n              <FormControlLabel  disabled={Data ? false : true} value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n            </RadioGroup>\r\n\r\n\r\n            </Grid>\r\n          </Grid>\r\n\r\n              \r\n\r\n          {/* Container for table */}\r\n          <Grid item md={12}>\r\n                      \r\n\r\n            {/* Para may padding */}\r\n            <Grid \r\n            container             \r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            padding={5}>\r\n\r\n\r\n<Typography variant='h6'>\r\n  Click the row to view data\r\n</Typography>\r\n              {/* pang size at background color */}\r\n              <Grid \r\n              container\r\n              style={{\r\n                height:550 ,\r\n                width:'100%',\r\n                backgroundColor: 'White',\r\n                border:'2px solid black',\r\n                borderRadius: 3               \r\n              }}\r\n              >\r\n\r\n\r\n                {/* Data table */}\r\n                <DataGrid\r\n                columns={columns}\r\n                getRowId={(rows)=> rows.Customer_ID}\r\n                rows={filtered} // data na pinasok yung data \r\n                  \r\n                pageSize={10}\r\n                //delete_customerdata\r\n                onCellClick={delete_customerdata}\r\n                />\r\n              </Grid>\r\n \r\n          \r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n \r\n        </Grid>\r\n\r\n  \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Invoice","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Edit_draft.jsx",["205","206","207"],[],"import { \r\n    Fab, \r\n    Grid , \r\n    Typography, \r\n    Box, \r\n    Button, \r\n    FormControlLabel, \r\n    Alert, \r\n    Collapse, \r\n    Radio, \r\n    RadioGroup, \r\n    Select, \r\n    Chip, \r\n    MenuItem, \r\n    ListItemText,\r\n  } from '@mui/material'\r\n  import Dialog from '@mui/material/Dialog';\r\n  import DialogActions from '@mui/material/DialogActions';\r\n  import DialogContent from '@mui/material/DialogContent';\r\n  import DialogTitle from '@mui/material/DialogTitle';\r\n  import React, { useEffect, useState } from 'react'\r\n  import { useNavigate } from 'react-router-dom';\r\n  import { CcTextField } from '../Stocks';\r\n  import AdapterDateFns from '@mui/lab/AdapterDateFns';\r\n  import LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n  import MobileDatePicker from '@mui/lab/MobileDatePicker'\r\n  import moment from 'moment'\r\n  \r\n  \r\n  // ICONS\r\n  import ClearIcon from '@mui/icons-material/Clear';\r\n  import AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\r\n  import SaveAltOutlinedIcon from '@mui/icons-material/SaveAltOutlined';\r\n  import DraftsOutlinedIcon from '@mui/icons-material/DraftsOutlined';\r\n  import KeyboardBackspaceOutlinedIcon from '@mui/icons-material/KeyboardBackspaceOutlined';\r\n  \r\n  import { dataT , set_para_di_maedits } from './Show_draft'\r\n  \r\n  import axios from 'axios';\r\n\r\n\r\n\r\nvar para_de_maedit = set_para_di_maedits\r\n  \r\n  const Edit_draft = () => {\r\n  // Routes\r\n    let NavS = useNavigate();\r\n  const [not_edit,setNot_edit] = useState(set_para_di_maedits)\r\n  \r\n\r\n  // Date ITO\r\n  const [value,setValue] = useState(\r\n    new Date()\r\n  )\r\n    //JSON\r\n    const [data, setData] = useState(\r\n        {\r\n        \"Customer_ID\" : 0,\r\n        \"Customer_name\": \"\",\r\n        \"Customer_email\": \"\",\r\n        \"Customer_cell\": \"\",\r\n        \"Customer_address\": \"\",\r\n        \"Customer_purchase\": \"\", //ito0\r\n        \"Customer_date\": \"\",\r\n        \"Customer_total\": 9,\r\n        \"Customer_Quantity\": \"\", //ito0\r\n        \"Customer_modepayment\": \"\",\r\n        \"Customer_payment\": \"\"\r\n        },)\r\n    // Mode of payment\r\n    const [ModeP, setModeP] = React.useState('COD');\r\n    \r\n  // Show success\r\n  const [show_success,setShow_success] = useState()\r\n  \r\n  // Show error\r\n  const [show_error,setShow_error] = useState(true)\r\n  \r\n  // Show error show\r\n  const [show_err,setShow_err] = useState()\r\n  \r\n  // Product purchase\r\n  const [selectname, setSelectname] = useState(\"Select Product\")\r\n  \r\n  // Message if data exist\r\n  const [Msg,setMsg] = useState(\"\")\r\n\r\n  \r\n  const [email, setEmail]= useState(true)\r\n\r\n  const verify_email = e =>{\r\n  \r\n    e.preventDefault()\r\n    \r\n    axios.post('http://localhost:3001/sendingEmail',{\r\n      \"Email\" : data.Customer_email,\r\n      \"Message\" : String(test.map(e=>e.Customer_purchase)),\r\n      \"Name\" : data.Customer_name,\r\n      \"Date\" : moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Total\" : parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Mode\" : String(ModeP),\r\n      \"Status\" : data.Customer_payment\r\n    }) \r\n    .then(\r\n      res => \r\n      {\r\n        setEmail(res.data.Return)\r\n        console.log(res.data)\r\n      }\r\n    )\r\n  \r\n  }\r\n  \r\n\r\n  // Move to customer data\r\n  const edit_customerdata = e => {\r\n    e.preventDefault()  \r\n     \r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Delete_customer_save_to_CustomerdataAPI.php\", {\r\n      \"Customer_ID\": data.Customer_ID,\r\n      \"Customer_name\": data.Customer_name,\r\n      \"Customer_email\": data.Customer_email,\r\n      \"Customer_cell\": data.Customer_cell,\r\n      \"Customer_address\": data.Customer_address,\r\n      \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n      \"Customer_date\": moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n      \"Customer_modepayment\": String(ModeP),\r\n      \"Customer_payment\":  data.Customer_payment\r\n    })\r\n    .then(res => \r\n      {\r\n        setShow_success(res.data[0].Result)\r\n        setShow_error(res.data[0].Result)\r\n        setShow_err(res.data[0].Result)\r\n        setMsg(res.data[0].Message)\r\n        console.log(res.data)\r\n        setOpenDialog(false)\r\n      })\r\n      setDisble(true)\r\n  \r\n    }\r\n  \r\n    const date_ito = new Date(value)\r\n\r\n// save edited to draft\r\n  const edit_customerdatadraft = e => {\r\n  \r\n    e.preventDefault()  \r\n  \r\n    \r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Update_customerdraftAPI.php\", {\r\n      \"Customer_ID\": data.Customer_ID,\r\n      \"Customer_name\": data.Customer_name,\r\n      \"Customer_email\": data.Customer_email,\r\n      \"Customer_cell\": data.Customer_cell,\r\n      \"Customer_address\": data.Customer_address,\r\n      \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n      \"Customer_date\": moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n      \"Customer_modepayment\": String(ModeP),\r\n      \"Customer_payment\":  data.Customer_payment\r\n    })\r\n    .then(res => \r\n      {\r\n        setShow_success(res.data[0].Result)\r\n        setShow_error(res.data[0].Result)\r\n        setShow_err(res.data[0].Result)\r\n        setMsg(res.data[0].Message)\r\n        console.log(res.data)\r\n        setOpenDialog(false)\r\n      })\r\n      setDisble(true)\r\n  \r\n    }\r\n  \r\n  // Data product\r\n  const [dataproduct,setDataproduct] = useState([])\r\n    \r\n  \r\n\r\n  // fetch name \r\n  useEffect(() => {\r\n  \r\n  let isApiSubscribed = true\r\n  \r\n  \r\n   axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n   .then(res=>{\r\n     \r\n    if (isApiSubscribed)\r\n    {\r\n\r\n      setDataproduct(res.data)\r\n      if (not_edit === true)\r\n      {\r\n\r\n        setValue(dataT.Customer_date)\r\n        setModeP(dataT.Customer_modepayment)\r\n        setData(dataT)\r\n        setTest(breaking(dataT))\r\n        setNot_edit(false)\r\n      }\r\n\r\n\r\n     \r\n    }\r\n   \r\n     \r\n    })\r\n  \r\n   return () => {\r\n    // cancel the subscription\r\n    isApiSubscribed = false\r\n  };\r\n  \r\n  })\r\n\r\n  // Data purchase\r\n  const [test,setTest] = useState([\r\n        {\r\n          \"Customer_ID\": 0,\r\n          \"Customer_purchase\": \"Select product\",\r\n          \"Customer_price\": \"\",\r\n          \"Customer_Quantity\": 0,\r\n          \"Customer_total\": \"\",\r\n        }\r\n  ])\r\n  \r\n\r\n\r\n  const breaking = (e) =>{\r\n    \r\n    const Customer_purchase = e.Customer_purchase.split(',')\r\n    const Customer_Quantity = e.Customer_Quantity.split(',')\r\n\r\n\r\n\r\n    return [...Array(Customer_purchase.length)].map(\r\n      (_ , i) => ({\r\n        Customer_ID: parseInt(i),\r\n        Customer_purchase: Customer_purchase[i],\r\n        Customer_price: parseInt(i),\r\n        Customer_Quantity: Customer_Quantity[i],\r\n        Customer_total: parseInt(i)\r\n      }));\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  const [openDialog,setOpenDialog] = useState(false)\r\n  \r\n  const [disble,setDisble] = useState(false)\r\n  \r\n    return ( \r\n    <div>\r\n  \r\n    {/* Message Dialog */}\r\n    \r\n  <Dialog\r\n    open={openDialog}\r\n    >\r\n  \r\n  {/* Dialog Tittle */}\r\n        <DialogTitle >\r\n                      <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  padding={2}\r\n                  >\r\n          <Typography variant='h5'>\r\n              High Resolution\r\n          </Typography>\r\n          </Grid>\r\n        </DialogTitle>\r\n  \r\n  {/* Dialog Content */}\r\n        <DialogContent>\r\n  \r\n          <Typography variant='body1'>\r\n           Please review of the following before save edited data\r\n          </Typography>\r\n  \r\n      {/* Confirm Textbox */}\r\n  \r\n  \r\n           {/* Customer name */}\r\n           <Typography  variant='h6' marginTop={2} fontSize={15}>\r\n             Name: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_name}\r\n           </Typography>\r\n  \r\n            {/* Customer email */}\r\n            <Typography type='email' variant='h6' marginTop={2} fontSize={15}>\r\n             Email: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_email}\r\n           </Typography>\r\n  \r\n            {/* Customer cell number */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Contact number: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_cell}\r\n           </Typography>\r\n  \r\n            {/* Customer Address */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Address: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_address}\r\n           </Typography>\r\n  \r\n            {/* Customer Date purchase */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Date of purchase: \r\n           </Typography>\r\n           {/* Date */}\r\n           <Typography variant='h6' fontSize={18}>\r\n             { \r\n             moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0]}\r\n           </Typography>\r\n  \r\n            <Grid container spacing={2}>\r\n  \r\n              <Grid item>\r\n                {/* Payment Status */}\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Payment Status: \r\n                </Typography>\r\n                <Typography variant='h6' fontSize={18}>\r\n                  {data.Customer_payment}\r\n                </Typography>\r\n              </Grid>\r\n  \r\n              <Grid item>\r\n                {/* Payment Status */}\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Mode of Payment: \r\n                </Typography>\r\n                <Typography variant='h6' fontSize={18}>\r\n                  {ModeP}\r\n                </Typography>\r\n              </Grid>\r\n  \r\n            </Grid>\r\n  \r\n            \r\n            <Grid container spacing={2}>\r\n  \r\n                <Grid item>\r\n                  <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  >\r\n                                   \r\n                    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                      Purchase list:\r\n                    </Typography>\r\n                    {test.map(e=>\r\n                    <ListItemText key={e.Customer_ID}>\r\n                        {e.Customer_purchase}\r\n                    </ListItemText>)} \r\n                  </Grid>\r\n  \r\n                </Grid>\r\n  \r\n                <Grid item>\r\n  \r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  >\r\n                  <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                    Quantity:\r\n                  </Typography>\r\n                  {test.map(e=>\r\n                  <ListItemText key={e.Customer_ID}>\r\n                      {e.Customer_Quantity}\r\n                  </ListItemText>)} \r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n                   <Alert severity=\"warning\"\r\n         >\r\n           Please check your email account if the email was sent\r\n         </Alert>\r\n        </DialogContent>\r\n  \r\n        <DialogActions>\r\n\r\n      {/* Send email  */}\r\n      <Button \r\n        onClick={verify_email} \r\n        disabled={!email}\r\n          autoFocus\r\n          helperText=\"\"\r\n           >Send email</Button>\r\n\r\n            <Button \r\n            onClick={edit_customerdata} \r\n            variant='contained'\r\n            disabled ={email} >Okay</Button>\r\n  \r\n            <Button \r\n           onClick={()=>{\r\n            setOpenDialog(false)\r\n            setEmail(true)\r\n           }}\r\n               >\r\n                      Cancel\r\n                  </Button>\r\n        </DialogActions>\r\n  \r\n      </Dialog>\r\n   \r\n  {/* // Whole Container */}\r\n           {/* Alert Success */}\r\n           <Collapse in={show_success}>\r\n           <Alert severity=\"success\"\r\n           onClose={()=>{\r\n             \r\n             setShow_success(false)\r\n             NavS(\"/Mainpage/Invoice/DraftList\") \r\n             setData({\r\n  \r\n              Customer_name: \"\",\r\n              Customer_email: \"\",\r\n              Customer_cell: \"\",\r\n              Customer_address: \"\",\r\n              Customer_purchase: [\"\"],\r\n              Customer_date: new Date(),\r\n              Customer_total: 0,\r\n              Customer_payment:  \"Paid\"\r\n  \r\n  \r\n             })\r\n             setSelectname([])\r\n             setDisble(false)\r\n           }}\r\n           >\r\n             Data has been updated\r\n           </Alert>\r\n         </Collapse>\r\n  \r\n  {/* Alert Error */}\r\n  <Collapse fullWidth in={show_err ? false : true}>\r\n           <Alert severity=\"error\"\r\n           onClose={()=>{\r\n             \r\n             setShow_err(true) \r\n             setShow_error(true)\r\n             setDisble(false)\r\n           }}\r\n           >\r\n             ATTENTION! textfield should not be empty!\r\n           </Alert>\r\n         </Collapse>\r\n  \r\n      <Grid container padding={6} paddingTop={2} >\r\n      \r\n  \r\n  \r\n      \r\n  \r\n  {/* Container para sa button paar may padding */}\r\n        <Grid container padding={2}>\r\n  \r\n                 \r\n          {/* Button cancel */}\r\n          <Fab \r\n          color=\"primary\"  \r\n          aria-label=\"add\" \r\n          onClick={e=>NavS(\"/Mainpage/Invoice\")} \r\n          >\r\n            <ClearIcon />\r\n           \r\n          </Fab>\r\n          <Typography variant='h3'  marginLeft={2}> Edit draft</Typography>\r\n\r\n        </Grid>\r\n  \r\n  {/* Container for all components */}\r\n        <Grid \r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-start\" \r\n        style={{\r\n          backgroundColor:\"white\",\r\n          border:\"2px solid black\",\r\n          borderRadius: 5\r\n        }}\r\n        onClick={e=>\r\n          {\r\n            setData({...data,Customer_purchase: selectname.toString()})\r\n          }\r\n        }\r\n       >\r\n  \r\n  {/* Name textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Name' type='text' fullWidth\r\n              value={data.Customer_name}\r\n              onChange={e=>{\r\n                setData({...data, Customer_name: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              helperText={Msg ? Msg : null}\r\n              onClick={()=>\r\n                {\r\n                  setShow_error(true)\r\n                  setMsg(null)\r\n                }\r\n                \r\n              }\r\n              />\r\n          </Grid>\r\n  \r\n  {/* Email textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Email Address' type='Email' fullWidth\r\n              value={data.Customer_email}\r\n              onChange={e=>{\r\n                setData({...data, Customer_email: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid>   \r\n  \r\n  {/* Contact textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Contact Number' type='text' fullWidth\r\n              value={data.Customer_cell}\r\n              onChange={e=>{\r\n                setData({...data, Customer_cell: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid>\r\n  \r\n  {/* Address textfield */}\r\n          <Grid item md={12} padding={2}>\r\n              <CcTextField multiline label='Address' type='text' fullWidth\r\n              value={data.Customer_address}\r\n              onChange={e=>{\r\n                setData({...data, Customer_address: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid> \r\n  \r\n          <Grid \r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"center\">\r\n  \r\n          \r\n    {/* Date textfield */}\r\n          <Grid item md={2} padding={2}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                  <MobileDatePicker\r\n                  error={show_error? false : true}\r\n                  inputFormat=\"MM/dd/yyyy\"\r\n                  value={value}\r\n                  onChange={(newValue) => setValue(newValue) }\r\n                  renderInput={(params) => <CcTextField  {...params} \r\n                  onClick={()=>{\r\n                    setShow_error(true)\r\n                  }}\r\n                  />}\r\n            \r\n                  />\r\n  \r\n                  </LocalizationProvider>\r\n  \r\n          \r\n          </Grid> \r\n  \r\n  \r\n    {/* Mode of payment */}\r\n          <Grid item md={3} padding={2}>\r\n          \r\n          <Select\r\n            error={show_error? false : true}\r\n            onClick={()=>{\r\n              setShow_error(true)\r\n            }}\r\n            size='small'\r\n            fullWidth\r\n            value={ModeP}\r\n           \r\n            onChange={e=>setModeP(e.target.value)}\r\n  \r\n            renderValue ={() => (\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                <Chip label={ModeP} color='primary'/>\r\n              </Box>\r\n              )}\r\n          >\r\n            <MenuItem value=\"COD\">\r\n              <ListItemText>\r\n                COD\r\n              </ListItemText>\r\n            </MenuItem>\r\n            <MenuItem value=\"PAYMAYA\">\r\n              <ListItemText>\r\n              PAYMAYA\r\n              </ListItemText>\r\n            </MenuItem>\r\n            <MenuItem value=\"GCASH\">            \r\n              <ListItemText>\r\n              GCASH\r\n              </ListItemText>\r\n            </MenuItem>\r\n          </Select>\r\n  \r\n          </Grid>\r\n  \r\n  \r\n    {/* Radio Button for payment status */}\r\n          <Grid item md={3} padding={2}>\r\n          \r\n              <RadioGroup\r\n                row\r\n                value={data.Customer_payment}\r\n                onChange={e => {\r\n                setData({...data,Customer_payment: e.target.value })\r\n                }}\r\n              >\r\n                <FormControlLabel  value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n                <FormControlLabel value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n              </RadioGroup>\r\n  \r\n          </Grid>\r\n  \r\n          </Grid>\r\n  \r\n  \r\n  \r\n  {/* Customer item purchase detail */}\r\n          <Grid item md={12} padding={4}>\r\n  \r\n  \r\n  \r\n            <Grid \r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"center\" \r\n            style={{\r\n              border: \"2px solid #9B3C21\",\r\n              borderRadius:'10px'\r\n            }} \r\n            paddingBottom={2}\r\n            spacing={2}>\r\n  \r\n  \r\n  \r\n  {/* Add purchase row */}\r\n              <Grid item md={12}>\r\n               \r\n                <Fab \r\n                  color='primary'\r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  size='large'\r\n                  onClick={e=>{\r\n                    e.preventDefault()\r\n  \r\n                \r\n                    test.length ?\r\n                    setTest([\r\n                      ...test, {\r\n                        \"Customer_ID\": parseInt(test[test.length - 1].Customer_ID) + 1,\r\n                        \"Customer_purchase\": \"Select product\",\r\n                        \"Customer_Quantity\": 0,\r\n                        \"Customer_total\": 0,  \r\n                      }\r\n                    ]) : \r\n                    setTest([\r\n                      ...test, {\r\n                        \"Customer_ID\": 0,\r\n                        \"Customer_purchase\": \"Select product\",\r\n                        \"Customer_Quantity\": 0,\r\n                        \"Customer_total\": 0,  \r\n                      }\r\n                    ])\r\n                   \r\n                  }} \r\n                  \r\n                  >\r\n                  <AddShoppingCartOutlinedIcon fontSize='medium'/>      \r\n                   <span>Add purchase details</span>\r\n                </Fab>\r\n              </Grid>\r\n  \r\n  \r\n          {/* List pf product purchase detail */}\r\n              {test.map((index)=>(\r\n  \r\n                <Grid  key={index.Customer_ID} padding={2} spacing={2} \r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"flex-start\"\r\n                alignItems=\"center\">\r\n  \r\n  {/* Customer purchase */ }\r\n                  <Grid item md={4}>\r\n                                     \r\n                    <Select\r\n                      value={index.Customer_purchase}\r\n                      fullWidth\r\n                      onClick={e=>{\r\n                        e.preventDefault()\r\n                      }}\r\n                      onChange={e=>{\r\n                        const list = [...test]\r\n                        list[index.Customer_ID][\"Customer_purchase\"] = e.target.value\r\n                        list[index.Customer_ID][\"Customer_Quantity\"] = 1\r\n                        console.log(list)\r\n                      setTest(list)\r\n                      }}\r\n                      renderValue ={() => (\r\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                          <Chip label={index.Customer_purchase} color='primary'/>\r\n                        </Box>\r\n                        )}                      \r\n                      >\r\n                        <MenuItem value=\"Select product\"></MenuItem>\r\n                      {dataproduct.map((name) => (\r\n                        <MenuItem key={name.Product_ID} value={name.Product_name}>\r\n                          <ListItemText primary={name.Product_name} />\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>                     \r\n                  </Grid>\r\n  \r\n  {/* Quantity */}\r\n                  <Grid item md={2}>\r\n               \r\n                    <CcTextField label=\"Quantity\" fullWidth\r\n                      value={index.Customer_Quantity}\r\n                      onChange={\r\n                        e=>{\r\n                          const list = [...test]\r\n                          list[index.Customer_ID][\"Customer_Quantity\"] = e.target.value\r\n                          setTest(list)\r\n                        }\r\n                      }\r\n                  />\r\n                  </Grid>\r\n  \r\n  {/*  Price */}\r\n                  <Grid item md={2}>\r\n                  \r\n                    <CcTextField label=\"Price\" fullWidth\r\n                    value={\r\n                      dataproduct.filter(e=> e.Product_name === index.Customer_purchase)\r\n                      .map(e=>e.Product_price)\r\n                      .toLocaleString(undefined, { maximumFractionDigits: 2})\r\n                      \r\n                    }\r\n  \r\n                  />\r\n                  </Grid>   \r\n  \r\n  \r\n  {/* Total price */}\r\n                  <Grid item md={2}>\r\n               \r\n                    <CcTextField label=\"Total price\" fullWidth\r\n                    value={\r\n                      // Multiplication\r\n                      index.Customer_total = \r\n                      index.Customer_Quantity \r\n                      * \r\n                      dataproduct.filter(e => \r\n                        e.Product_name \r\n                        === index.Customer_purchase)\r\n                      .map(e=>e.Product_price)\r\n                  }\r\n                  />\r\n                  </Grid>\r\n  \r\n  \r\n  {/* Button remove */} \r\n                  <Grid item md={2} >\r\n                    <Fab \r\n                    \r\n                    value={ index.Customer_ID}\r\n                    color=\"primary\"  \r\n                    aria-label=\"add\" \r\n                    onClick={e=> \r\n                      {\r\n                        \r\n                        // setIsApiSubscribed(false)\r\n                        const list = [...test]\r\n                          const index = list.map(e=>e.Customer_ID).indexOf(parseInt(e.currentTarget.value))\r\n                          list.splice(index,1)\r\n  \r\n                          // console.log(list)\r\n                           setTest(list)\r\n                        \r\n  \r\n                        \r\n                      }\r\n                  \r\n                    }\r\n                    size='small'\r\n                    >\r\n                      <ClearIcon />\r\n           \r\n                    </Fab>\r\n              </Grid>                \r\n  \r\n                </Grid>\r\n              )\r\n              )}\r\n  \r\n  \r\n            <Grid padding={2}>\r\n              <Typography variant='h6'>\r\n                Total payment: \r\n              </Typography>\r\n                \r\n              <CcTextField value={\r\n                test.reduce((a,b)=> a = a + b.Customer_total,0)\r\n                .toLocaleString(undefined, {maximumFractionDigits: 2})\r\n                }/>\r\n  \r\n              \r\n  \r\n            </Grid>\r\n  \r\n  {/* Button Conatainer  */} \r\n            <Grid container padding={2} spacing={1} >\r\n  \r\n  {/* Button create  */} \r\n              <Grid item md={3} >\r\n                <Fab   \r\n                             \r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  onClick={e=>setOpenDialog(true)}\r\n                  >\r\n                    <SaveAltOutlinedIcon fontSize='medium' />\r\n                    <Typography marginLeft={1} variant='p'>Save to Invoice</Typography>\r\n           \r\n                </Fab>\r\n              </Grid> \r\n  \r\n  {/* Button save as draft */} \r\n              <Grid item md={3} >\r\n                <Fab        \r\n             \r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  onClick={edit_customerdatadraft}\r\n                  >\r\n                    <DraftsOutlinedIcon fontSize='medium' />\r\n                    <Typography marginLeft={1} variant='p'>Save edited</Typography>\r\n           \r\n                </Fab>\r\n              </Grid>    \r\n  \r\n            </Grid>           \r\n              \r\n            </Grid>\r\n  \r\n      \r\n         \r\n          </Grid>\r\n  \r\n  \r\n  \r\n        </Grid>\r\n  \r\n      </Grid>\r\n      </div>\r\n  )\r\n  }\r\n  \r\n  export default Edit_draft","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Add_data.jsx",["208"],[],"import { \r\n  Fab, \r\n  Grid , \r\n  Typography, \r\n  Box, \r\n  Button, \r\n  FormControlLabel, \r\n  Alert, \r\n  Collapse, \r\n  Radio, \r\n  RadioGroup, \r\n  Select, \r\n  Chip, \r\n  MenuItem, \r\n  ListItemText,\r\n} from '@mui/material'\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CcTextField } from '../Stocks';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport MobileDatePicker from '@mui/lab/MobileDatePicker'\r\nimport moment from 'moment'\r\n\r\n\r\n// ICONS\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\r\nimport SaveAltOutlinedIcon from '@mui/icons-material/SaveAltOutlined';\r\nimport DraftsOutlinedIcon from '@mui/icons-material/DraftsOutlined';\r\n\r\n// Logo\r\nimport LOGO  from '../../../pages/LOGO.png'\r\n\r\nimport axios from 'axios';\r\n\r\n// PDF\r\nimport jsPDF from 'jspdf'\r\n\r\n// 1/3addImage(imageData: string | HTMLImageElement | HTMLCanvasElement | Uint8Array | RGBAData, \r\n///format: string, x: number, y: number, w: number, h: number, alias?: string, compression?: \r\n//ImageCompression, rotation?: number)\r\n\r\n// \r\n\r\nconst yText = 250\r\nconst Item_yText = 380\r\nexport const generatePDF = () => {\r\n  var doc = new jsPDF('p','pt','letter');\r\n  // doct.text(x,y, 'text')\r\n\r\n  // doct.addImage('Img url', x,y, W, H)\r\n\r\n  doc.addImage(LOGO,150,30, 300,180)\r\n  doc.addFont('Calibri Light (Headings)', 'normal')\r\n  doc.text(30, yText, 'Customer Name: Art Lisboa')   \r\n  doc.text(450, yText, 'Date: 2022-22-22')\r\n  doc.text(30, yText + 20, 'Date of Purchase: 2022-22-22') \r\n  doc.text(30, yText + 40, 'Payment Status: PAID')\r\n  doc.text(30, yText + 60, 'Mode of Payment: GCASH')\r\n\r\n  // Horizontal line\r\n  // doc.line(x1,y1,x1,y1)\r\n  doc.line(15, 350, 600, 350);\r\n\r\n  doc.text(150,Item_yText, \"Product Name: A\")\r\n  doc.text(150,Item_yText + 20, \"Quantity: 1\")\r\n  doc.text(150,Item_yText + 40, \"Price: 200\")\r\n  doc.text(150,Item_yText + 60, \"Total price: 200\")\r\n\r\n  doc.text(150,Item_yText + 80, \"Product Name: A\")\r\n  doc.text(150,Item_yText + 100, \"Quantity: 1\")\r\n  doc.text(150,Item_yText + 120, \"Price: 200\")\r\n  doc.text(150,Item_yText + 140, \"Total price: 200\")\r\n\r\n  doc.text(150,Item_yText + 160, \"Product Name: A\")\r\n  doc.text(150,Item_yText + 180, \"Quantity: 1\")\r\n  doc.text(150,Item_yText + 200, \"Price: 200\")\r\n  doc.text(150,Item_yText + 220, \"Total price: 200\")\r\n\r\n  doc.text(150,Item_yText + 240, \"Product Name: A\")\r\n  doc.text(150,Item_yText + 260, \"Quantity: 1\")\r\n  doc.text(150,Item_yText + 280, \"Price: 200\")\r\n  doc.text(150,Item_yText + 300 , \"Total price: 200\")\r\n\r\n  doc.line(15, 450, 600, 450);\r\n  doc.text(150,470, \"Total Payment: 200\")\r\n  // doc.text(30, yText + 20, 'Address: 091 parola st brgy san andres Cainta,Rizal')\r\n  // // doc.text(30, yText + 30, 'Email: ArtLisboa@gmail.com')\r\n  // doc.text(30,  yText + 30, 'Contact Number: 09123232312')\r\n     \r\n\r\n  window.open(doc.output('bloburl'))\r\n  // var string = doc.output('datauristring');\r\n  // var embed = \"<embed width='100%' height='100%' src='\" + string + \"'/>\"\r\n  // var x = window.open();  \r\n  // x.document.open();\r\n  // x.document.write(embed);\r\n  // x.document.close();\r\n  // // doc.save('demo.pdf')\r\n}  \r\n\r\n\r\nconst Add_data = () => {\r\n// Routes\r\n  let NavS = useNavigate();\r\n  \r\n// Date ITO\r\nconst [value,setValue] = useState(\r\n  new Date()\r\n)\r\n  //JSON\r\n  const [data, setData] = useState({\r\n    \"Customer_name\": \"\",\r\n    \"Customer_email\": \"\",\r\n    \"Customer_cell\": \"\",\r\n    \"Customer_address\": \"\",\r\n    \"Customer_purchase\": [\"\"],\r\n    \"Customer_date\": \"\",\r\n    \"Customer_Quantity\": [\"\"],\r\n    \"Customer_modepayment\": \"\",\r\n    \"Customer_payment\":  \"Paid\"\r\n  })\r\n  // Mode of payment\r\n  const [ModeP, setModeP] = React.useState('COD');\r\n  \r\n// Show success\r\nconst [show_success,setShow_success] = useState()\r\n\r\n// Show error\r\nconst [show_error,setShow_error] = useState(true)\r\n\r\n// Show error show\r\nconst [show_err,setShow_err] = useState()\r\n\r\n// Product purchase\r\nconst [selectname, setSelectname] = useState(\"Select Product\")\r\n\r\n// Message if data exist\r\nconst [Msg,setMsg] = useState(\"\")\r\n\r\n\r\nconst [email, setEmail]= useState(true)\r\n\r\nconst verify_email = e =>{\r\n  \r\n  e.preventDefault()\r\n  \r\n  axios.post('http://localhost:3001/sendingEmail',{\r\n    \"Email\" : data.Customer_email,\r\n    \"Message\" : String(test.map(e=>e.Customer_purchase)),\r\n    \"Name\" : data.Customer_name,\r\n    \"Date\" : moment(value,\"mm-dd-yyyy\").format().split('T')[0],\r\n    \"Total\" : parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n    \"Mode\" : String(ModeP),\r\n    \"Status\" : data.Customer_payment\r\n  }) \r\n  .then(\r\n    res => \r\n    {\r\n      setEmail(res.data.Return)\r\n      console.log(res.data)\r\n    }\r\n  )\r\n\r\n}\r\n\r\n\r\n// Add customer data\r\nconst add_customerdata = e => {\r\n\r\n  e.preventDefault()  \r\n\r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_CustomerdataAPI.php\", {\r\n    \"Customer_name\": data.Customer_name,\r\n    \"Customer_email\": data.Customer_email,\r\n    \"Customer_cell\": data.Customer_cell,\r\n    \"Customer_address\": data.Customer_address,\r\n    \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n    \"Customer_date\": moment(value,\"mm-dd-yyyy\").format().split('T')[0],\r\n    \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n    \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n    \"Customer_modepayment\": String(ModeP),\r\n    \"Customer_payment\":  data.Customer_payment\r\n  })\r\n  .then(res => \r\n    {\r\n      console.log(res.data)\r\n      setShow_success(res.data[0].Result)\r\n      setShow_error(res.data[0].Result)\r\n      setShow_err(res.data[0].Result)\r\n      setMsg(res.data[0].Message)\r\n      setOpenDialog(false)\r\n    })\r\n    setDisble(true)\r\n\r\n  }\r\n\r\n// Save to draft customer data\r\nconst Save_customerDraftdata = e => {\r\n\r\n  e.preventDefault()  \r\n\r\n  \r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_customerdraftAPI.php\", {\r\n    \"Customer_name\": data.Customer_name,\r\n    \"Customer_email\": data.Customer_email,\r\n    \"Customer_cell\": data.Customer_cell,\r\n    \"Customer_address\": data.Customer_address,\r\n    \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n    \"Customer_date\": moment(value,\"mm-dd-yyyy\").format().split('T')[0],\r\n    \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n    \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n    \"Customer_modepayment\": String(ModeP),\r\n    \"Customer_payment\":  data.Customer_payment\r\n  })\r\n  .then(res => \r\n    {\r\n      // console.log(res.data)\r\n      setShow_success(res.data[0].Result)\r\n      setShow_error(res.data[0].Result)\r\n      setShow_err(res.data[0].Result)\r\n      setMsg(res.data[0].Message)\r\n      setOpenDialog(false)\r\n    })\r\n    setDisble(true)\r\n\r\n  }\r\n\r\n// Data product\r\nconst [dataproduct,setDataproduct] = useState([])\r\n\r\n\r\nconst [isApiSubscribed,setIsApiSubscribed] = useState(true)\r\n// fetch name \r\nuseEffect(() => {\r\n\r\n//let isApiSubscribed = true\r\n\r\n\r\n axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n .then(res=>{\r\n   \r\n  if (isApiSubscribed)\r\n  {\r\n    setDataproduct(res.data)\r\n  }\r\n \r\n   \r\n  })\r\n\r\n return () => {\r\n  // cancel the subscription\r\n  //isApiSubscribed = false\r\n  setIsApiSubscribed(false);\r\n};\r\n\r\n})\r\n\r\n\r\n\r\n// Data purchase\r\nconst [test,setTest] = useState([\r\n  \r\n      {\r\n        \"Customer_ID\": 0,\r\n        \"Customer_purchase\": \"Select product\",\r\n        \"Customer_price\": \"\",\r\n        \"Customer_Quantity\": 0,\r\n        \"Customer_total\": \"\",\r\n      }\r\n])\r\n\r\n\r\nconst [openDialog,setOpenDialog] = useState(false)\r\n\r\nconst [disble,setDisble] = useState(false)\r\n\r\n  return ( \r\n  <div>\r\n\r\n  {/* Message Dialog */}\r\n  \r\n<Dialog\r\n  open={openDialog}\r\n  >\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle >\r\n                    <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                padding={2}\r\n                >\r\n        <Typography variant='h5'>\r\n            High Resolution\r\n        </Typography>\r\n        </Grid>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n        <Typography variant='body1'>\r\n         Please review of the following before creating data\r\n        </Typography>\r\n\r\n    {/* Confirm Textbox */}\r\n\r\n\r\n         {/* Customer name */}\r\n         <Typography  variant='h6' marginTop={2} fontSize={15}>\r\n           Name: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_name}\r\n         </Typography>\r\n\r\n          {/* Customer email */}\r\n          <Typography type='email' variant='h6' marginTop={2} fontSize={15}>\r\n           Email: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_email}\r\n         </Typography>\r\n\r\n          {/* Customer cell number */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Contact number: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_cell}\r\n         </Typography>\r\n\r\n          {/* Customer Address */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Address: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {data.Customer_address}\r\n         </Typography>\r\n\r\n          {/* Customer Date purchase */}\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n           Date of purchase: \r\n         </Typography>\r\n         <Typography variant='h6' fontSize={18}>\r\n           {moment(value,\"mm-dd-yyyy\").format().split('T')[0]}\r\n           \r\n         </Typography>\r\n    \r\n         \r\n\r\n          <Grid container spacing={2}>\r\n\r\n            <Grid item>\r\n              {/* Payment Status */}\r\n              <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                Payment Status: \r\n              </Typography>\r\n              <Typography variant='h6' fontSize={18}>\r\n                {data.Customer_payment}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              {/* Payment Status */}\r\n              <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                Mode of Payment: \r\n              </Typography>\r\n              <Typography variant='h6' fontSize={18}>\r\n                {ModeP}\r\n              </Typography>\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n          \r\n          <Grid container spacing={2}>\r\n\r\n              <Grid item>\r\n                <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                >\r\n                                 \r\n                  <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                    Purchase list:\r\n                  </Typography>\r\n                  {test.map(e=>\r\n                  <ListItemText key={e.Customer_ID}>\r\n                      {e.Customer_purchase}\r\n                  </ListItemText>)} \r\n                </Grid>\r\n\r\n              </Grid>\r\n\r\n              <Grid item>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                >\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Quantity:\r\n                </Typography>\r\n                {test.map(e=>\r\n                <ListItemText key={e.Customer_ID}>\r\n                    {e.Customer_Quantity}\r\n                </ListItemText>)} \r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Alert severity=\"warning\"\r\n         >\r\n           Please check your email account if the email was sent\r\n         </Alert>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n     \r\n      {/* Send email  */}\r\n     <Button \r\n        onClick={verify_email} \r\n        disabled={!email}\r\n          autoFocus\r\n          helperText=\"\"\r\n           >Send email</Button>\r\n\r\n        {/* Add Customer data */}\r\n          <Button \r\n          onClick={add_customerdata} \r\n          variant='contained'\r\n          disabled ={email} >Okay</Button>\r\n\r\n        {/* Cancel */}\r\n          <Button \r\n         onClick={()=>{\r\n          setOpenDialog(false)\r\n         }}\r\n             >\r\n                    Cancel\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n \r\n{/* // Whole Container */}\r\n         {/* Alert Success */}\r\n         <Collapse in={show_success}>\r\n         <Alert severity=\"success\"\r\n         onClose={()=>{\r\n           \r\n           setShow_success(false) \r\n           setData({\r\n\r\n            Customer_name: \"\",\r\n            Customer_email: \"\",\r\n            Customer_cell: \"\",\r\n            Customer_address: \"\",\r\n            Customer_purchase: [\"\"],\r\n            Customer_date: new Date(),\r\n            Customer_total: 0,\r\n            Customer_payment:  \"Paid\"\r\n\r\n\r\n           })\r\n           setSelectname([])\r\n           setDisble(false)\r\n         }}\r\n         >\r\n           Data has been updated\r\n         </Alert>\r\n       </Collapse>\r\n\r\n{/* Alert Error */}\r\n<Collapse fullWidth in={show_err ? false : true}>\r\n         <Alert severity=\"error\"\r\n         onClose={()=>{\r\n           \r\n           setShow_err(true) \r\n           setShow_error(true)\r\n           setDisble(false)\r\n         }}\r\n         >\r\n           ATTENTION! textfield should not be empty!\r\n         </Alert>\r\n       </Collapse>\r\n\r\n    <Grid container padding={6} paddingTop={2} >\r\n    \r\n\r\n\r\n    \r\n\r\n{/* Container para sa button paar may padding */}\r\n      <Grid container padding={2}>\r\n\r\n               \r\n        {/* Button cancel */}\r\n        <Fab \r\n        color=\"primary\"  \r\n        aria-label=\"add\" \r\n        onClick={e=>NavS(\"/Mainpage/Invoice\")} \r\n        >\r\n          <ClearIcon />\r\n         \r\n        </Fab>\r\n        <Typography variant='h3'  marginLeft={2}> Add Data</Typography>\r\n      </Grid>\r\n\r\n{/* Container for all components */}\r\n      <Grid \r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"flex-start\" \r\n      style={{\r\n        backgroundColor:\"white\",\r\n        border:\"2px solid black\",\r\n        borderRadius: 5\r\n      }}\r\n      onClick={e=>\r\n        {\r\n          setData({...data,Customer_purchase: selectname.toString()})\r\n        }\r\n      }\r\n     >\r\n\r\n{/* Name textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Name' type='text' fullWidth\r\n            value={data.Customer_name}\r\n            onChange={e=>{\r\n              setData({...data, Customer_name: e.target.value})\r\n            }}\r\n            error={show_error? false : true}\r\n            helperText={Msg ? Msg : null}\r\n            onClick={()=>\r\n              {\r\n                setShow_error(true)\r\n                setMsg(null)\r\n              }\r\n              \r\n            }\r\n            />\r\n        </Grid>\r\n\r\n{/* Email textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Email Address' type='Email' fullWidth\r\n            value={data.Customer_email}\r\n            onChange={e=>{\r\n              setData({...data, Customer_email: e.target.value})\r\n            }}\r\n            error={show_error? false : true}\r\n            onClick={()=>setShow_error(true)}\r\n            />\r\n        </Grid>   \r\n\r\n{/* Contact textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Contact Number' type='text' fullWidth\r\n            value={data.Customer_cell}\r\n            onChange={e=>{\r\n              setData({...data, Customer_cell: e.target.value})\r\n            }}\r\n            error={show_error? false : true}\r\n            onClick={()=>setShow_error(true)}\r\n            />\r\n        </Grid>\r\n\r\n{/* Address textfield */}\r\n        <Grid item md={12} padding={2}>\r\n            <CcTextField multiline label='Address' type='text' fullWidth\r\n            value={data.Customer_address}\r\n            onChange={e=>{\r\n              setData({...data, Customer_address: e.target.value})\r\n            }}\r\n            error={show_error? false : true}\r\n            onClick={()=>setShow_error(true)}\r\n            />\r\n        </Grid> \r\n\r\n        <Grid \r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"center\">\r\n\r\n        \r\n  {/* Date textfield */}\r\n        <Grid item md={2} padding={2}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <MobileDatePicker\r\n                error={show_error? false : true}\r\n                inputFormat=\"MM/dd/yyyy\"\r\n                value={value}\r\n                onChange={(newValue) => setValue(newValue) }\r\n                renderInput={(params) => <CcTextField  {...params} \r\n                onClick={()=>{\r\n                  setShow_error(true)\r\n                }}\r\n                />}\r\n          \r\n                />\r\n\r\n                </LocalizationProvider>\r\n\r\n        \r\n        </Grid> \r\n\r\n\r\n  {/* Mode of payment */}\r\n        <Grid item md={3} padding={2}>\r\n        \r\n        <Select\r\n          error={show_error? false : true}\r\n          onClick={()=>{\r\n            setShow_error(true)\r\n          }}\r\n          size='small'\r\n          fullWidth\r\n          value={ModeP}\r\n         \r\n          onChange={e=>setModeP(e.target.value)}\r\n\r\n          renderValue ={() => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              <Chip label={ModeP} color='primary'/>\r\n            </Box>\r\n            )}\r\n        >\r\n          <MenuItem value=\"COD\">\r\n            <ListItemText>\r\n              COD\r\n            </ListItemText>\r\n          </MenuItem>\r\n          <MenuItem value=\"PAYMAYA\">\r\n            <ListItemText>\r\n            PAYMAYA\r\n            </ListItemText>\r\n          </MenuItem>\r\n          <MenuItem value=\"GCASH\">            \r\n            <ListItemText>\r\n            GCASH\r\n            </ListItemText>\r\n          </MenuItem>\r\n        </Select>\r\n\r\n        </Grid>\r\n\r\n\r\n  {/* Radio Button for payment status */}\r\n        <Grid item md={3} padding={2}>\r\n        \r\n            <RadioGroup\r\n              row\r\n              value={data.Customer_payment}\r\n              onChange={e => {\r\n              setData({...data,Customer_payment: e.target.value })\r\n              }}\r\n            >\r\n              <FormControlLabel  value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n              <FormControlLabel value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n            </RadioGroup>\r\n\r\n        </Grid>\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n{/* Customer item purchase detail */}\r\n        <Grid item md={12} padding={4}>\r\n\r\n\r\n\r\n          <Grid \r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"center\" \r\n          style={{\r\n            border: \"2px solid #9B3C21\",\r\n            borderRadius:'10px'\r\n          }} \r\n          paddingBottom={2}\r\n          spacing={2}>\r\n\r\n\r\n\r\n{/* Add purchase row */}\r\n            <Grid item md={12}>\r\n             \r\n              <Fab \r\n                color='primary'\r\n                aria-label=\"add\" \r\n                variant='extended'\r\n                size='large'\r\n                onClick={e=>{\r\n                  e.preventDefault()\r\n\r\n              \r\n                  test.length ?\r\n                  setTest([\r\n                    ...test, {\r\n                      \"Customer_ID\": parseInt(test[test.length - 1].Customer_ID) + 1,\r\n                      \"Customer_purchase\": \"Select product\",\r\n                      \"Customer_Quantity\": 0,\r\n                      \"Customer_total\": 0,  \r\n                    }\r\n                  ]) : \r\n                  setTest([\r\n                    ...test, {\r\n                      \"Customer_ID\": 0,\r\n                      \"Customer_purchase\": \"Select product\",\r\n                      \"Customer_Quantity\": 0,\r\n                      \"Customer_total\": 0,  \r\n                    }\r\n                  ])\r\n                 \r\n                }} \r\n                \r\n                >\r\n                <AddShoppingCartOutlinedIcon fontSize='medium'/>      \r\n                 <span>Add purchase details</span>\r\n              </Fab>\r\n            </Grid>\r\n\r\n\r\n        {/* List pf product purchase detail */}\r\n            {test.map((index)=>(\r\n\r\n              <Grid  key={index.Customer_ID} padding={2} spacing={2} \r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"flex-start\"\r\n              alignItems=\"center\">\r\n\r\n{/* Customer purchase */ }\r\n                <Grid item md={4}>\r\n                  <Typography variant='subtitle1'>\r\n                  {\"This product is \" + dataproduct\r\n                  ?.filter(e=>e.Product_name === index.Customer_purchase)\r\n                  ?.map(e=>e.Product_Status)\r\n                  }\r\n                  </Typography>          \r\n                  <Select\r\n                    value={index.Customer_purchase}\r\n                    fullWidth\r\n                    onClick={e=>{\r\n                      e.preventDefault()\r\n                    }}\r\n                \r\n                    onChange={e=>{\r\n                      const list = [...test]\r\n                      list[index.Customer_ID][\"Customer_purchase\"] = e.target.value\r\n                      list[index.Customer_ID][\"Customer_Quantity\"] = 1\r\n                      console.log(list)\r\n                    setTest(list)\r\n                    }}\r\n                    renderValue ={() => (\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        <Chip label={index.Customer_purchase} color='primary'/>\r\n                      </Box>\r\n                      )}                      \r\n                    >\r\n                      <MenuItem value=\"Select product\"></MenuItem>\r\n                    {dataproduct?.map((name) => (\r\n                      <MenuItem key={name.Product_ID} value={name.Product_name}>\r\n                        <ListItemText primary={name.Product_name} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>                     \r\n                </Grid>\r\n\r\n{/* Quantity */}\r\n                <Grid item md={2}>\r\n             \r\n                  <CcTextField label=\"Quantity\" fullWidth\r\n                    value={index.Customer_Quantity}\r\n                    onChange={\r\n                      e=>{\r\n                        const list = [...test]\r\n                        list[index.Customer_ID][\"Customer_Quantity\"] = e.target.value\r\n                        setTest(list)\r\n                      }\r\n                    }\r\n                />\r\n\r\n                <Typography variant='subtitle2'>\r\n                  {\"Available stocks is \" + dataproduct\r\n                  ?.filter(e=>e.Product_name === index.Customer_purchase)\r\n                  ?.map(e=>e.Product_stocks)\r\n                  }\r\n                </Typography> \r\n\r\n                </Grid>\r\n\r\n{/*  Price */}\r\n                <Grid item md={2}>\r\n                \r\n                  <CcTextField label=\"Price\" fullWidth\r\n                  value={\r\n                    dataproduct.filter(e=> e.Product_name === index.Customer_purchase)\r\n                    .map(e=>e.Product_price)\r\n                    .toLocaleString(undefined, { maximumFractionDigits: 2})\r\n                    \r\n                  }\r\n\r\n                />\r\n                </Grid>   \r\n\r\n\r\n{/* Total price */}\r\n                <Grid item md={2}>\r\n             \r\n                  <CcTextField label=\"Total price\" fullWidth\r\n                  value={\r\n                    // Multiplication\r\n                    index.Customer_total = \r\n                    index.Customer_Quantity \r\n                    * \r\n                    dataproduct.filter(e => \r\n                      e.Product_name \r\n                      === index.Customer_purchase)\r\n                    .map(e=>e.Product_price)\r\n                }\r\n                />\r\n                </Grid>\r\n\r\n\r\n{/* Button remove */} \r\n                <Grid item md={2} >\r\n                  <Fab \r\n                  \r\n                  value={ index.Customer_ID}\r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  onClick={e=> \r\n                    {\r\n                      \r\n                      // setIsApiSubscribed(false)\r\n                      const list = [...test]\r\n                        const index = list.map(e=>e.Customer_ID).indexOf(parseInt(e.currentTarget.value))\r\n                        list.splice(index,1)\r\n\r\n                        // console.log(list)\r\n                         setTest(list)\r\n                      \r\n\r\n                      \r\n                    }\r\n                \r\n                  }\r\n                  size='small'\r\n                  >\r\n                    <ClearIcon />\r\n         \r\n                  </Fab>\r\n            </Grid>                \r\n\r\n              </Grid>\r\n            )\r\n            )}\r\n\r\n\r\n          <Grid padding={2}>\r\n            <Typography variant='h6'>\r\n              Total payment: \r\n            </Typography>\r\n              \r\n            <CcTextField value={\r\n              test.reduce((a,b)=> a = a + b.Customer_total,0)\r\n              .toLocaleString(undefined, {maximumFractionDigits: 2})\r\n              }/>\r\n\r\n            \r\n\r\n          </Grid>\r\n\r\n{/* Button Conatainer  */} \r\n          <Grid container padding={2}  >\r\n\r\n{/* Button create  */} \r\n            <Grid item md={2} >\r\n              <Fab   \r\n                           \r\n                color=\"primary\"  \r\n                aria-label=\"add\" \r\n                variant='extended'\r\n                onClick={e=>setOpenDialog(true)}\r\n                >\r\n                  <SaveAltOutlinedIcon fontSize='medium' />\r\n                  <Typography marginLeft={1} variant='p'>Create data</Typography>\r\n         \r\n              </Fab>\r\n            </Grid> \r\n\r\n{/* Button save as draft */} \r\n            <Grid item md={2} >\r\n              <Fab        \r\n           \r\n                color=\"primary\"  \r\n                aria-label=\"add\" \r\n                variant='extended'\r\n                onClick={Save_customerDraftdata}\r\n                >\r\n                  <DraftsOutlinedIcon fontSize='medium' />\r\n                  <Typography marginLeft={1} variant='p'>Save to draft</Typography>\r\n         \r\n              </Fab>\r\n            </Grid>    \r\n\r\n          </Grid>           \r\n            \r\n          </Grid>\r\n\r\n    \r\n       \r\n        </Grid>\r\n\r\n\r\n\r\n      </Grid>\r\n\r\n    </Grid>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Add_data","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Edit_data.jsx",["209","210","211"],[],"import { \r\n    Fab, \r\n    Grid , \r\n    Typography, \r\n    Box, \r\n    Button, \r\n    FormControlLabel, \r\n    Alert, \r\n    Collapse, \r\n    Radio, \r\n    RadioGroup, \r\n    Select, \r\n    Chip, \r\n    MenuItem, \r\n    ListItemText,\r\n  } from '@mui/material'\r\n  import Dialog from '@mui/material/Dialog';\r\n  import DialogActions from '@mui/material/DialogActions';\r\n  import DialogContent from '@mui/material/DialogContent';\r\n  import DialogTitle from '@mui/material/DialogTitle';\r\n  import React, { useEffect, useState } from 'react'\r\n  import { useNavigate } from 'react-router-dom';\r\n  import { CcTextField } from '../Stocks';\r\n  import AdapterDateFns from '@mui/lab/AdapterDateFns';\r\n  import LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n  import MobileDatePicker from '@mui/lab/MobileDatePicker'\r\n  import moment from 'moment'\r\n  \r\n  \r\n  // ICONS\r\n  import ClearIcon from '@mui/icons-material/Clear';\r\n  import AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\r\n  import SaveAltOutlinedIcon from '@mui/icons-material/SaveAltOutlined';\r\n  import DraftsOutlinedIcon from '@mui/icons-material/DraftsOutlined';\r\n\r\n  import { dataT , set_para_di_maedits } from './Invoice'\r\n  \r\n  import axios from 'axios';\r\n\r\n\r\n\r\nvar para_de_maedit = set_para_di_maedits\r\n  \r\n  const Edit_data = () => {\r\n  // Routes\r\n    let NavS = useNavigate();\r\n  const [not_edit,setNot_edit] = useState(set_para_di_maedits)\r\n  \r\n  // PDF create\r\n  const createPDf = e => {\r\n    e.preventDefault()\r\n  }\r\n  \r\n  // Date ITO\r\n  const [value,setValue] = useState(\r\n    new Date()\r\n  )\r\n    //JSON\r\n    const [data, setData] = useState(\r\n        {\r\n        \"Customer_ID\" : 0,\r\n        \"Customer_name\": \"\",\r\n        \"Customer_email\": \"\",\r\n        \"Customer_cell\": \"\",\r\n        \"Customer_address\": \"\",\r\n        \"Customer_purchase\": \"\", //ito0\r\n        \"Customer_date\": \"\",\r\n        \"Customer_total\": 9,\r\n        \"Customer_Quantity\": \"\", //ito0\r\n        \"Customer_modepayment\": \"\",\r\n        \"Customer_payment\": \"\"\r\n        },)\r\n    // Mode of payment\r\n    const [ModeP, setModeP] = React.useState('COD');\r\n    \r\n  // Show success\r\n  const [show_success,setShow_success] = useState()\r\n  \r\n  // Show error\r\n  const [show_error,setShow_error] = useState(true)\r\n  \r\n  // Show error show\r\n  const [show_err,setShow_err] = useState()\r\n  \r\n  // Product purchase\r\n  const [selectname, setSelectname] = useState(\"Select Product\")\r\n  \r\n  // Message if data exist\r\n  const [Msg,setMsg] = useState(\"\")\r\n \r\n  \r\n  const date_ito = new Date(value)\r\n\r\n\r\n\r\n  \r\n  const [email, setEmail]= useState(true)\r\n\r\n  const verify_email = e =>{\r\n  \r\n    e.preventDefault()\r\n    \r\n    axios.post('http://localhost:3001/updatedEmail',{\r\n      \"Email\" : data.Customer_email,\r\n      \"Message\" : String(test.map(e=>e.Customer_purchase)),\r\n      \"Name\" : data.Customer_name,\r\n      \"Date\" : moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Total\" : parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Mode\" : String(ModeP),\r\n      \"Status\" : data.Customer_payment\r\n    }) \r\n    .then(\r\n      res => \r\n      {\r\n        setEmail(res.data.Return)\r\n        console.log(res.data)\r\n      }\r\n    )\r\n  \r\n  }\r\n  \r\n\r\n\r\n  // Add customer data\r\n  const edit_customerdata = e => {\r\n  \r\n    e.preventDefault()  \r\n  \r\n    \r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Update_CustomerdataAPI.php\", {\r\n      \"Customer_ID\": data.Customer_ID,\r\n      \"Customer_name\": data.Customer_name,\r\n      \"Customer_email\": data.Customer_email,\r\n      \"Customer_cell\": data.Customer_cell,\r\n      \"Customer_address\": data.Customer_address,\r\n      \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n      \"Customer_date\": moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n      \"Customer_modepayment\": String(ModeP),\r\n      \"Customer_payment\":  data.Customer_payment\r\n    })\r\n    .then(res => \r\n      {\r\n        setShow_success(res.data[0].Result)\r\n        setShow_error(res.data[0].Result)\r\n        setShow_err(res.data[0].Result)\r\n        setMsg(res.data[0].Message)\r\n        console.log(res.data)\r\n        setOpenDialog(false)\r\n      })\r\n      setDisble(true)\r\n  \r\n    }\r\n  \r\n      // ,MOve to draflist\r\n  const Move_customerdata = e => {\r\n  \r\n    e.preventDefault()  \r\n  \r\n    \r\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_customer_Save_to_draftAPI.php\", {\r\n      \"Customer_ID\": data.Customer_ID,\r\n      \"Customer_name\": data.Customer_name,\r\n      \"Customer_email\": data.Customer_email,\r\n      \"Customer_cell\": data.Customer_cell,\r\n      \"Customer_address\": data.Customer_address,\r\n      \"Customer_purchase\": String(test.map(e=>e.Customer_purchase)),\r\n      \"Customer_date\": moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0],\r\n      \"Customer_total\": parseInt(test.reduce((a,b)=> a = a + b.Customer_total,0)),\r\n      \"Customer_Quantity\": String(test.map(e=>e.Customer_Quantity)),\r\n      \"Customer_modepayment\": String(ModeP),\r\n      \"Customer_payment\":  data.Customer_payment\r\n    })\r\n    .then(res => \r\n      {\r\n        setShow_success(res.data[0].Result)\r\n        setShow_error(res.data[0].Result)\r\n        setShow_err(res.data[0].Result)\r\n        setMsg(res.data[0].Message)\r\n        console.log(res.data)\r\n        setOpenDialog(false)\r\n      })\r\n      setDisble(true)\r\n  \r\n    }\r\n  \r\n  // Data product\r\n  const [dataproduct,setDataproduct] = useState([])\r\n    \r\n  \r\n\r\n  // fetch name \r\n  useEffect(() => {\r\n  \r\n  let isApiSubscribed = true\r\n  \r\n  \r\n   axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n   .then(res=>{\r\n     \r\n    if (isApiSubscribed)\r\n    {\r\n      setDataproduct(res.data)\r\n      if (not_edit === true)\r\n      {\r\n\r\n        console.log(dataT.Customer_date)\r\n        setValue(dataT.Customer_date)\r\n        setModeP(dataT.Customer_modepayment)\r\n        setData(dataT)\r\n        setTest(breaking(dataT))\r\n        setNot_edit(false)\r\n\r\n      }\r\n\r\n\r\n     \r\n    }\r\n   \r\n     \r\n    })\r\n  \r\n   return () => {\r\n    // cancel the subscription\r\n    isApiSubscribed = false\r\n  };\r\n  \r\n  })\r\n\r\n  // Data purchase\r\n  const [test,setTest] = useState([\r\n        {\r\n          \"Customer_ID\": 0,\r\n          \"Customer_purchase\": \"Select product\",\r\n          \"Customer_price\": \"\",\r\n          \"Customer_Quantity\": 0,\r\n          \"Customer_total\": \"\",\r\n        }\r\n  ])\r\n  \r\n\r\n\r\n  const breaking = (e) =>{\r\n    \r\n    const Customer_purchase = e.Customer_purchase.split(',')\r\n    const Customer_Quantity = e.Customer_Quantity.split(',')\r\n\r\n\r\n\r\n    return [...Array(Customer_purchase.length)].map(\r\n      (_ , i) => ({\r\n        Customer_ID: parseInt(i),\r\n        Customer_purchase: Customer_purchase[i],\r\n        Customer_price: parseInt(i),\r\n        Customer_Quantity: Customer_Quantity[i],\r\n        Customer_total: parseInt(i)\r\n      }));\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  const [openDialog,setOpenDialog] = useState(false)\r\n  \r\n  const [disble,setDisble] = useState(false)\r\n  \r\n    return ( \r\n    <div>\r\n  \r\n    {/* Message Dialog */}\r\n    \r\n  <Dialog\r\n    open={openDialog}\r\n    >\r\n  \r\n  {/* Dialog Tittle */}\r\n        <DialogTitle >\r\n                      <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  padding={2}\r\n                  >\r\n          <Typography variant='h5'>\r\n              High Resolution\r\n          </Typography>\r\n          </Grid>\r\n        </DialogTitle>\r\n  \r\n  {/* Dialog Content */}\r\n        <DialogContent>\r\n  \r\n          <Typography variant='body1'>\r\n           Please review of the following before save edited data\r\n          </Typography>\r\n  \r\n      {/* Confirm Textbox */}\r\n  \r\n  \r\n           {/* Customer name */}\r\n           <Typography  variant='h6' marginTop={2} fontSize={15}>\r\n             Name: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_name}\r\n           </Typography>\r\n  \r\n            {/* Customer email */}\r\n            <Typography type='email' variant='h6' marginTop={2} fontSize={15}>\r\n             Email: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_email}\r\n           </Typography>\r\n  \r\n            {/* Customer cell number */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Contact number: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_cell}\r\n           </Typography>\r\n  \r\n            {/* Customer Address */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Address: \r\n           </Typography>\r\n           <Typography variant='h6' fontSize={18}>\r\n             {data.Customer_address}\r\n           </Typography>\r\n  \r\n            {/* Customer Date purchase */}\r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n             Date of purchase: \r\n           </Typography>\r\n           \r\n           <Typography variant='h6' fontSize={18}>\r\n             {moment(date_ito,\"mm-dd-yyyy\").format().split('T')[0]}\r\n           </Typography>\r\n       \r\n            <Grid container spacing={2}>\r\n  \r\n              <Grid item>\r\n                {/* Payment Status */}\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Payment Status: \r\n                </Typography>\r\n                <Typography variant='h6' fontSize={18}>\r\n                  {data.Customer_payment}\r\n                </Typography>\r\n              </Grid>\r\n  \r\n              <Grid item>\r\n                {/* Payment Status */}\r\n                <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                  Mode of Payment: \r\n                </Typography>\r\n                <Typography variant='h6' fontSize={18}>\r\n                  {ModeP}\r\n                </Typography>\r\n              </Grid>\r\n  \r\n            </Grid>\r\n  \r\n            \r\n            <Grid container spacing={2}>\r\n  \r\n                <Grid item>\r\n                  <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  >\r\n                                   \r\n                    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                      Purchase list:\r\n                    </Typography>\r\n                    {test.map(e=>\r\n                    <ListItemText key={e.Customer_ID}>\r\n                        {e.Customer_purchase}\r\n                    </ListItemText>)} \r\n                  </Grid>\r\n  \r\n                </Grid>\r\n  \r\n                <Grid item>\r\n  \r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  >\r\n                  <Typography variant='h6' marginTop={2} fontSize={15}>\r\n                    Quantity:\r\n                  </Typography>\r\n                  {test.map(e=>\r\n                  <ListItemText key={e.Customer_ID}>\r\n                      {e.Customer_Quantity}\r\n                  </ListItemText>)} \r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n          <Alert severity=\"warning\">\r\n            Please check your email account if the email was sent\r\n          </Alert>\r\n\r\n        </DialogContent>\r\n  \r\n        <DialogActions>\r\n\r\n\r\n                {/* Send email  */}\r\n      <Button \r\n        onClick={verify_email} \r\n        disabled={!email}\r\n          autoFocus\r\n          helperText=\"\"\r\n           >Send email</Button>\r\n\r\n\r\n            <Button \r\n            onClick={edit_customerdata} \r\n            variant='contained'\r\n         disabled ={email} >Okay</Button>\r\n  \r\n            <Button \r\n           onClick={()=>{\r\n            setOpenDialog(false)\r\n            setEmail(true)\r\n           }}\r\n               >\r\n                      Cancel\r\n                  </Button>\r\n        </DialogActions>\r\n  \r\n      </Dialog>\r\n   \r\n  {/* // Whole Container */}\r\n           {/* Alert Success */}\r\n           <Collapse in={show_success}>\r\n           <Alert severity=\"success\"\r\n           onClose={()=>{\r\n             \r\n             setShow_success(false)\r\n             NavS(\"/Mainpage/Invoice\") \r\n             setData({\r\n  \r\n              Customer_name: \"\",\r\n              Customer_email: \"\",\r\n              Customer_cell: \"\",\r\n              Customer_address: \"\",\r\n              Customer_purchase: [\"\"],\r\n              Customer_date: new Date(),\r\n              Customer_total: 0,\r\n              Customer_payment:  \"Paid\"\r\n  \r\n  \r\n             })\r\n             setSelectname([])\r\n             setDisble(false)\r\n           }}\r\n           >\r\n             Data has been updated\r\n           </Alert>\r\n         </Collapse>\r\n  \r\n  {/* Alert Error */}\r\n  <Collapse fullWidth in={show_err ? false : true}>\r\n           <Alert severity=\"error\"\r\n           onClose={()=>{\r\n             \r\n             setShow_err(true) \r\n             setShow_error(true)\r\n             setDisble(false)\r\n           }}\r\n           >\r\n             ATTENTION! textfield should not be empty!\r\n           </Alert>\r\n         </Collapse>\r\n  \r\n      <Grid container padding={6} paddingTop={2} >\r\n      \r\n  \r\n  \r\n      \r\n  \r\n  {/* Container para sa button paar may padding */}\r\n        <Grid container padding={2}>\r\n  \r\n                 \r\n          {/* Button cancel */}\r\n          <Fab \r\n          color=\"primary\"  \r\n          aria-label=\"add\" \r\n          onClick={e=>NavS(\"/Mainpage/Invoice\")} \r\n          >\r\n            <ClearIcon />\r\n           \r\n          </Fab>\r\n          <Typography variant='h3'  marginLeft={2}> Edit data</Typography>\r\n\r\n        </Grid>\r\n  \r\n  {/* Container for all components */}\r\n        <Grid \r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-start\" \r\n        style={{\r\n          backgroundColor:\"white\",\r\n          border:\"2px solid black\",\r\n          borderRadius: 5\r\n        }}\r\n        onClick={e=>\r\n          {\r\n            setData({...data,Customer_purchase: selectname.toString()})\r\n          }\r\n        }\r\n       >\r\n  \r\n  {/* Name textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Name' type='text' fullWidth\r\n              value={data.Customer_name}\r\n              onChange={e=>{\r\n                setData({...data, Customer_name: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              helperText={Msg ? Msg : null}\r\n              onClick={()=>\r\n                {\r\n                  setShow_error(true)\r\n                  setMsg(null)\r\n                }\r\n                \r\n              }\r\n              />\r\n          </Grid>\r\n  \r\n  {/* Email textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Email Address' type='Email' fullWidth\r\n              value={data.Customer_email}\r\n              onChange={e=>{\r\n                setData({...data, Customer_email: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid>   \r\n  \r\n  {/* Contact textfield */}\r\n          <Grid item md={10} padding={2}>\r\n              <CcTextField label='Contact Number' type='text' fullWidth\r\n              value={data.Customer_cell}\r\n              onChange={e=>{\r\n                setData({...data, Customer_cell: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid>\r\n  \r\n  {/* Address textfield */}\r\n          <Grid item md={12} padding={2}>\r\n              <CcTextField multiline label='Address' type='text' fullWidth\r\n              value={data.Customer_address}\r\n              onChange={e=>{\r\n                setData({...data, Customer_address: e.target.value})\r\n              }}\r\n              error={show_error? false : true}\r\n              onClick={()=>setShow_error(true)}\r\n              />\r\n          </Grid> \r\n  \r\n          <Grid \r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"center\">\r\n  \r\n          \r\n    {/* Date textfield */}\r\n          <Grid item md={2} padding={2}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                  <MobileDatePicker\r\n                  error={show_error? false : true}\r\n                  inputFormat=\"yyyy/MM/dd\"\r\n                  value={value}\r\n                  onChange={(newValue) => setValue(newValue) }\r\n                  renderInput={(params) => <CcTextField  {...params} \r\n                  onClick={()=>{\r\n                    setShow_error(true)\r\n                  }}\r\n                  />}\r\n            \r\n                  />\r\n  \r\n                  </LocalizationProvider>\r\n  \r\n          \r\n          </Grid> \r\n  \r\n  \r\n    {/* Mode of payment */}\r\n          <Grid item md={3} padding={2}>\r\n          \r\n          <Select\r\n            error={show_error? false : true}\r\n            onClick={()=>{\r\n              setShow_error(true)\r\n            }}\r\n            size='small'\r\n            fullWidth\r\n            value={ModeP}\r\n           \r\n            onChange={e=>setModeP(e.target.value)}\r\n  \r\n            renderValue ={() => (\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                <Chip label={ModeP} color='primary'/>\r\n              </Box>\r\n              )}\r\n          >\r\n            <MenuItem value=\"COD\">\r\n              <ListItemText>\r\n                COD\r\n              </ListItemText>\r\n            </MenuItem>\r\n            <MenuItem value=\"PAYMAYA\">\r\n              <ListItemText>\r\n              PAYMAYA\r\n              </ListItemText>\r\n            </MenuItem>\r\n            <MenuItem value=\"GCASH\">            \r\n              <ListItemText>\r\n              GCASH\r\n              </ListItemText>\r\n            </MenuItem>\r\n          </Select>\r\n  \r\n          </Grid>\r\n  \r\n  \r\n    {/* Radio Button for payment status */}\r\n          <Grid item md={3} padding={2}>\r\n          \r\n              <RadioGroup\r\n                row\r\n                value={data.Customer_payment}\r\n                onChange={e => {\r\n                setData({...data,Customer_payment: e.target.value })\r\n                }}\r\n              >\r\n                <FormControlLabel  value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n                <FormControlLabel value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n              </RadioGroup>\r\n  \r\n          </Grid>\r\n  \r\n          </Grid>\r\n  \r\n  \r\n  \r\n  {/* Customer item purchase detail */}\r\n          <Grid item md={12} padding={4}>\r\n  \r\n  \r\n  \r\n            <Grid \r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-start\"\r\n            alignItems=\"center\" \r\n            style={{\r\n              border: \"2px solid #9B3C21\",\r\n              borderRadius:'10px'\r\n            }} \r\n            paddingBottom={2}\r\n            spacing={2}>\r\n  \r\n  \r\n  \r\n  {/* Add purchase row */}\r\n              <Grid item md={12}>\r\n               \r\n                <Fab \r\n                  color='primary'\r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  size='large'\r\n                  onClick={e=>{\r\n                    e.preventDefault()\r\n  \r\n                \r\n                    test.length ?\r\n                    setTest([\r\n                      ...test, {\r\n                        \"Customer_ID\": parseInt(test[test.length - 1].Customer_ID) + 1,\r\n                        \"Customer_purchase\": \"Select product\",\r\n                        \"Customer_Quantity\": 0,\r\n                        \"Customer_total\": 0,  \r\n                      }\r\n                    ]) : \r\n                    setTest([\r\n                      ...test, {\r\n                        \"Customer_ID\": 0,\r\n                        \"Customer_purchase\": \"Select product\",\r\n                        \"Customer_Quantity\": 0,\r\n                        \"Customer_total\": 0,  \r\n                      }\r\n                    ])\r\n                   \r\n                  }} \r\n                  \r\n                  >\r\n                  <AddShoppingCartOutlinedIcon fontSize='medium'/>      \r\n                   <span>Add purchase details</span>\r\n                </Fab>\r\n              </Grid>\r\n  \r\n  \r\n          {/* List pf product purchase detail */}\r\n              {test.map((index)=>(\r\n  \r\n                <Grid  key={index.Customer_ID} padding={2} spacing={2} \r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"flex-start\"\r\n                alignItems=\"center\">\r\n  \r\n  {/* Customer purchase */ }\r\n                  <Grid item md={4}>\r\n                                     \r\n                    <Select\r\n                      value={index.Customer_purchase}\r\n                      fullWidth\r\n                      onClick={e=>{\r\n                        e.preventDefault()\r\n                      }}\r\n                      onChange={e=>{\r\n                        const list = [...test]\r\n                        list[index.Customer_ID][\"Customer_purchase\"] = e.target.value\r\n                        list[index.Customer_ID][\"Customer_Quantity\"] = 1\r\n                        console.log(list)\r\n                      setTest(list)\r\n                      }}\r\n                      renderValue ={() => (\r\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                          <Chip label={index.Customer_purchase} color='primary'/>\r\n                        </Box>\r\n                        )}                      \r\n                      >\r\n                        <MenuItem value=\"Select product\"></MenuItem>\r\n                      {dataproduct.map((name) => (\r\n                        <MenuItem key={name.Product_ID} value={name.Product_name}>\r\n                          <ListItemText primary={name.Product_name} />\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>                     \r\n                  </Grid>\r\n  \r\n  {/* Quantity */}\r\n                  <Grid item md={2}>\r\n               \r\n                    <CcTextField label=\"Quantity\" fullWidth\r\n                      value={index.Customer_Quantity}\r\n                      onChange={\r\n                        e=>{\r\n                          const list = [...test]\r\n                          list[index.Customer_ID][\"Customer_Quantity\"] = e.target.value\r\n                          setTest(list)\r\n                        }\r\n                      }\r\n                  />\r\n                  </Grid>\r\n  \r\n  {/*  Price */}\r\n                  <Grid item md={2}>\r\n                  \r\n                    <CcTextField label=\"Price\" fullWidth\r\n                    value={\r\n                      dataproduct.filter(e=> e.Product_name === index.Customer_purchase)\r\n                      .map(e=>e.Product_price)\r\n                      .toLocaleString(undefined, { maximumFractionDigits: 2})\r\n                      \r\n                    }\r\n  \r\n                  />\r\n                  </Grid>   \r\n  \r\n  \r\n  {/* Total price */}\r\n                  <Grid item md={2}>\r\n               \r\n                    <CcTextField label=\"Total price\" fullWidth\r\n                    value={\r\n                      // Multiplication\r\n                      index.Customer_total = \r\n                      index.Customer_Quantity \r\n                      * \r\n                      dataproduct.filter(e => \r\n                        e.Product_name \r\n                        === index.Customer_purchase)\r\n                      .map(e=>e.Product_price)\r\n                  }\r\n                  />\r\n                  </Grid>\r\n  \r\n  \r\n  {/* Button remove */} \r\n                  <Grid item md={2} >\r\n                    <Fab \r\n                    \r\n                    value={ index.Customer_ID}\r\n                    color=\"primary\"  \r\n                    aria-label=\"add\" \r\n                    onClick={e=> \r\n                      {\r\n                        \r\n                        // setIsApiSubscribed(false)\r\n                        const list = [...test]\r\n                          const index = list.map(e=>e.Customer_ID).indexOf(parseInt(e.currentTarget.value))\r\n                          list.splice(index,1)\r\n  \r\n                          // console.log(list)\r\n                           setTest(list)\r\n                        \r\n  \r\n                        \r\n                      }\r\n                  \r\n                    }\r\n                    size='small'\r\n                    >\r\n                      <ClearIcon />\r\n           \r\n                    </Fab>\r\n              </Grid>                \r\n  \r\n                </Grid>\r\n              )\r\n              )}\r\n  \r\n  \r\n            <Grid padding={2}>\r\n              <Typography variant='h6'>\r\n                Total payment: \r\n              </Typography>\r\n                \r\n              <CcTextField value={\r\n                test.reduce((a,b)=> a = a + b.Customer_total,0)\r\n                .toLocaleString(undefined, {maximumFractionDigits: 2})\r\n                }/>\r\n  \r\n              \r\n  \r\n            </Grid>\r\n  \r\n  {/* Button Conatainer  */} \r\n            <Grid container padding={2} spacing={1} >\r\n  \r\n  {/* Button create  */} \r\n              <Grid item md={3} >\r\n                <Fab   \r\n                             \r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  onClick={e=>setOpenDialog(true)}\r\n                  >\r\n                    <SaveAltOutlinedIcon fontSize='medium' />\r\n                    <Typography marginLeft={1} variant='p'>Save Edit data</Typography>\r\n           \r\n                </Fab>\r\n              </Grid> \r\n  \r\n  {/* Button save as draft */} \r\n              <Grid item md={3} >\r\n                <Fab        \r\n             \r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  variant='extended'\r\n                  onClick={Move_customerdata}\r\n                  >\r\n                    <DraftsOutlinedIcon fontSize='medium' />\r\n                    <Typography marginLeft={1} variant='p'>Save to draft</Typography>\r\n           \r\n                </Fab>\r\n              </Grid>    \r\n  \r\n            </Grid>           \r\n              \r\n            </Grid>\r\n  \r\n      \r\n         \r\n          </Grid>\r\n  \r\n  \r\n  \r\n        </Grid>\r\n  \r\n      </Grid>\r\n      </div>\r\n  )\r\n  }\r\n  \r\n  export default Edit_data","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\invoice\\Show_draft.jsx",["212","213","214"],[],"// Library components\r\n\r\nimport { Grid, \r\n  InputAdornment,\r\n  Typography,\r\n  Fab,\r\n  IconButton,\r\n  Collapse,\r\n  Button,\r\n  FormControlLabel,\r\n  Alert,\r\n  RadioGroup,\r\n  Radio,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  ListItemText,\r\n\r\n} from '@mui/material'\r\nimport { CTextField } from '../products/Products' \r\n\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\n// Icons\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport moment from 'moment'\r\nimport ModeEditOutlineRoundedIcon from '@mui/icons-material/ModeEditOutlineRounded';\r\nimport KeyboardBackspaceOutlinedIcon from '@mui/icons-material/KeyboardBackspaceOutlined';\r\n\r\n// Routes\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n// Transfer data to edit data\r\nexport var dataT = {}\r\nexport var set_para_di_maedits = true\r\n\r\n\r\n\r\n\r\nconst Show_draft = () => {\r\n// Navigation\r\nlet NavS = useNavigate();\r\n\r\n\r\n\r\n\r\n// Column header\r\nconst columns = [\r\n\r\n// ID Column\r\n{ field: 'Customer_ID', \r\nheaderName: 'ID', \r\nwidth: 70 ,\r\nheaderAlign: 'center',\r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n  <div\r\n    style={{\r\n      color: \"black\",\r\n      fontSize: 18,\r\n      width: \"100%\",\r\n      textAlign: \"center\"\r\n    }}\r\n  >\r\n    {cellValues.value}\r\n  </div>\r\n);\r\n}\r\n},\r\n\r\n// name Column\r\n{ field: 'Customer_name', \r\nheaderName: 'name', \r\nwidth: 200,\r\nheaderClassName: 'super-app-theme--header',\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n  <div\r\n    style={{\r\n      color: \"black\",\r\n      fontSize: 18,\r\n      width: \"100%\",\r\n      textAlign: \"center\"\r\n    }}\r\n  >\r\n    {cellValues.value}\r\n  </div>\r\n);\r\n}\r\n\r\n},\r\n\r\n\r\n\r\n{ field: 'Customer_email', \r\nheaderName: 'email', \r\nwidth: 130,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n<div\r\nstyle={{\r\n  color: \"black\",\r\n  fontSize: 18,\r\n  width: \"100%\",\r\n  textAlign: \"center\"\r\n  }}\r\n>\r\n  {cellValues.value}\r\n  </div>\r\n  );\r\n}\r\n},\r\n\r\n{ field: 'Customer_cell', \r\nheaderName: 'Cellphone number', \r\nwidth: 150,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n  <div\r\n    style={{\r\n      color: \"black\",\r\n      fontSize: 18,\r\n      width: \"100%\",\r\n      textAlign: \"center\"\r\n    }}\r\n  >\r\n    {cellValues.value}\r\n  </div>\r\n);\r\n}\r\n},\r\n\r\n\r\n{ field: 'Customer_date', \r\nheaderName: 'date', \r\nwidth: 150,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n<div\r\nstyle={{\r\n  color: \"black\",\r\n  fontSize: 18,\r\n  width: \"100%\",\r\n  textAlign: \"center\"\r\n}}\r\n>\r\n{cellValues.value}\r\n</div>\r\n);\r\n}\r\n},\r\n\r\n{ field: 'Customer_total', \r\nheaderName: 'total payment', \r\nwidth: 130,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n<div\r\nstyle={{\r\n  color: \"black\",\r\n  fontSize: 18,\r\n  width: \"100%\",\r\n  textAlign: \"center\"\r\n}}\r\n>\r\n{cellValues.value}\r\n</div>\r\n);\r\n}\r\n},\r\n\r\n{ field: 'Customer_payment', \r\nheaderName: 'status', \r\nwidth: 130,\r\nheaderAlign: 'center', \r\n\r\nrenderCell: (cellValues) => {\r\nreturn (\r\n<div\r\nstyle={{\r\n  color: \"black\",\r\n  fontSize: 18,\r\n  width: \"100%\",\r\n  textAlign: \"center\"\r\n}}\r\n>\r\n{cellValues.value}\r\n</div>\r\n);\r\n}\r\n},\r\n\r\n// delete\r\n{\r\nfield: 'action',\r\nheaderName: 'Delete',\r\nwidth: 130,\r\nheaderAlign: 'center', \r\nrenderCell: () => {\r\nreturn (\r\n  <div\r\n    style={{\r\n      width: \"100%\",\r\n      textAlign: \"center\",\r\n      // marginRight: '2'\r\n    }}\r\n  >\r\n   \r\n\r\n  <IconButton color=\"primary\" aria-label=\"delete\">\r\n      <DeleteOutlineOutlinedIcon/>\r\n  </IconButton>\r\n   \r\n  </div>\r\n\r\n\r\n);\r\n}\r\n},\r\n// edit\r\n{\r\nfield: 'View',\r\nheaderName: 'View',\r\nwidth: 130,\r\nheaderAlign: 'center', \r\nrenderCell: () => {\r\nreturn (\r\n  <div\r\n    style={{\r\n      width: \"100%\",\r\n      textAlign: \"center\",\r\n      // marginRight: '2'\r\n    }}\r\n  >\r\n   \r\n\r\n  <IconButton color=\"primary\" aria-label=\"delete\">\r\n      <ModeEditOutlineRoundedIcon/>\r\n  </IconButton>\r\n   \r\n  </div>\r\n\r\n\r\n);\r\n}\r\n}\r\n\r\n];\r\n//search data variable\r\nconst [search,setSearch] = useState(\"\")\r\n\r\n// Data \r\nconst [Data,set] = useState()\r\n\r\nconst [data, setData] = useState({\r\n\"Customer_name\": \"\",\r\n\"Customer_email\": \"\",\r\n\"Customer_cell\": \"\",\r\n\"Customer_address\": \"\",\r\n\"Customer_purchase\": \"A,B,C,D\",\r\n\"Customer_date\": \"\",\r\n\"Customer_Quantity\": \"0,1,2,3\",\r\n\"Customer_modepayment\": \"PAYMAYA\",\r\n\"Customer_payment\":  \"Paid\"\r\n})\r\n\r\n// \r\nconst test = () =>{\r\n\r\nconst Customer_purchase = data.Customer_purchase.split(',')\r\nconst Customer_Quantity = data.Customer_Quantity.split(',')\r\n\r\n\r\n\r\nreturn [...Array(Customer_purchase.length)].map(\r\n(_ , i) => ({\r\nCustomer_ID: parseInt(i),\r\nCustomer_purchase: Customer_purchase[i],\r\nCustomer_price: parseInt(i),\r\nCustomer_Quantity: Customer_Quantity[i],\r\nCustomer_total: parseInt(i)\r\n}));\r\n\r\n\r\n\r\n}\r\n\r\n// Status\r\nconst [stat, setStat] = useState(\"Paid\")\r\n\r\n// const data_stat = Data.filter(person=>person.Customer_payment === stat )\r\n\r\n// Filtering data \r\nconst filtered = !search ? \r\nData \r\n: Data.filter((person) => \r\nperson.Customer_name.toLowerCase().includes(search.toLowerCase())\r\n);\r\n\r\n\r\n// Show success\r\nconst [show_success,setShow_success] = useState(false)\r\n\r\n// Show error\r\nconst [show_error,setShow_error] = useState()\r\n\r\n\r\n// Htttp get request\r\nuseEffect(() => {\r\naxios.get('http://localhost/REACTJS/cognate1%20api/CustomerDraftdataAPI.php')\r\n.then(res=>set(res.data.filter(person=>\r\n\r\nperson.Customer_payment === stat \r\n\r\n)))\r\n.catch(err=>console.log(err)) \r\n})\r\n\r\n\r\n// Succesful deleted\r\nconst [del_ID,setDel_ID] = useState()\r\n\r\nconst success_delete = e =>\r\n{\r\naxios.post(\"http://localhost/REACTJS/cognate1%20api/Delete_customerdraftAPI.php\", { \"Customer_ID\": del_ID } )\r\n.then(res => \r\n{\r\nsetShow_success(res.data[0].Result)   \r\nsetConfirm_delete(false)\r\n}\r\n\r\n\r\n)\r\n}\r\n\r\n\r\n\r\n// Delete customerdata\r\nconst delete_customerdata = (param) => {\r\n\r\nswitch(param.field) {\r\n// delete\r\ncase 'action':\r\nsetDel_ID(parseInt(param.id))\r\nsetConfirm_delete(true)\r\nbreak;\r\n\r\n// edit data\r\ncase 'View':\r\n  edit_customerdata(param)\r\n  NavS(\"/Mainpage/Invoice/EditDraft\")  \r\nbreak;\r\n// view data\r\ndefault:\r\nview_data(param)\r\nsetView_data_(true)\r\n\r\n}\r\n\r\n}\r\n\r\n// view data\r\nconst view_data = (param) =>{\r\nsetData(\r\n{\r\nCustomer_ID : param.id,\r\n// Customer name\r\nCustomer_name: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_name)),\r\n\r\n// Customer email\r\nCustomer_email: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_email)),\r\n\r\n// Customer cell\r\nCustomer_cell: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_cell)),\r\n\r\n// Customer address\r\nCustomer_address: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_address)),\r\n\r\n// Customer purchase\r\nCustomer_purchase: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_purchase)),\r\n\r\n// Customer date\r\nCustomer_date: Date(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_date)),\r\n\r\n// Customer total\r\nCustomer_total: parseInt(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_total)),\r\n\r\n// Customer quantity\r\nCustomer_Quantity: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_Quantity)),\r\n\r\n// Customer modeofpayment\r\nCustomer_modepayment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_modepayment)),\r\n\r\n// Customer payment\r\nCustomer_payment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_payment)),\r\n}\r\n\r\n)\r\n}\r\n\r\n// Edit customerdata\r\nconst edit_customerdata = (param) => {\r\ndataT = {\r\nCustomer_ID : param.id,\r\n// Customer name\r\nCustomer_name: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_name)),\r\n\r\n// Customer email\r\nCustomer_email: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_email)),\r\n\r\n// Customer cell\r\nCustomer_cell: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_cell)),\r\n\r\n// Customer address\r\nCustomer_address: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_address)),\r\n\r\n// Customer purchase\r\nCustomer_purchase: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_purchase)),\r\n\r\n// Customer date\r\nCustomer_date: filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_date),\r\n\r\n// Customer total\r\nCustomer_total: parseInt(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_total)),\r\n\r\n// Customer quantity\r\nCustomer_Quantity: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_Quantity)),\r\n\r\n// Customer modeofpayment\r\nCustomer_modepayment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_modepayment)),\r\n\r\n// Customer payment\r\nCustomer_payment: String(filtered.filter(index=>index.Customer_ID === param.id)\r\n.map(ge=>ge.Customer_payment)),\r\n}\r\nset_para_di_maedits = true\r\n\r\n}\r\n\r\nconst [confirm_delete, setConfirm_delete] = useState(false)\r\nconst [view_data_, setView_data_] = useState(false)\r\nreturn (\r\n<div>\r\n{/* Alert Successful delete */}\r\n<Collapse in={show_success}>\r\n    <Alert severity=\"success\"\r\n    onClose={()=>{\r\n      \r\n      setShow_success(false) \r\n    }}\r\n    >\r\n      data succesful deleted\r\n    </Alert>\r\n  </Collapse>\r\n\r\n\r\n{/* Whole Container */}\r\n  <Grid container>\r\n\r\n{/* Confirm Delete Dialog */}\r\n  <Dialog\r\n  open={confirm_delete}\r\n>\r\n  <DialogTitle>\r\n    {\"High Resolution\"}\r\n  </DialogTitle>\r\n\r\n  <DialogContent>\r\n    <DialogContentText>\r\n        are you sure you want delete this forever ?\r\n    </DialogContentText>\r\n  </DialogContent>\r\n\r\n  <DialogActions>\r\n\r\n    <Button onClick={success_delete} autoFocus>\r\n      Yes\r\n    </Button>\r\n\r\n    <Button onClick={e=>setConfirm_delete(false)} >No</Button>\r\n  </DialogActions>\r\n</Dialog>\r\n\r\n{/* View Message Dialog */}\r\n\r\n<Dialog\r\nopen={view_data_}\r\n>\r\n\r\n{/* Dialog Tittle */}\r\n<DialogTitle >\r\n              <Grid\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          padding={2}\r\n          >\r\n  <Typography variant='h5'>\r\n      High Resolution\r\n  </Typography>\r\n  </Grid>\r\n</DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n<DialogContent>\r\n\r\n   {/* Customer name */}\r\n   <Typography  variant='h6' marginTop={2} fontSize={15}>\r\n     Name: \r\n   </Typography>\r\n   <Typography variant='h6' fontSize={18}>\r\n     {data.Customer_name}\r\n   </Typography>\r\n\r\n    {/* Customer email */}\r\n    <Typography type='email' variant='h6' marginTop={2} fontSize={15}>\r\n     Email: \r\n   </Typography>\r\n   <Typography variant='h6' fontSize={18}>\r\n     {data.Customer_email}\r\n   </Typography>\r\n\r\n    {/* Customer cell number */}\r\n    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n     Contact number: \r\n   </Typography>\r\n   <Typography variant='h6' fontSize={18}>\r\n     {data.Customer_cell}\r\n   </Typography>\r\n\r\n    {/* Customer Address */}\r\n    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n     Address: \r\n   </Typography>\r\n   <Typography variant='h6' fontSize={18}>\r\n     {data.Customer_address}\r\n   </Typography>\r\n\r\n    {/* Customer Date purchase */}\r\n    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n     Date of purchase: \r\n   </Typography>\r\n   <Typography variant='h6' fontSize={18}>\r\n     {moment(data.Customer_date,\"mm-dd-yyyy\").format().split('T')[0]}\r\n   </Typography>\r\n\r\n    <Grid container spacing={2}>\r\n\r\n      <Grid item>\r\n        {/* Payment Status */}\r\n        <Typography variant='h6' marginTop={2} fontSize={15}>\r\n          Payment Status: \r\n        </Typography>\r\n        <Typography variant='h6' fontSize={18}>\r\n          {data.Customer_payment}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item>\r\n        {/* Payment Status */}\r\n        <Typography variant='h6' marginTop={2} fontSize={15}>\r\n          Mode of Payment: \r\n        </Typography>\r\n        <Typography variant='h6' fontSize={18}>\r\n          {data.Customer_modepayment}\r\n        </Typography>\r\n      </Grid>\r\n\r\n    </Grid>\r\n\r\n    \r\n    <Grid container spacing={2}>\r\n\r\n        <Grid item>\r\n          <Grid\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          >\r\n                           \r\n            <Typography variant='h6' marginTop={2} fontSize={15}>\r\n              Purchase list:\r\n            </Typography>\r\n            {test().map((e,i)=>\r\n            <ListItemText key={i}>\r\n                {e.Customer_purchase}\r\n            </ListItemText>)} \r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n        <Grid item>\r\n\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          >\r\n          <Typography variant='h6' marginTop={2} fontSize={15}>\r\n            Quantity:\r\n          </Typography>\r\n          {test().map((e,i)=>\r\n          <ListItemText key={i}>\r\n              {e.Customer_Quantity}\r\n          </ListItemText>)} \r\n          </Grid>\r\n        </Grid>\r\n\r\n        \r\n      </Grid>\r\n    {/* Customer Address */}\r\n    <Typography variant='h6' marginTop={2} fontSize={15}>\r\n     Total of Payment: \r\n   </Typography>\r\n\r\n   <Typography variant='h6' fontSize={18}>\r\n     {parseInt(data.Customer_total).toLocaleString(undefined, {maximumFractionDigits: 2})}\r\n   </Typography>\r\n\r\n  </DialogContent>\r\n\r\n  <DialogActions>\r\n    <Button \r\n   onClick={()=>{\r\n    setView_data_(false)\r\n   }}\r\n       >\r\n              CLOSE\r\n          </Button>\r\n</DialogActions>\r\n\r\n</Dialog>\r\n\r\n\r\n\r\n  {/* Invoice */}\r\n  <Grid  item xs={12} md={10}>\r\n          <Typography variant='h3' marginY={2} marginLeft={2}> Draft List</Typography>\r\n      </Grid>\r\n  \r\n{/* Search bar container */}\r\n    <Grid item md={11} xs={12}>\r\n\r\n    \r\n\r\n      {/* Para may padding */}\r\n     <Grid \r\n     container \r\n     padding={3}\r\n     direction=\"row\"\r\n     justifyContent=\"center\"\r\n     alignItems=\"flex-start\">\r\n\r\n       {/* Search bar */}\r\n        <CTextField \r\n        variant='standard' \r\n        fullWidth \r\n        placeholder='Searchbar'\r\n        value={search}\r\n        onChange={e=>setSearch(e.target.value)}\r\n        disabled={Data ? false : true}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"start\">\r\n\r\n              <SearchOutlinedIcon fontSize='large' />\r\n           \r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        />\r\n\r\n    \r\n     </Grid>\r\n   \r\n\r\n    </Grid>\r\n\r\n{/* Goback button */}\r\n    <Grid item md={1} xs={7} padding={3}>\r\n\r\n        <Tooltip title=\"Go back\">\r\n\r\n        {/* Goback add */}\r\n          <Fab \r\n          color=\"primary\" \r\n          aria-label=\"add\" \r\n          // variant='extended'\r\n          onClick={e=>NavS(\"/Mainpage/Invoice\")} \r\n          >\r\n            <KeyboardBackspaceOutlinedIcon />\r\n            {/* Go back  */}\r\n          </Fab>\r\n        </Tooltip>\r\n    </Grid>\r\n\r\n\r\n\r\n{/* Status */}\r\n    <Grid item md={12}>\r\n        {/* Container para may padding */}\r\n      <Grid \r\n      container \r\n      paddingLeft={5}\r\n      direction=\"row\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"center\">\r\n\r\n        {/* Radio Button for payment status */}\r\n        <RadioGroup\r\n        row\r\n        value={stat}\r\n        onChange={e => {\r\n          setStat(e.target.value)\r\n        }}\r\n      >\r\n        <FormControlLabel disabled={Data ? false : true}  value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n        <FormControlLabel disabled={Data ? false : true} value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n      </RadioGroup>\r\n\r\n\r\n      </Grid>\r\n    </Grid>\r\n\r\n        \r\n\r\n    {/* Container for table */}\r\n    <Grid item md={12}>\r\n                \r\n\r\n      {/* Para may padding */}\r\n      <Grid \r\n      container             \r\n      direction=\"row\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"flex-start\"\r\n      padding={5}>\r\n\r\n\r\n<Typography variant='h6'>\r\nClick the row to view data\r\n</Typography>\r\n        {/* pang size at background color */}\r\n        <Grid \r\n        container\r\n        style={{\r\n          height:550 ,\r\n          width:'100%',\r\n          backgroundColor: 'White',\r\n          border:'2px solid black',\r\n          borderRadius: 3               \r\n        }}\r\n        >\r\n\r\n\r\n          {/* Data table */}\r\n          <DataGrid\r\n          columns={columns}\r\n          getRowId={(rows)=> rows.Customer_ID}\r\n          rows={filtered} // data na pinasok yung data \r\n            \r\n          pageSize={10}\r\n          //delete_customerdata\r\n          onCellClick={delete_customerdata}\r\n          />\r\n        </Grid>\r\n\r\n    \r\n      </Grid>\r\n\r\n    </Grid>\r\n\r\n\r\n  </Grid>\r\n\r\n\r\n</div>\r\n)\r\n}\r\n\r\nexport default Show_draft\r\n","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\chart\\linerechart.js",["215"],[],"import { userData } from \"../../../dummyData\";\nimport React from \"react\";\n\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend\n} from \"recharts\";\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport AreaRechartComponent from '../chart/area.rechart';\nimport \"./areachart.css\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(5),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n}));\n\n\nexport default function App() {\n    return (\n\n\n\n        <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={3}>\n\n                <Grid item xs>\n                    \n    \n                    <BarChart\n                  \n                        width={630}\n                        height={320}\n                        data={userData}\n                        margin={{\n                            top: 0,\n                            right: 0,\n                            left: 0,\n                            bottom: 0\n                        }}\n                      \n        >\n            <CartesianGrid strokeDasharray=\"4 4\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"PostReach\" fill=\"#8884d8\" />\n\n      \n                        </BarChart>\n\n           \n                </Grid>\n                <Grid item xs>\n                    <div className=\"featuredchart\">\n                    <h2> Sales Comparison </h2>\n                    <AreaRechartComponent />\n                    </div>\n\n                </Grid>\n            </Grid>\n        </Box>\n\n\n    \n\n\n\n\n    );\n}\n","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetTs.jsx",["216","217","218"],[],"﻿// Library components\r\n\r\nimport {\r\n    Grid, Typography,\r\n\r\n} from '@mui/material'\r\n\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n// Icons\r\n\r\n\r\n// Routes\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\nimport \"./featuredInfo.css\";\r\n\r\n\r\n\r\nconst WidgetTs = () => {\r\n\r\n\r\n    // Column header\r\n    const columns = [\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_ID',\r\n            headerName: 'ID',\r\n            width: 70,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_name',\r\n            headerName: 'name',\r\n            width: 200,\r\n            headerClassName: 'super-app-theme--header',\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n        },\r\n\r\n      \r\n\r\n        {\r\n            field: 'Customer_purchase',\r\n            headerName: 'product purchase',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_date',\r\n            headerName: 'date',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_total',\r\n            headerName: 'total',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_payment',\r\n            headerName: 'status',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"green\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n    ];\r\n    //search data variable\r\n    const [total, setTotal] = useState()\r\n\r\n    // Data \r\n    const [Data, set] = useState()\r\n\r\n\r\n   \r\n\r\n    // Htttp get request\r\n    useEffect(() => {\r\n        let isApiSubscribed = true\r\n        axios.get('http://localhost/REACTJS/cognate1%20api/Dashtrans.php')\r\n            .then(res => \r\n                {\r\n                    if(isApiSubscribed) {\r\n\r\n                 \r\n                    set(res.data)\r\n                    setTotal([res.data]\r\n                        .map(total=>total.Customer_total)\r\n                        .reduce((a,b)=> a+b,0)\r\n                        )\r\n\r\n                    }\r\n                }\r\n\r\n                \r\n                )\r\n            .catch(err => console.log(err))\r\n\r\n        return () => isApiSubscribed = false\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"widgetLgTitle\">\r\n         \r\n                    {/* Conatainer button */}\r\n                    <Grid item md={3} xs={12}>\r\n\r\n                        {/* Container para may padding */}\r\n                        <Grid\r\n                            container\r\n                            padding={5}\r\n                            direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\">\r\n\r\n                            {/* Button add */}\r\n                          \r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                    {/* Container for table */}\r\n                    <Grid item md={12}>\r\n\r\n                        {/* Para may padding */}\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                            padding={5}>\r\n\r\n\r\n                    {/* pang size at background color */}\r\n\r\n\r\n\r\n                    <Grid\r\n\r\n                                container\r\n                                style={{\r\n                                    height: 400,\r\n                                    width: 1000,\r\n                                    backgroundColor: 'lightgrey',\r\n                                    border: '2px solid black',\r\n                                    borderRadius: '30px'\r\n                                }}\r\n                            >\r\n\r\n\r\n                                {/* Data table */}\r\n                                <DataGrid\r\n                                    columns={columns}\r\n                                    getRowId={(rows) => rows.Customer_ID}\r\n                                    rows={Data} // data na pinasok yung data \r\n\r\n                                    pageSize={10}\r\n                            \r\n                                />\r\n\r\n                            </Grid>\r\n\r\n\r\n                        </Grid>\r\n\r\n                        {/* <span className=\"featuredTitle\">Total daily sales: </span>\r\n                        <span className=\"featuredTitleperoBlack\">{total} </span> */}\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetTs","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\FeaturedInfo.jsx",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],[],"﻿import { React, useEffect, useState } from 'react';\nimport \"./featuredInfo.css\";\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport axios from 'axios';\nimport WidgetLg from \"./WidgetLg\";\nimport WidgetTs from \"./WidgetTs\";\nimport WidgetMs from \"./WidgetMs\";\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { LocalizationProvider, MobileDatePicker } from '@mui/lab';\nimport { TextField } from '@mui/material';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\n\n\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n}));\n\n\n\n\nexport default function FeaturedInfo() {\n\n\n\n    const [data, setData] = useState(0);\n\n    let isSuscribe = true\n\n    useEffect(() => {\n\n        axios.get('http://localhost/Reactjs/cognate1%20api/totalorders.php')\n            // .then((response) => response.text())\n        .then((response) => {\n            if (isSuscribe){\n                setData(response.data)\n            }\n        }\n\n\n        \n        )\n\n        return () => isSuscribe = false\n    });\n\n    const [data1, newData1] = useState(0);\n\n    useEffect(() => {\n        \n        fetch('http://localhost/Reactjs/cognate1%20api/Todaysales.php')\n        .then((response) => response.text())\n            .then((response) => {\n                if (isSuscribe){\n                    newData1(response)\n                }\n            });\n\n            \n        return () => isSuscribe = false\n    });\n\n    const [data2, newData2] = useState(0);\n\n    useEffect(() => {\n        fetch('http://localhost/Reactjs/cognate1%20api/Countpending.php')\n            .then((response) => response.text())\n            .then((response) => {\n                if (isSuscribe){\n                    newData2(response)\n                }\n            }\n            );\n\n            \n        return () => isSuscribe = false\n    }, []);\n\n\n    \n\n   \n\n\n\n\n\n    return <div>\n\n\n        <Box sx={{ flexGrow: 1 }}\n            margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n\n    {/* Sales revenue */}\n           <Grid container spacing={3}>\n  \n                <Grid item xs={4}>\n\n                    <div className=\"featured\">\n                        <div className=\"featuredItem\">\n                            <span className=\"featuredTitle\">Sales Revenue</span>\n                            <div className=\"featuredMoneyContainer\">\n                                <span  className=\"featuredMoney\">\n\n                                    ₱ {parseInt(data)?.toLocaleString(undefined, {maximumFractionDigits: 2})}\n\n                                </span>\n\n\n\n\n                            </div>\n                            <span className=\"featuredSub\"></span>\n\n                        </div>\n                    </div>\n                </Grid>\n\n    {/* Daily sales */}\n                 <Grid item xs={4}>\n\n                    <div className=\"featuredItem\">\n                        <span className=\"featuredTitle\">Daily Sales</span>\n                        <div className=\"featuredMoneyContainer\">\n                            <span className=\"featuredMoney\">\n\n                                ₱ {parseInt(data1)?.toLocaleString(undefined, {maximumFractionDigits: 2})}\n\n\n\n                            </span>\n\n                        </div>\n\n                    </div>\n\n                </Grid>\n{/* \n    Pending orders */}\n                <Grid item xs={4}>\n                    <div className=\"featuredItem\">\n                        <span className=\"featuredPending\">Pending Orders</span>\n                        <div className=\"featuredMoneyContainer\">\n                            <span className=\"featuredPendingMoney\">\n\n                            ₱ {parseInt(data2)?.toLocaleString(undefined, {maximumFractionDigits: 2})}\n\n\n\n                            </span>\n\n                        </div>\n\n                    </div>\n\n                </Grid>\n              \n\n\n                     {/* Daily Sales     */}\n                <Grid item xs={6}>\n                    <div className=\"featuredItem\">\n                        <span className=\"featuredTitle\">Daily Sales</span>\n                        <WidgetTs />\n\n                    </div>\n\n                </Grid>\n           \n        {/* Monthly Sales      */}\n                <Grid item xs={6}>\n                    <div className=\"featuredItem\">\n                        <span className=\"featuredTitle\">Monthly Sales </span>\n                        \n\n                        \n                        <WidgetMs />\n\n                    </div>\n\n                </Grid>\n \n    {/* Sales Report */}\n                <Grid item xs={10}>\n                    <div className=\"featuredItem\">\n                        <span className=\"featuredTitle\">Sales Report</span>\n                        <WidgetLg />\n                 \n                    </div>\n\n           \n                </Grid>\n\n\n         \n\n</Grid>\n        </Box> \n       \n\n    </div>;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetLg.jsx",["234","235","236","237"],[],"﻿// Library components\r\n\r\nimport {\r\n    Button,\r\n    Grid,\r\n\r\n} from '@mui/material'\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport \"./featuredInfo.css\";\r\n\r\n\r\n\r\n// Icons\r\n\r\n\r\n// Routes\r\n\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\n\r\nconst Months = [ \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\r\nconst Years = [  \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"];\r\nconst Days = [ \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"];\r\n\r\nconst WidgetLg = () => {\r\n\r\n// Column header for DataGrid\r\n    const columns = [\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_ID',\r\n            headerName: 'ID',\r\n            width: 70,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_name',\r\n            headerName: 'name',\r\n            width: 200,\r\n            headerClassName: 'super-app-theme--header',\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n        },\r\n\r\n      \r\n\r\n        {\r\n            field: 'Customer_purchase',\r\n            headerName: 'product purchase',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_date',\r\n            headerName: 'date',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_total',\r\n            headerName: 'total',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_payment',\r\n            headerName: 'status',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"green\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n    ];\r\n\r\n\r\n\r\n\r\n\r\n    //Sales report of specific years and month\r\n    const [total, setTotal] = useState(\r\n\r\n    )\r\n\r\n    // Data \r\n    const [Data, set] = useState()\r\n\r\n\r\n\r\n    // // Htttp get request\r\n    useEffect(() => {\r\n        let isSuscribe = true\r\n        axios.get('http://localhost/REACTjs/cognate1%20api/CustomerdataPAID.php')\r\n            .then(res => \r\n                {\r\n                    if (isSuscribe) {\r\n                        set(res.data)   \r\n                    }\r\n                }\r\n\r\n                \r\n\r\n            )\r\n            .catch(err => console.log(err))\r\n\r\n    return () => isSuscribe = false\r\n    })\r\n\r\n\r\n    \r\n// For filtering the table bia 3 comboboxes\r\n    const filter_table = () =>{\r\n\r\n       if (Dvalue) \r\n       {\r\n        return Data?.filter(\r\n            date=>date.Customer_date\r\n            .toLowerCase()\r\n            .includes(Yvalue + \"-\" + Mvalue + \"-\" + Dvalue) )\r\n\r\n       }else{\r\n        return Data?.filter(\r\n            date=>date.Customer_date\r\n            .toLowerCase()\r\n            .includes(Yvalue + \"-\" + Mvalue ) )\r\n       }\r\n\r\n    }\r\n\r\n    // Filtering and get total\r\n    const filter_data = () => {\r\n\r\n        if (Dvalue) \r\n        {\r\n              return Data?.filter(\r\n                date=>date.Customer_date\r\n                .toLowerCase()\r\n                .includes(Yvalue + \"-\" + Mvalue + \"-\" + Dvalue))\r\n                .map(e=>e.Customer_total)\r\n                .reduce((a,b)=>a+b, 0 )\r\n        }else{\r\n            return Data?.filter(\r\n                date=>date.Customer_date\r\n                .toLowerCase()\r\n                .includes(Yvalue + \"-\" + Mvalue))\r\n                .map(e=>e.Customer_total)\r\n                .reduce((a,b)=>a+b, 0 )\r\n           }\r\n\r\n    }\r\n\r\n    const [Mvalue, setMValue] = useState(Months[0]);\r\n    const [Yvalue, setYValue] = useState(Years[2]);\r\n    const [Dvalue, setDValue] = useState(Days[0]);\r\n  \r\n\r\n  \r\n\r\n    return (\r\n\r\n\r\n\r\n        <div className=\"widgetLgTitle\">\r\n\r\n                    {/*======================================================ComboBox================================================= */}\r\n            <Grid item md={10} xs={13}>\r\n\r\n           \r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n               \r\n\r\n                    <br />\r\n\r\n                    {/* Year */}\r\n                    <Autocomplete\r\n                        name=\"searchYear\"\r\n                        value={Yvalue}\r\n                        onChange={(event, newValue) => {\r\n                            setYValue(newValue);\r\n                        }}\r\n                       \r\n                        options={Years}\r\n                        sx={{ width: 180 }}\r\n                        renderInput={(params) => <TextField {...params} label=\"Years\" />}\r\n                    />\r\n                </FormControl>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n               \r\n\r\n                    <br />\r\n\r\n                     {/* Month */}\r\n                    <Autocomplete\r\n\r\n                        name=\"searchMonth\"\r\n                        value={Mvalue}\r\n                        onChange={(event,newValue) => {\r\n                            newValue ? \r\n                            setMValue(newValue) : setMValue(\"\")\r\n                        }}\r\n\r\n                        options={Months}\r\n                        sx={{ width: 220 }}\r\n                        renderInput={(params) => <TextField {...params} label=\"Months\" />}\r\n                    />\r\n                </FormControl>\r\n\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n               \r\n\r\n               <br />\r\n\r\n                {/* Day */}\r\n               <Autocomplete\r\n\r\n                   name=\"searchDay\"\r\n                   value={Dvalue}\r\n                   onChange={(event,newValue) => {\r\n                       newValue ? \r\n                       setDValue(newValue) : setDValue(\"\")\r\n                   }}\r\n\r\n                   options={Days}\r\n                   sx={{ width: 220 }}\r\n                   renderInput={(params) => <TextField {...params} label=\"Days\" />}\r\n               />\r\n           </FormControl>\r\n\r\n             \r\n          \r\n            </Grid>\r\n\r\n\r\n            {/*======================================================ComboBox================================================= */}\r\n                    {/* Container for table */}\r\n                    <Grid item md={12}>\r\n\r\n                        {/* Para may padding */}\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                            padding={5}>\r\n\r\n\r\n    \r\n\r\n\r\n                    <Grid\r\n\r\n                                container\r\n                                style={{\r\n                                    height: 400,\r\n                                    width: 1000,\r\n                                    backgroundColor: 'lightgrey',\r\n                                    border: '2px solid black',\r\n                                    borderRadius: '30px'\r\n                                }}\r\n                            >\r\n\r\n\r\n                                {/* Data table */}\r\n                                <DataGrid\r\n                                    columns={columns}\r\n                                   getRowId={(rows) => rows.Customer_ID}\r\n                                   rows={filter_table()} // data na pinasok yung data \r\n\r\n                                    pageSize={10}\r\n                            \r\n                                />\r\n\r\n                            </Grid>\r\n\r\n                           \r\n\r\n\r\n                        </Grid>\r\n                        <span className=\"featuredTitle\">Total sales: </span>\r\n                        <span className=\"featuredTitleperoBlack\">{filter_data()?.toLocaleString(undefined, {maximumFractionDigits: 2})} </span>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n\r\n\r\n\r\n         \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default WidgetLg","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\dummyData.js",[],[],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\chart\\area.rechart.js",["238"],[],"// src/components/area.rechart.js\r\n\r\nimport React from \"react\";\r\nimport { AreaChart,\r\n    Area, \r\n    YAxis,\r\n    XAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n} from 'recharts';\r\n\r\nimport { dataAB  } from \"../../../dummyData\";\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(5),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n}));\r\n\r\nclass AreaRechartComponent extends React.Component {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={3}>\r\n\r\n                    <Grid item xs>\r\n            <AreaChart width={630} height={220} data={dataAB}\r\n\r\n                margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\r\n                \r\n                <defs>\r\n                   \r\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                        <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n                    </linearGradient>\r\n                    <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n                        <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n                    </linearGradient>\r\n                </defs>\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Area type=\"monotone\" dataKey=\"Product A\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                <Area type=\"monotone\" dataKey=\"Procuct B\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\r\n                        </AreaChart>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n\r\n        )\r\n    };\r\n}\r\n\r\nexport default AreaRechartComponent;","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\widget\\WidgetMs.jsx",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],[],"﻿// Library components\r\n\r\nimport {\r\n    Grid,\r\n    InputAdornment,\r\n    Typography,\r\n    Fab,\r\n    IconButton,\r\n    Collapse,\r\n    Button,\r\n    FormControlLabel,\r\n    Switch,\r\n    Box,\r\n    Alert,\r\n    RadioGroup,\r\n    Radio,\r\n    Select,\r\n    Chip,\r\n    MenuItem,\r\n    Checkbox,\r\n    ListItemText,\r\n} from '@mui/material'\r\nimport { CTextField } from '../products/Products'\r\nimport { CcTextField } from '../Stocks';\r\nimport React, { useEffect, useState } from 'react'\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\n\r\n// Icons\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport moment from 'moment'\r\n\r\n// Routes\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\n\r\nimport LOGO from '../../icons/user.png'\r\nimport { LocalizationProvider, MobileDatePicker } from '@mui/lab';\r\n\r\n\r\n\r\nconst Invoice = () => {\r\n    // Navigation\r\n    let NavS = useNavigate();\r\n\r\n\r\n    // Column header\r\n    const columns = [\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_ID',\r\n            headerName: 'ID',\r\n            width: 70,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        // ID Column\r\n        {\r\n            field: 'Customer_name',\r\n            headerName: 'name',\r\n            width: 200,\r\n            headerClassName: 'super-app-theme--header',\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n        },\r\n\r\n      \r\n\r\n        {\r\n            field: 'Customer_purchase',\r\n            headerName: 'product purchase',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_date',\r\n            headerName: 'date',\r\n            width: 150,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_total',\r\n            headerName: 'total',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"black\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n        {\r\n            field: 'Customer_payment',\r\n            headerName: 'status',\r\n            width: 130,\r\n            headerAlign: 'center',\r\n\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            color: \"green\",\r\n                            fontSize: 18,\r\n                            width: \"100%\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    >\r\n                        {cellValues.value}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n\r\n    ];\r\n\r\n    // Data \r\n    const [Data, set] = useState()\r\n\r\n\r\n    // // Htttp get request\r\n    useEffect(() => {\r\n        let isApiSubscribed = true\r\n        axios.get('http://localhost/REACTjs/cognate1%20api/Dashmonth.php')\r\n            .then(res => {\r\n                if (isApiSubscribed)\r\n                {\r\n                   \r\n                    set(res.data) \r\n                    // console.log(res.data)\r\n                }\r\n\r\n            }\r\n            )\r\n            .catch(err => console.log(err))\r\n\r\n            return () => {\r\n                // cancel the subscription\r\n                isApiSubscribed = false\r\n              };\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"widgetLgTitle\">\r\n         \r\n                    {/* Conatainer button */}\r\n                    <Grid item md={3} xs={12}>\r\n\r\n                        {/* Container para may padding */}\r\n                        <Grid\r\n                            container\r\n                            padding={5}\r\n                            direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\">\r\n\r\n                            {/* Button add */}\r\n                          \r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                    {/* Container for table */}\r\n                    <Grid item md={12}>\r\n\r\n                        {/* Para may padding */}\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                            padding={5}>\r\n\r\n\r\n                    {/* pang size at background color */}\r\n\r\n\r\n\r\n                    <Grid\r\n\r\n                                container\r\n                                style={{\r\n                                    height: 400,\r\n                                    width: 1000,\r\n                                    backgroundColor: 'lightgrey',\r\n                                    border: '2px solid black',\r\n                                    borderRadius: '30px'\r\n                                }}\r\n                            >\r\n\r\n\r\n                                {/* Data table */}\r\n                                <DataGrid\r\n                                    columns={columns}\r\n                                    getRowId={(rows) => rows.Customer_ID}\r\n                                    rows={Data} // data na pinasok yung data \r\n\r\n                                    pageSize={10}\r\n                            \r\n                                />\r\n\r\n                            </Grid>\r\n\r\n\r\n                        </Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Invoice","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Verification_code.js",["269","270","271","272"],[],"import React, { useEffect, useState,useContext } from 'react'\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { Typography } from '@mui/material';\r\nimport Alert from '@mui/material/Alert';\r\nimport axios from 'axios';\r\nimport { UserContext } from './App';\r\nimport {  useNavigate } from 'react-router-dom';\r\n\r\nconst Verification_code = () => {\r\n\r\nconst [disable,setDisbale] =  useState(false)\r\nconst [text,setText] = useState(\"\")\r\nconst [number, setNumber] = useState(0)\r\nuseEffect(\r\n  () => \r\n  { \r\n   const interval = setInterval(()=>{\r\n\r\n    if (number !== 0) \r\n    {\r\n      setNumber(number - 1)\r\n    }else{\r\n      setDisbale(false)\r\n    }\r\n    },1000)\r\n\r\n\r\n    return () => \r\n    {\r\n      clearInterval(interval)\r\n    }\r\n\r\n  }\r\n\r\n  )\r\n  const [a,setA] = useState(\"\")\r\n  // Update code\r\n  const update_code = (data) =>{\r\n\r\n    axios.post('http://localhost/REACTJS/cognate1%20api/update_code.php', { \"code\" : data})\r\n    .then(res=>\r\n      {\r\n        console.log(res.data) \r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  // Send verication code\r\n  const sending_code = e => {\r\n    e.preventDefault()\r\n        axios.get('http://localhost:3001/Authentication')\r\n        .then(res=>update_code(res.data.code))\r\n\r\n    setNumber(90)\r\n    setDisbale(true)\r\n    setText(\"Please submit the verification code again because it has expired.\")\r\n    setInput_code(\"\")\r\n  }\r\n\r\n\r\n// Verify input code\r\nlet NavS = useNavigate();\r\nconst [err,setErr] = useState(false)\r\nconst [input_code,setInput_code] = useState(\"\")\r\nconst {setUser } = useContext(UserContext);\r\n  const verifiy_inputcode = e => {\r\n    e.preventDefault()\r\n\r\n    axios.post('http://localhost/REACTJS/cognate1%20api/code.php', { \"code\" : input_code})\r\n    .then(res=>\r\n      {\r\n        setErr(!res.data[0].Result)\r\n        setUser({loggedIn: res.data[0].Result})\r\n        if (res.data[0].Result) {NavS(\"/Mainpage\")}\r\n      }\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      \r\n      <Dialog open={true} >\r\n        <DialogTitle>High Resolution</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n          To submit verification to your account, please click the send button and enter the verification code in the textbox.\r\n          </DialogContentText>\r\n\r\n          {/* Input code fiels */}\r\n          <TextField\r\n            autoFocus\r\n            margin=\"normal\"\r\n            id=\"name\"\r\n            label=\"Authentrication Code\"\r\n            type=\"number\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value = {input_code}\r\n            onChange={e=>setInput_code(e.target.value)}\r\n            error = {err}\r\n            helperText = {err? \"Invalid Text\" : \"\"}\r\n          />\r\n\r\n          <DialogContentText paddingY={1}>\r\n            {disable === true && \"verification code expired in \" + number + \".\"}\r\n            {disable === false && text}\r\n          </DialogContentText>\r\n\r\n             {/*send code  */}\r\n          <Button \r\n          disabled={disable} \r\n          variant='outlined' \r\n          onClick={sending_code}>send code</Button> \r\n      \r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          {/* Submit verification code */}\r\n          <Button disabled={!disable}  onClick={verifiy_inputcode}>Submit</Button>\r\n\r\n          {/* Cancel verification code */}\r\n          <Button  onClick={e=>\r\n          {\r\n            e.preventDefault()\r\n            setText(\"\") \r\n          }\r\n            }>Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Verification_code","D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\Authenticate_code.jsx",[],[],"D:\\Art Lisboa Files\\React files\\cognate1.10\\src\\pages\\Components\\Stocks.jsx",["273","274","275","276"],[],"import { Alert, Autocomplete,OutlinedInput , Avatar, Button, Collapse, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, Grid, IconButton, InputAdornment, MenuItem, Select, Stack, TextField, Toolbar, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CTextField } from './products/Products'\r\n\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport ModeEditOutlinedIcon from '@mui/icons-material/ModeEditOutlined';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\nimport axios from 'axios'\r\nimport styled from '@emotion/styled'\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n// Custom TextField\r\nexport const CcTextField = styled(TextField)({\r\n  '& .MuiInputBase-input': {\r\n\r\n    position: 'relative',\r\n    fontSize: 20,\r\n    padding: '12px',\r\n\r\n  },\r\n  \"label\":{\r\n    color: \"#000000\"\r\n\r\n  },\r\n  \"& .MuiOutlinedInput-root.Mui-disabled\": {\r\n    \"&  fieldset\": {\r\n      \r\n      borderColor: \"#FFFFFF\",\r\n      \r\n    },\r\n    \"& text\": {\r\n      color: \"#000000\"\r\n    }\r\n\r\n  },\r\n  \"& label.Mui-focused\": {\r\n    color: \"#9B3C21\"\r\n  },\r\n\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      border: \"2px solid #000000\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n\r\n      border: \"2px solid #9B3C21\"\r\n    }\r\n  }\r\n});\r\n\r\n\r\n//MAIN FUNCTION\r\nconst Stocks = () => {\r\n\r\n\r\n//Consta for table\r\nconst [list_data, setList_data] = useState(true)\r\n\r\n// Columns\r\nconst columns = [\r\n\r\n  // ID Column\r\n  { field: 'Product_ID', \r\n    headerName: 'ID', \r\n    width: 70 ,\r\n    headerAlign: 'center',\r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n\r\n  // Product Name\r\n  { field: 'Product_name', \r\n    headerName: 'Product_name', \r\n    width: 300,\r\n    headerClassName: 'super-app-theme--header',\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n        style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n  },\r\n\r\n  { field: 'Product_stocks', \r\n  headerName: 'stocks ', \r\n  width: 130,\r\n  headerAlign: 'center', \r\n\r\n  renderCell: (cellValues) => {\r\n    return (\r\n    <div\r\n    style={{\r\n      color: \"black\",\r\n      fontSize: 18,\r\n      width: \"100%\",\r\n      textAlign: \"center\"\r\n      }}\r\n    >\r\n      {cellValues.value}\r\n      </div>\r\n      );\r\n  }\r\n},\r\n    // Edit\r\n    {\r\n      field: 'action',\r\n      headerName: 'Action',\r\n      width: 125,\r\n      headerAlign: 'center', \r\n      renderCell: () => {\r\n        return (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              textAlign: \"center\",\r\n              // marginRight: '2'\r\n            }}\r\n          >\r\n           \r\n          <IconButton \r\n          color=\"primary\" \r\n          aria-label=\"edit\">\r\n              <ModeEditOutlinedIcon/>\r\n          </IconButton>\r\n           \r\n  \r\n          </div>\r\n\r\n\r\n        );\r\n      }\r\n    }\r\n];\r\n\r\n\r\n \r\n//Data\r\nconst [Data,setData] = useState()\r\n\r\n//search data variable\r\nconst [search,setSearch] = useState(\"\") \r\n\r\n\r\n// Filtering data \r\nconst filtered = !search ? \r\nData \r\n: Data?.filter((person) => \r\n    person.Product_name.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n\r\n  //JSON DATA\r\nconst [productData,setProductData] = useState( \r\n  {\r\n  \"Product_ID\": 0,\r\n  \"Product_image\": \"\",\r\n  \"Product_name\": \"\" ,\r\n  \"Product_category\": \"\",\r\n  \"Product_stocks\": 0,\r\n  \"Product_price\": 0,\r\n  \"Product_Status\" : \"\"\r\n})\r\n\r\nconst [setTrue, setSetTrue] = useState(true)\r\nconst [list_stocks,setList_stocks] = useState()\r\nconst [show_dia,setShow_dia] =  useState(false)\r\n\r\nconst [cancel_api,setCancelApi] = useState(true)\r\n// http request api\r\n  useEffect(() => {\r\n    let api = true\r\n      axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n    .then(res=>\r\n      {\r\n        if (cancel_api)\r\n        {\r\n\r\n          console.log(res.data)\r\n      \r\n        setData(res.data)\r\n        if (setTrue)\r\n        {\r\n          // console.log(\"run\")\r\n          if ([...res.data]?.filter(e=>e.Product_stocks <= 0).length === 0){\r\n            setShow_dia(false)\r\n          }else{\r\n            setList_stocks([...res.data]?.filter(e=>e.Product_stocks <= 0).map(e=>e.Product_name))\r\n            setShow_dia(true)\r\n  \r\n          }\r\n        }\r\n      }\r\n      }\r\n      )\r\n    .catch(err=>console.log(err)) \r\n\r\n    return () => setCancelApi(false)\r\n })\r\n\r\nconst [choice,setChoice] = useState([])\r\n\r\nconst [cancelcat,setCancelcat] = useState(false)\r\n\r\n useEffect(() => {\r\n\r\n\r\n  axios.get(\"http://localhost/REACTJS/cognate1%20api/category.php\")\r\n  .then(res=>{\r\n    if (cancelcat)\r\n    {\r\n      setChoice(res.data?.map(e=>e.category))\r\n    }\r\n  }\r\n  )\r\n\r\n  return () => setCancelcat(false)\r\n  \r\n});\r\n\r\n//  Update button\r\n const update = () =>{\r\n  setLogin({...login, \r\n    password: \"\"})\r\n   axios.put('http://localhost/REACTJS/cognate1%20api/Update_ProductdataAPI.php',productData)\r\n   .then(res=>{\r\n\r\n    setList_data(res.data[0].Result)\r\n    setShow(res.data[0].Result)\r\n    setErRor(res.data[0].Result)\r\n    setDialog(false)\r\n    setCancelApi(true)\r\n    setCancelcat(false)  \r\n   })\r\n\r\n}\r\n\r\nconst [show,setShow] = useState(false)\r\nconst [erRor,setErRor] = useState()\r\n\r\n// Password\r\nconst [errors,setErrors] = useState(true)\r\n\r\n// Show message Dialog\r\nconst [dialog,setDialog] = useState(false)\r\n\r\n// Set data\r\nconst [login,setLogin] = useState({\r\n  \"email\": \"\",\r\n  \"password\" : \"\",\r\n  \"sec1\": null,\r\n  \"sec2\": null\r\n})\r\n\r\n  // Set verification\r\n  const veri_password = e => {\r\n   \r\n    e.preventDefault()\r\n\r\n\r\n\r\n    axios.post('http://localhost/REACTJS/cognate1%20api/LoginAPI.php', login)\r\n    .then(res=>\r\n      {\r\n   \r\n        res.data[0].Result ? update() : setErrors(res.data[0].Result) \r\n        setErrors(res.data[0].Result)\r\n\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  // set email\r\nconst setemail = e => {\r\n  \r\n  axios.get('http://localhost/REACTJS/cognate1%20api/View_LoginAPI.php')\r\n  .then(res=>\r\n    {\r\n      setLogin({...login, email: res.data[0].email})\r\n     \r\n    }\r\n  )\r\n}\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n\r\n{/* Restock notification!*/}\r\n\r\n<Dialog\r\n        open={show_dia}\r\n      >\r\n        {/* Dialog Tittle */}\r\n      <DialogTitle>\r\n      Please restock of the follwing!\r\n      </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n              {\"Product: \" + list_stocks}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n          <Button onClick={()=>{\r\n            setSetTrue(false)\r\n            setShow_dia(false)\r\n          }} autoFocus>\r\n            Okay\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n<Dialog\r\n  open={dialog}\r\n  >\r\n\r\n{/* Dialog Tittle */}\r\n      <DialogTitle>\r\n        <Typography variant='h5'>\r\n                    High Resolution\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n{/* Dialog Content */}\r\n      <DialogContent>\r\n\r\n        <Typography variant='body1'>\r\n         Please review of the following: \r\n        </Typography>\r\n\r\n    {/* Confirm Textbox */}\r\n\r\n\r\n         {/* Textfield product name */}\r\n         <CcTextField\r\n         size='small'\r\n         margin='normal'\r\n          fullWidth \r\n          value={productData.Product_name}\r\n          onChange={e => setProductData({...productData,Product_name: e.target.value })}\r\n         />\r\n\r\n        {/* Textfield Product category */}\r\n          <CcTextField \r\n          size='small'\r\n         margin='normal'\r\n          fullWidth \r\n          value={productData.Product_category}\r\n         onChange={e=> {setProductData({...productData, Product_category: e.target.value})}}\r\n          />\r\n\r\n\r\n          {/* Textfield Product stocks */}\r\n          <CcTextField\r\n         size='small'\r\n         margin='normal'\r\n          type='number' \r\n          fullWidth \r\n\r\n          value={\r\n            productData.Product_stocks\r\n          }\r\n          onChange={e => setProductData({...productData, Product_stocks: parseInt(e.target.value) })}\r\n          \r\n          \r\n          />\r\n\r\n          {/* Textfield Product price */}\r\n          <CcTextField \r\n         size='small'\r\n         margin='normal'\r\n          type='number' \r\n          fullWidth \r\n\r\n          \r\n          value={\r\n            productData.Product_price \r\n          }\r\n\r\n          onChange={e => setProductData({...productData, Product_price: parseInt(e.target.value) })}\r\n\r\n          />\r\n\r\n          {/* Textfield Product price */}\r\n          <CcTextField \r\n         size='small'\r\n         margin='normal'\r\n          type='text' \r\n          fullWidth \r\n\r\n          \r\n          value={\r\n            productData.Product_Status\r\n          }\r\n\r\n          onChange={e => setProductData({...productData, Product_Status: String(e.target.value) })}\r\n\r\n          />\r\n\r\n\r\n\r\n        <TextField \r\n  \r\n        error={!errors ? true : false }\r\n        helperText={!errors ? \"Password are incorrect\" : \"\"}\r\n        fullWidth \r\n        label='Password'\r\n        type='password' \r\n        placeholder='Please input your password ' \r\n        variant=\"outlined\" \r\n        margin=\"normal\"\r\n        value = {login.password}\r\n        onChange = {e => setLogin({...login, password: e.target.value})}\r\n        />    \r\n                \r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n          <Button \r\n          onClick={veri_password} \r\n          autoFocus >Okay</Button>\r\n\r\n          <Button \r\n         onClick={()=>{\r\n          setDialog(false)\r\n          setErrors(true)\r\n          setLogin({email: \"\", \r\n          password: \"\"})\r\n\r\n         }}\r\n           \r\n\r\n          //   setOpenDialog(false)\r\n          //   setErrors(true)}}\r\n             >\r\n                    Cancel\r\n                </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n\r\n      <Grid>\r\n\r\n{/* Alert Success */}\r\n      <Collapse in={show}>\r\n          <Alert  severity=\"success\"\r\n          onClose={()=>setShow(false)}\r\n          >\r\n            Data has been added\r\n          </Alert>\r\n        </Collapse>\r\n\r\n{/* Alert Error */}\r\n        <Collapse in={erRor ? false : true}>\r\n\r\n        <Alert severity=\"error\"\r\n        onClose={()=>setErRor(true)}> \r\n            please fill out the empty input products \r\n          </Alert>\r\n\r\n        </Collapse>\r\n\r\n        {/* Stocks */}\r\n        <Grid container item xs={12} md={10}>\r\n                <Typography variant='h3' marginY={2} marginLeft={2}> Stocks</Typography>\r\n            </Grid>\r\n\r\n\r\n        {/* Search bar */}\r\n        <Grid item md={12} padding={2}>\r\n\r\n\r\n          <Grid\r\n\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          style={{\r\n            backgroundColor:'white',\r\n            border: '2px solid black',\r\n            borderRadius: '5px'\r\n          }}\r\n          padding={2}>\r\n\r\n\r\n         {/* Search bar */}\r\n          <CTextField \r\n          fullWidth \r\n          value = {search} \r\n          onChange={e =>{ \r\n            setList_data(true)\r\n            setSearch(e.target.value)}}  \r\n          placeholder='Search by product name' \r\n          variant='standard'\r\n          margin='normal'\r\n          disabled={ !Data ? true : false}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">\r\n      \r\n                <SearchOutlinedIcon fontSize='large' />\r\n             \r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          onClick={e=>\r\n            {\r\n              e.preventDefault();\r\n             setList_data(true)       \r\n            }}\r\n             \r\n          />\r\n\r\n             {/* Button bar */}\r\n            <Button variant='contained'\r\n            disabled={Data ? false : true}\r\n            onClick={e=>\r\n            {\r\n              e.preventDefault();\r\n              list_data ? setList_data(false) : setList_data(true)  \r\n              setCancelApi(true)\r\n              setCancelcat(false)    \r\n            }}> {!list_data ? \"Show Data List\" : \"Show edit product\"}</Button>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      \r\n{/* Datable container */}\r\n      <Grid item md={12} padding={2}>\r\n\r\n      <Collapse in={list_data}> {/* Pang collapse */}\r\n        \r\n        <Grid\r\n        container\r\n\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      \r\n        padding={2}>\r\n\r\n          <Box\r\n          sx={{\r\n            backgroundColor:'white',\r\n            border:'2px solid #9B3C21',\r\n            borderRadius: 2,\r\n            height: 550,\r\n            width: 500,\r\n          }}\r\n         >\r\n          \r\n\r\n{/* DATA GRID TABLE */}\r\n            <DataGrid\r\n              columns={columns}\r\n              \r\n              rows={filtered} // data na pinasok yung data \r\n              getRowId={(rows4)=> rows4.Product_ID}\r\n              pageSize={10}\r\n\r\n              onCellClick={\r\n                (param)=>{\r\n                  if (param.field === \"action\"){\r\n                    \r\n                   // setProductData({...productData, Product_ID: parseInt(param.id)})\r\n                    setProductData({\r\n                      // Product ID\r\n                      Product_ID: parseInt(param.id),\r\n\r\n                      // Product Image\r\n                      Product_image: String(Data?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_image)),\r\n\r\n                      // Product Name\r\n                      Product_name: String(filtered?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_name)),\r\n\r\n                      // Product Category\r\n                      Product_category: String(filtered?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_category)),\r\n\r\n                      // Product Stocks\r\n                      Product_stocks: parseInt(filtered?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_stocks)),\r\n\r\n                      \r\n                      // Product Price\r\n                      Product_price:  parseInt(filtered?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_price)),\r\n\r\n                      // Product Status\r\n                      Product_Status:  String(filtered?.filter(index=>index.Product_ID === param.id)\r\n                      .map(ge=>ge.Product_Status)),\r\n\r\n\r\n                    })\r\n                    setemail()\r\n                    setList_data(false) \r\n                    setCancelApi(false)\r\n                    setCancelcat(true)\r\n                  }\r\n                }       \r\n              }\r\n\r\n            />\r\n\r\n            \r\n          </Box>\r\n           \r\n        </Grid>\r\n      </Collapse> \r\n    \r\n    </Grid>\r\n\r\n   <Collapse in={list_data ? false : true}>\r\n\r\n    <Grid item md={12} padding={2}>\r\n\r\n      <Grid\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n      padding={2}\r\n      style={{\r\n        backgroundColor:'white',\r\n        border:'2px solid black'\r\n      }}>\r\n\r\n         {/* Upload Image */}\r\n         <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  padding={2}\r\n                  spacing={2}\r\n                >\r\n\r\n                  <Grid item>\r\n\r\n                    {/* IMAGE */}\r\n                    <Avatar\r\n                      \r\n                      src={productData.Product_image}\r\n                      sx={{ width: 200, height: 200 , border: '2px solid black'}}\r\n                    />\r\n                  </Grid>\r\n         \r\n                  <Grid item>\r\n                      <CcTextField  \r\n                      type='file' \r\n                      // value={create.Product_image}\r\n                      onChange={e=>{\r\n                        let fileReader = new FileReader();\r\n                        fileReader.readAsDataURL(e.target.files[0]);\r\n                      \r\n                        fileReader.onload = (event) => {\r\n                        \r\n                          setProductData({...productData, Product_image: event.target.result})\r\n                           }\r\n                      }}\r\n                      \r\n\r\n\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <EditIcon/>\r\n    \r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      \r\n                      />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n\r\n{/* Container Product name */}\r\n        <Grid item md={6} xs={12} >\r\n          \r\n          {/* Label product name */}\r\n          <Typography variant='h6' margin={1}>Product name</Typography>\r\n\r\n         {/* Textfield product name */}\r\n          <CcTextField\r\n          fullWidth \r\n          value={productData.Product_name}\r\n          onChange={e => setProductData({...productData,Product_name: e.target.value })}\r\n         />\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n{/* Container Product Category */}\r\n        <Grid item md={6} xs={12}>\r\n         \r\n        {/* Label product Category */}\r\n          <Typography variant='h6' margin={1}>Product Category</Typography>\r\n\r\n        {/* Textfield Product category */}\r\n          {/* <CcTextField \r\n          fullWidth \r\n          value={productData.Product_category}\r\n         onChange={e=> {setProductData({...productData, Product_category: e.target.value})}}\r\n          /> */}\r\n\r\n<Autocomplete\r\n        \r\n        freeSolo\r\n        disablePortal\r\n        \r\n        options={choice}\r\n        value = {productData.Product_category}\r\n        onChange = {(e, value) => setProductData({...productData, Product_category: value})}\r\n\r\n        // onChange={(event, value) => setCategory(value)}\r\n        sx={{\r\n          width: 400\r\n        }}\r\n        renderInput={\r\n          (params) =>\r\n\r\n          // Textfield\r\n          <CcTextField\r\n          {...params}\r\n          fullWidth\r\n          value = {productData.Product_category}\r\n          onChange={e=> {setProductData({...productData, Product_category: e.target.value})}}\r\n\r\n          type='text' \r\n          placeholder='Input product category'\r\n          variant=\"outlined\" \r\n          margin=\"normal\"/>} \r\n          onClick={()=>setemail()}\r\n          /> \r\n\r\n    \r\n        </Grid>\r\n\r\n{/* Container Product stocks */}\r\n        <Grid item md={6} xs={12}>\r\n\r\n          {/* Label product name */}\r\n          <Typography variant='h6' margin={1}>Product Stocks</Typography>\r\n\r\n          {/* Textfield Product stocks */}\r\n          <CcTextField \r\n          type='number' \r\n          fullWidth \r\n\r\n          value={\r\n            productData.Product_stocks\r\n          }\r\n          onChange={e => setProductData({...productData, Product_stocks: parseInt(e.target.value) })}\r\n          \r\n          \r\n          />\r\n\r\n        </Grid>\r\n\r\n{/* Container Product price */}\r\n        <Grid item md={6} xs={12}>\r\n\r\n          {/* Label product name */}\r\n          <Typography variant='h6' margin={1}>Product Price</Typography>\r\n\r\n          {/* Textfield Product price */}\r\n          <CcTextField \r\n          type='number' \r\n          fullWidth \r\n\r\n          \r\n          value={\r\n            productData.Product_price \r\n          }\r\n\r\n          onChange={e => setProductData({...productData, Product_price: parseInt(e.target.value) })}\r\n\r\n          />\r\n\r\n        </Grid>\r\n        \r\n{/* Container Product Status */}\r\n<Grid item md={12} xs={12}>\r\n   \r\n           <Typography variant='h6' margin={1}>Product Status</Typography>\r\n \r\n \r\n        <Select\r\n\r\n          fullWidth\r\n          value={productData.Product_Status}\r\n          onChange={e=> {setProductData({...productData, Product_Status: e.target.value})}}\r\n          input={<OutlinedInput label=\"Name\" />}\r\n          MenuProps={MenuProps}\r\n          sx={{\r\n            width: 400\r\n          }}\r\n        >\r\n          <MenuItem\r\n              // key={name}\r\n              value=\"Available\"\r\n\r\n            >\r\n              Available\r\n            </MenuItem>\r\n            <MenuItem\r\n              // key={name}\r\n              value=\"Not Available\"\r\n\r\n            >\r\n              Not Available\r\n            </MenuItem>\r\n  \r\n            \r\n        </Select>\r\n     \r\n         </Grid>\r\n\r\n{/* UPDATE BUTTON */}\r\n        <Grid item>\r\n          <Button variant='contained' \r\n          onClick={()=>setDialog(true)}\r\n          \r\n          > Update</Button>\r\n        </Grid >\r\n\r\n        \r\n\r\n\r\n      </Grid>\r\n     \r\n      \r\n    </Grid>\r\n\r\n   \r\n         \r\n    </Collapse>\r\n    \r\n\r\n  </Grid>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stocks",{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":11,"column":42,"nodeType":"283","messageId":"284","endLine":11,"endColumn":53},{"ruleId":"281","severity":1,"message":"285","line":11,"column":55,"nodeType":"283","messageId":"284","endLine":11,"endColumn":66},{"ruleId":"281","severity":1,"message":"286","line":21,"column":8,"nodeType":"283","messageId":"284","endLine":21,"endColumn":19},{"ruleId":"281","severity":1,"message":"287","line":44,"column":7,"nodeType":"283","messageId":"284","endLine":44,"endColumn":13},{"ruleId":"288","severity":1,"message":"289","line":65,"column":50,"nodeType":"290","messageId":"291","endLine":65,"endColumn":68},{"ruleId":"288","severity":1,"message":"292","line":69,"column":27,"nodeType":"290","messageId":"291","endLine":69,"endColumn":48},{"ruleId":"288","severity":1,"message":"293","line":70,"column":52,"nodeType":"290","messageId":"291","endLine":70,"endColumn":72},{"ruleId":"288","severity":1,"message":"294","line":80,"column":73,"nodeType":"290","messageId":"291","endLine":80,"endColumn":84},{"ruleId":"288","severity":1,"message":"295","line":81,"column":77,"nodeType":"290","messageId":"291","endLine":81,"endColumn":92},{"ruleId":"288","severity":1,"message":"296","line":84,"column":72,"nodeType":"290","messageId":"291","endLine":84,"endColumn":83},{"ruleId":"288","severity":1,"message":"297","line":85,"column":73,"nodeType":"290","messageId":"291","endLine":85,"endColumn":85},{"ruleId":"288","severity":1,"message":"298","line":86,"column":74,"nodeType":"290","messageId":"291","endLine":86,"endColumn":87},{"ruleId":"288","severity":1,"message":"299","line":87,"column":74,"nodeType":"290","messageId":"291","endLine":87,"endColumn":87},{"ruleId":"288","severity":1,"message":"300","line":88,"column":64,"nodeType":"290","messageId":"291","endLine":88,"endColumn":79},{"ruleId":"281","severity":1,"message":"301","line":2,"column":93,"nodeType":"283","messageId":"284","endLine":2,"endColumn":104},{"ruleId":"281","severity":1,"message":"302","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":13},{"ruleId":"281","severity":1,"message":"303","line":33,"column":10,"nodeType":"283","messageId":"284","endLine":33,"endColumn":31},{"ruleId":"281","severity":1,"message":"304","line":91,"column":12,"nodeType":"283","messageId":"284","endLine":91,"endColumn":18},{"ruleId":"281","severity":1,"message":"305","line":91,"column":19,"nodeType":"283","messageId":"284","endLine":91,"endColumn":28},{"ruleId":"281","severity":1,"message":"306","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":12},{"ruleId":"281","severity":1,"message":"307","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":16},{"ruleId":"281","severity":1,"message":"308","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":19},{"ruleId":"281","severity":1,"message":"309","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":16},{"ruleId":"281","severity":1,"message":"310","line":15,"column":7,"nodeType":"283","messageId":"284","endLine":15,"endColumn":11},{"ruleId":"281","severity":1,"message":"311","line":13,"column":3,"nodeType":"283","messageId":"284","endLine":13,"endColumn":17},{"ruleId":"281","severity":1,"message":"312","line":23,"column":28,"nodeType":"283","messageId":"284","endLine":23,"endColumn":34},{"ruleId":"281","severity":1,"message":"313","line":74,"column":8,"nodeType":"283","messageId":"284","endLine":74,"endColumn":12},{"ruleId":"281","severity":1,"message":"314","line":74,"column":13,"nodeType":"283","messageId":"284","endLine":74,"endColumn":20},{"ruleId":"281","severity":1,"message":"315","line":57,"column":8,"nodeType":"283","messageId":"284","endLine":57,"endColumn":16},{"ruleId":"281","severity":1,"message":"316","line":57,"column":18,"nodeType":"283","messageId":"284","endLine":57,"endColumn":29},{"ruleId":"281","severity":1,"message":"317","line":16,"column":3,"nodeType":"283","messageId":"284","endLine":16,"endColumn":12},{"ruleId":"281","severity":1,"message":"318","line":18,"column":3,"nodeType":"283","messageId":"284","endLine":18,"endColumn":18},{"ruleId":"281","severity":1,"message":"319","line":39,"column":10,"nodeType":"283","messageId":"284","endLine":39,"endColumn":21},{"ruleId":"281","severity":1,"message":"320","line":57,"column":7,"nodeType":"283","messageId":"284","endLine":57,"endColumn":14},{"ruleId":"281","severity":1,"message":"315","line":70,"column":8,"nodeType":"283","messageId":"284","endLine":70,"endColumn":16},{"ruleId":"281","severity":1,"message":"316","line":70,"column":18,"nodeType":"283","messageId":"284","endLine":70,"endColumn":29},{"ruleId":"281","severity":1,"message":"302","line":1,"column":32,"nodeType":"283","messageId":"284","endLine":1,"endColumn":35},{"ruleId":"281","severity":1,"message":"321","line":1,"column":108,"nodeType":"283","messageId":"284","endLine":1,"endColumn":114},{"ruleId":"277","replacedBy":"322"},{"ruleId":"279","replacedBy":"323"},{"ruleId":"281","severity":1,"message":"324","line":326,"column":8,"nodeType":"283","messageId":"284","endLine":326,"endColumn":18},{"ruleId":"281","severity":1,"message":"325","line":326,"column":19,"nodeType":"283","messageId":"284","endLine":326,"endColumn":32},{"ruleId":"281","severity":1,"message":"326","line":35,"column":10,"nodeType":"283","messageId":"284","endLine":35,"endColumn":39},{"ruleId":"281","severity":1,"message":"327","line":43,"column":5,"nodeType":"283","messageId":"284","endLine":43,"endColumn":19},{"ruleId":"281","severity":1,"message":"328","line":260,"column":10,"nodeType":"283","messageId":"284","endLine":260,"endColumn":16},{"ruleId":"281","severity":1,"message":"328","line":281,"column":8,"nodeType":"283","messageId":"284","endLine":281,"endColumn":14},{"ruleId":"281","severity":1,"message":"327","line":42,"column":5,"nodeType":"283","messageId":"284","endLine":42,"endColumn":19},{"ruleId":"281","severity":1,"message":"329","line":50,"column":9,"nodeType":"283","messageId":"284","endLine":50,"endColumn":18},{"ruleId":"281","severity":1,"message":"328","line":270,"column":10,"nodeType":"283","messageId":"284","endLine":270,"endColumn":16},{"ruleId":"281","severity":1,"message":"330","line":30,"column":8,"nodeType":"283","messageId":"284","endLine":30,"endColumn":15},{"ruleId":"281","severity":1,"message":"324","line":326,"column":8,"nodeType":"283","messageId":"284","endLine":326,"endColumn":18},{"ruleId":"281","severity":1,"message":"325","line":326,"column":19,"nodeType":"283","messageId":"284","endLine":326,"endColumn":32},{"ruleId":"281","severity":1,"message":"310","line":20,"column":7,"nodeType":"283","messageId":"284","endLine":20,"endColumn":11},{"ruleId":"331","severity":1,"message":"332","line":1,"column":1,"nodeType":"333","messageId":"334","fix":"335"},{"ruleId":"281","severity":1,"message":"336","line":4,"column":11,"nodeType":"283","messageId":"284","endLine":4,"endColumn":21},{"ruleId":"281","severity":1,"message":"337","line":167,"column":12,"nodeType":"283","messageId":"284","endLine":167,"endColumn":17},{"ruleId":"331","severity":1,"message":"332","line":1,"column":1,"nodeType":"333","messageId":"334","fix":"338"},{"ruleId":"281","severity":1,"message":"339","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":23},{"ruleId":"281","severity":1,"message":"340","line":12,"column":8,"nodeType":"283","messageId":"284","endLine":12,"endColumn":18},{"ruleId":"281","severity":1,"message":"341","line":13,"column":8,"nodeType":"283","messageId":"284","endLine":13,"endColumn":16},{"ruleId":"281","severity":1,"message":"342","line":14,"column":8,"nodeType":"283","messageId":"284","endLine":14,"endColumn":21},{"ruleId":"281","severity":1,"message":"343","line":15,"column":8,"nodeType":"283","messageId":"284","endLine":15,"endColumn":19},{"ruleId":"281","severity":1,"message":"344","line":16,"column":8,"nodeType":"283","messageId":"284","endLine":16,"endColumn":14},{"ruleId":"281","severity":1,"message":"345","line":17,"column":10,"nodeType":"283","messageId":"284","endLine":17,"endColumn":30},{"ruleId":"281","severity":1,"message":"346","line":17,"column":32,"nodeType":"283","messageId":"284","endLine":17,"endColumn":48},{"ruleId":"281","severity":1,"message":"347","line":18,"column":10,"nodeType":"283","messageId":"284","endLine":18,"endColumn":19},{"ruleId":"281","severity":1,"message":"348","line":19,"column":8,"nodeType":"283","messageId":"284","endLine":19,"endColumn":22},{"ruleId":"281","severity":1,"message":"310","line":23,"column":7,"nodeType":"283","messageId":"284","endLine":23,"endColumn":11},{"ruleId":"349","severity":1,"message":"350","line":56,"column":35,"nodeType":"351","endLine":56,"endColumn":40},{"ruleId":"349","severity":1,"message":"350","line":72,"column":35,"nodeType":"351","endLine":72,"endColumn":40},{"ruleId":"349","severity":1,"message":"350","line":88,"column":35,"nodeType":"351","endLine":88,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":1,"column":1,"nodeType":"333","messageId":"334","fix":"352"},{"ruleId":"281","severity":1,"message":"353","line":4,"column":5,"nodeType":"283","messageId":"284","endLine":4,"endColumn":11},{"ruleId":"281","severity":1,"message":"337","line":183,"column":12,"nodeType":"283","messageId":"284","endLine":183,"endColumn":17},{"ruleId":"281","severity":1,"message":"354","line":183,"column":19,"nodeType":"283","messageId":"284","endLine":183,"endColumn":27},{"ruleId":"281","severity":1,"message":"310","line":22,"column":7,"nodeType":"283","messageId":"284","endLine":22,"endColumn":11},{"ruleId":"331","severity":1,"message":"332","line":1,"column":1,"nodeType":"333","messageId":"334","fix":"355"},{"ruleId":"281","severity":1,"message":"311","line":5,"column":5,"nodeType":"283","messageId":"284","endLine":5,"endColumn":19},{"ruleId":"281","severity":1,"message":"336","line":6,"column":5,"nodeType":"283","messageId":"284","endLine":6,"endColumn":15},{"ruleId":"281","severity":1,"message":"356","line":7,"column":5,"nodeType":"283","messageId":"284","endLine":7,"endColumn":8},{"ruleId":"281","severity":1,"message":"357","line":8,"column":5,"nodeType":"283","messageId":"284","endLine":8,"endColumn":15},{"ruleId":"281","severity":1,"message":"358","line":9,"column":5,"nodeType":"283","messageId":"284","endLine":9,"endColumn":13},{"ruleId":"281","severity":1,"message":"353","line":10,"column":5,"nodeType":"283","messageId":"284","endLine":10,"endColumn":11},{"ruleId":"281","severity":1,"message":"359","line":11,"column":5,"nodeType":"283","messageId":"284","endLine":11,"endColumn":21},{"ruleId":"281","severity":1,"message":"360","line":12,"column":5,"nodeType":"283","messageId":"284","endLine":12,"endColumn":11},{"ruleId":"281","severity":1,"message":"302","line":13,"column":5,"nodeType":"283","messageId":"284","endLine":13,"endColumn":8},{"ruleId":"281","severity":1,"message":"361","line":14,"column":5,"nodeType":"283","messageId":"284","endLine":14,"endColumn":10},{"ruleId":"281","severity":1,"message":"362","line":15,"column":5,"nodeType":"283","messageId":"284","endLine":15,"endColumn":15},{"ruleId":"281","severity":1,"message":"363","line":16,"column":5,"nodeType":"283","messageId":"284","endLine":16,"endColumn":10},{"ruleId":"281","severity":1,"message":"344","line":17,"column":5,"nodeType":"283","messageId":"284","endLine":17,"endColumn":11},{"ruleId":"281","severity":1,"message":"364","line":18,"column":5,"nodeType":"283","messageId":"284","endLine":18,"endColumn":9},{"ruleId":"281","severity":1,"message":"341","line":19,"column":5,"nodeType":"283","messageId":"284","endLine":19,"endColumn":13},{"ruleId":"281","severity":1,"message":"365","line":20,"column":5,"nodeType":"283","messageId":"284","endLine":20,"endColumn":13},{"ruleId":"281","severity":1,"message":"366","line":21,"column":5,"nodeType":"283","messageId":"284","endLine":21,"endColumn":17},{"ruleId":"281","severity":1,"message":"367","line":23,"column":10,"nodeType":"283","messageId":"284","endLine":23,"endColumn":20},{"ruleId":"281","severity":1,"message":"319","line":24,"column":10,"nodeType":"283","messageId":"284","endLine":24,"endColumn":21},{"ruleId":"281","severity":1,"message":"348","line":26,"column":8,"nodeType":"283","messageId":"284","endLine":26,"endColumn":22},{"ruleId":"281","severity":1,"message":"368","line":29,"column":8,"nodeType":"283","messageId":"284","endLine":29,"endColumn":26},{"ruleId":"281","severity":1,"message":"330","line":30,"column":8,"nodeType":"283","messageId":"284","endLine":30,"endColumn":15},{"ruleId":"281","severity":1,"message":"369","line":31,"column":8,"nodeType":"283","messageId":"284","endLine":31,"endColumn":33},{"ruleId":"281","severity":1,"message":"370","line":32,"column":8,"nodeType":"283","messageId":"284","endLine":32,"endColumn":17},{"ruleId":"281","severity":1,"message":"371","line":33,"column":8,"nodeType":"283","messageId":"284","endLine":33,"endColumn":14},{"ruleId":"281","severity":1,"message":"372","line":41,"column":8,"nodeType":"283","messageId":"284","endLine":41,"endColumn":12},{"ruleId":"281","severity":1,"message":"345","line":42,"column":10,"nodeType":"283","messageId":"284","endLine":42,"endColumn":30},{"ruleId":"281","severity":1,"message":"346","line":42,"column":32,"nodeType":"283","messageId":"284","endLine":42,"endColumn":48},{"ruleId":"281","severity":1,"message":"373","line":48,"column":9,"nodeType":"283","messageId":"284","endLine":48,"endColumn":13},{"ruleId":"281","severity":1,"message":"336","line":9,"column":10,"nodeType":"283","messageId":"284","endLine":9,"endColumn":20},{"ruleId":"281","severity":1,"message":"361","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":13},{"ruleId":"281","severity":1,"message":"374","line":42,"column":10,"nodeType":"283","messageId":"284","endLine":42,"endColumn":11},{"ruleId":"281","severity":1,"message":"375","line":42,"column":12,"nodeType":"283","messageId":"284","endLine":42,"endColumn":16},{"ruleId":"281","severity":1,"message":"376","line":1,"column":142,"nodeType":"283","messageId":"284","endLine":1,"endColumn":149},{"ruleId":"281","severity":1,"message":"377","line":1,"column":203,"nodeType":"283","messageId":"284","endLine":1,"endColumn":208},{"ruleId":"281","severity":1,"message":"378","line":1,"column":221,"nodeType":"283","messageId":"284","endLine":1,"endColumn":228},{"ruleId":"281","severity":1,"message":"379","line":206,"column":9,"nodeType":"283","messageId":"284","endLine":206,"endColumn":12},"no-native-reassign",["380"],"no-negated-in-lhs",["381"],"no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'Salesreport' is defined but never used.","'outket' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Forgot_password must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Authenticate_code must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Verification_code must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Add_item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Show_archive must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Add_data must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Edit_data must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Show_draft must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Edit_draft must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Edit_profile must be in PascalCase or SCREAMING_SNAKE_CASE","'DialogTitle' is defined but never used.","'Box' is defined but never used.","'AutoGraphOutlinedIcon' is defined but never used.","'stocsk' is assigned a value but never used.","'setStocsk' is assigned a value but never used.","'Logo' is defined but never used.","'WidgetLg' is defined but never used.","'Linerechart' is defined but never used.","'WidgetTs' is defined but never used.","'Item' is assigned a value but never used.","'InputAdornment' is defined but never used.","'useRef' is defined but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'SpeedDial' is defined but never used.","'SpeedDialAction' is defined but never used.","'CcTextField' is defined but never used.","'actions' is assigned a value but never used.","'Hidden' is defined but never used.",["380"],["381"],"'show_error' is assigned a value but never used.","'setShow_error' is assigned a value but never used.","'KeyboardBackspaceOutlinedIcon' is defined but never used.","'para_de_maedit' is assigned a value but never used.","'disble' is assigned a value but never used.","'createPDf' is assigned a value but never used.","'AddIcon' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"382","text":"383"},"'Typography' is defined but never used.","'total' is assigned a value but never used.",{"range":"384","text":"383"},"'ArrowUpwardIcon' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'ListSubheader' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'LocalizationProvider' is defined but never used.","'MobileDatePicker' is defined but never used.","'TextField' is defined but never used.","'AdapterDateFns' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'isSuscribe' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal",{"range":"385","text":"383"},"'Button' is defined but never used.","'setTotal' is assigned a value but never used.",{"range":"386","text":"383"},"'Fab' is defined but never used.","'IconButton' is defined but never used.","'Collapse' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'Alert' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'Chip' is defined but never used.","'Checkbox' is defined but never used.","'ListItemText' is defined but never used.","'CTextField' is defined but never used.","'SearchOutlinedIcon' is defined but never used.","'DeleteOutlineOutlinedIcon' is defined but never used.","'ClearIcon' is defined but never used.","'moment' is defined but never used.","'LOGO' is defined but never used.","'NavS' is assigned a value but never used.","'a' is assigned a value but never used.","'setA' is assigned a value but never used.","'Divider' is defined but never used.","'Stack' is defined but never used.","'Toolbar' is defined but never used.","'api' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0]]