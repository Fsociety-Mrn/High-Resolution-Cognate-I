{"ast":null,"code":"var _jsxFileName = \"D:\\\\Art Lisboa Files\\\\React files\\\\cognate1.8\\\\src\\\\pages\\\\Components\\\\invoice\\\\Add_data.jsx\",\n    _s = $RefreshSig$();\n\nimport { Fab, Grid, Typography, Box, Button, FormControlLabel, Alert, Collapse, Radio, RadioGroup, Select, Chip, MenuItem, Checkbox, ListItemText, TextField, Autocomplete } from '@mui/material';\nimport Dialog, { DialogProps } from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CcTextField } from '../Stocks';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\nimport moment from 'moment'; // ICONS\n\nimport ClearIcon from '@mui/icons-material/Clear';\nimport AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\nimport LOGO from '../../icons/user.png';\nimport axios from 'axios';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { set } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Add_data = () => {\n  _s();\n\n  // Routes\n  let NavS = useNavigate(); // Date ITO\n\n  const [value, setValue] = useState(new Date()); //JSON\n\n  const [data, setData] = useState({\n    \"Customer_name\": \"\",\n    \"Customer_email\": \"\",\n    \"Customer_cell\": \"\",\n    \"Customer_address\": \"\",\n    \"Customer_purchase\": \"\",\n    \"Customer_date\": new Date(),\n    \"Customer_total\": 0,\n    \"Customer_payment\": \"Paid\"\n  });\n  const [pdata, setPdata] = useState([{\n    \"Customer_ID\": 1,\n    \"Customer_purchase\": \"\",\n    \"Customer_price\": \"\",\n    \"Customer_quantity\": \"\",\n    \"Customer_total\": \"\"\n  }]); // Show success\n\n  const [show_success, setShow_success] = useState(); // Show error\n\n  const [show_error, setShow_error] = useState(true); // Show error show\n\n  const [show_err, setShow_err] = useState(); // Product purchase\n\n  const [selectname, setSelectname] = useState(\"Select Product\");\n  const [datadata, setDatdata] = useState([]); // Menu props\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250\n      }\n    }\n  }; // Message if data exist\n\n  const [Msg, setMsg] = useState(); // Add customer data\n\n  const add_customerdata = e => {\n    e.preventDefault();\n    axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_CustomerdataAPI.php\", {\n      \"Customer_name\": data.Customer_name,\n      \"Customer_email\": data.Customer_email,\n      \"Customer_cell\": data.Customer_cell,\n      \"Customer_address\": data.Customer_address,\n      \"Customer_purchase\": selectname.toString(),\n      \"Customer_date\": moment(value, \"mm-dd-yyyy\").format().split('T')[0],\n      \"Customer_total\": data.Customer_total,\n      \"Customer_payment\": data.Customer_payment\n    }).then(res => {\n      setShow_success(res.data[0].Result);\n      setShow_error(res.data[0].Result);\n      setShow_err(res.data[0].Result);\n      setMsg(res.data[0].Message);\n    });\n    setDisble(true);\n  }; // Data product\n\n\n  const [dataproduct, setDataproduct] = useState([]); // filtered fetch product name\n\n  const name = !dataproduct ? \"empty\" : dataproduct.map(name => name.Product_name); //Product name Proouct\n  // fetch name \n\n  useEffect(() => {\n    axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php').then(res => setDataproduct(res.data));\n  });\n  const [num, setNum] = useState(\"\"); // Data purchase\n\n  const [test, setTest] = useState([{\n    \"Customer_ID\": 0,\n    \"Customer_purchase\": \"Select product\",\n    \"Customer_Quantity\": 0,\n    \"Customer_total\": 2\n  }]);\n  const columns = [// ID Column\n  {\n    field: 'Product_ID',\n    headerName: 'ID',\n    width: 70,\n    headerAlign: 'center',\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"black\",\n          fontSize: 18,\n          width: \"100%\",\n          textAlign: \"center\"\n        },\n        children: cellValues.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this);\n    }\n  }, // ID Column\n  {\n    field: 'Product_name',\n    headerName: 'name',\n    width: 200,\n    headerClassName: 'super-app-theme--header',\n    headerAlign: 'center',\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"black\",\n          fontSize: 18,\n          width: \"100%\",\n          textAlign: \"center\"\n        },\n        children: cellValues.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this);\n    }\n  }, {\n    field: 'Product_price',\n    headerName: 'price',\n    width: 130,\n    headerAlign: 'center',\n    renderCell: cellValues => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"black\",\n          fontSize: 18,\n          width: \"100%\",\n          textAlign: \"center\"\n        },\n        children: cellValues.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this);\n    }\n  }];\n  const [row, setRow] = useState([]);\n  const [disble, setDisble] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Collapse, {\n      in: show_success,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        onClose: () => {\n          setShow_success(false);\n          setData({\n            Customer_name: \"\",\n            Customer_email: \"\",\n            Customer_cell: \"\",\n            Customer_address: \"\",\n            Customer_purchase: [\"\"],\n            Customer_date: new Date(),\n            Customer_total: 0,\n            Customer_payment: \"Paid\"\n          });\n          setSelectname([]);\n          setDisble(false);\n        },\n        children: \"Data has been updated\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      fullWidth: true,\n      in: show_err ? false : true,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        onClose: () => {\n          setShow_err(true);\n          setShow_error(true);\n          setDisble(false);\n        },\n        children: \"ATTENTION! textfield should not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      padding: 6,\n      paddingTop: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        padding: 2,\n        children: [/*#__PURE__*/_jsxDEV(Fab, {\n          color: \"primary\",\n          \"aria-label\": \"add\",\n          onClick: e => NavS(\"/Mainpage/Invoice\"),\n          children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          marginLeft: 2,\n          children: \" Add Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        style: {\n          backgroundColor: \"white\",\n          border: \"2px solid black\",\n          borderRadius: 5\n        },\n        onClick: e => {\n          setData({ ...data,\n            Customer_purchase: selectname.toString()\n          });\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 10,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(CcTextField, {\n            label: \"Name\",\n            type: \"text\",\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 10,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(CcTextField, {\n            label: \"Email Address\",\n            type: \"Email\",\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 10,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(CcTextField, {\n            label: \"Contact Number\",\n            type: \"text\",\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 12,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(CcTextField, {\n            multiline: true,\n            label: \"Address\",\n            type: \"text\",\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 2,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(MobileDatePicker, {\n              error: show_error ? false : true,\n              inputFormat: \"MM/dd/yyyy\",\n              value: value,\n              onChange: newValue => setValue(newValue),\n              renderInput: params => /*#__PURE__*/_jsxDEV(CcTextField, { ...params,\n                onClick: () => {\n                  setShow_error(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 6,\n          padding: 2,\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            value: data.Customer_payment,\n            onChange: e => {\n              setData({ ...data,\n                Customer_payment: e.target.value\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"Paid\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 56\n              }, this),\n              label: \"Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"Pending\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 58\n              }, this),\n              label: \"Pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 12,\n          padding: 4,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            style: {\n              border: \"2px solid #9B3C21\",\n              borderRadius: '10px'\n            },\n            paddingBottom: 2,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              md: 12,\n              children: /*#__PURE__*/_jsxDEV(Fab, {\n                color: \"primary\",\n                \"aria-label\": \"add\",\n                variant: \"extended\",\n                size: \"large\",\n                onClick: e => {\n                  e.preventDefault();\n                  test.length ? setTest([...test, {\n                    \"Customer_ID\": parseInt(test[test.length - 1].Customer_ID) + 1,\n                    \"Customer_purchase\": \"Select product\",\n                    \"Customer_Quantity\": 0,\n                    \"Customer_total\": 0\n                  }]) : setTest([...test, {\n                    \"Customer_ID\": 0,\n                    \"Customer_purchase\": \"Select product\",\n                    \"Customer_Quantity\": 0,\n                    \"Customer_total\": 0\n                  }]);\n                },\n                children: [/*#__PURE__*/_jsxDEV(AddShoppingCartOutlinedIcon, {\n                  fontSize: \"medium\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Add purchase details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 18\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 13\n            }, this), test.map(index => /*#__PURE__*/_jsxDEV(Grid, {\n              padding: 2,\n              spacing: 2,\n              container: true,\n              direction: \"row\",\n              justifyContent: \"flex-start\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  value: index.Customer_purchase,\n                  fullWidth: true,\n                  onChange: e => {\n                    // const {name, value} = e.target\n                    const list = [...test];\n                    list[index.Customer_ID][\"Customer_purchase\"] = e.target.value;\n                    list[index.Customer_ID][\"Customer_Quantity\"] = 1; //console.log(list[index.Customer_ID][\"Customer_purchase\"] )\n\n                    setTest(list);\n                  },\n                  renderValue: () => /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      gap: 0.5\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: index.Customer_purchase,\n                      color: \"primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 471,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 470,\n                    columnNumber: 23\n                  }, this),\n                  children: dataproduct.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: name.Product_name,\n                    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: test[index.Customer_ID][\"Customer_purchase\"] === name.Product_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: name.Product_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 479,\n                      columnNumber: 25\n                    }, this)]\n                  }, name.Product_ID, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 477,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 2,\n                children: /*#__PURE__*/_jsxDEV(CcTextField, {\n                  label: \"Quantity\",\n                  fullWidth: true,\n                  value: index.Customer_Quantity,\n                  onChange: e => {\n                    const list = [...test];\n                    list[index.Customer_ID][\"Customer_Quantity\"] = e.target.value;\n                    setTest(list);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 2,\n                children: /*#__PURE__*/_jsxDEV(CcTextField, {\n                  label: \"Total price\",\n                  fullWidth: true,\n                  value: // Multiplication\n                  index.Customer_Quantity * dataproduct.filter(e => e.Product_name === test[index.Customer_ID][\"Customer_purchase\"]).map(e => e.Product_price)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 2.5,\n                children: /*#__PURE__*/_jsxDEV(CcTextField, {\n                  label: \"Total price\",\n                  fullWidth: true,\n                  value: // Multiplication\n                  index.Customer_Quantity * dataproduct.filter(e => e.Product_name === test[index.Customer_ID][\"Customer_purchase\"]).map(e => e.Product_price)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 2,\n                children: /*#__PURE__*/_jsxDEV(Fab, {\n                  value: index.Customer_ID,\n                  color: \"primary\",\n                  \"aria-label\": \"add\",\n                  onClick: e => {\n                    const index = test.map(e => e.Customer_ID).indexOf(parseInt(e.currentTarget.value));\n                    test.splice(index, 1);\n                  },\n                  size: \"small\",\n                  children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 17\n              }, this)]\n            }, index.Customer_ID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Add_data, \"Wg5BXVi8OlrlR4OheKBaxsuTqHY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Add_data;\nexport default Add_data;\n\nvar _c;\n\n$RefreshReg$(_c, \"Add_data\");","map":{"version":3,"sources":["D:/Art Lisboa Files/React files/cognate1.8/src/pages/Components/invoice/Add_data.jsx"],"names":["Fab","Grid","Typography","Box","Button","FormControlLabel","Alert","Collapse","Radio","RadioGroup","Select","Chip","MenuItem","Checkbox","ListItemText","TextField","Autocomplete","Dialog","DialogProps","DialogActions","DialogContent","DialogContentText","DialogTitle","React","useEffect","useState","useNavigate","CcTextField","AdapterDateFns","LocalizationProvider","MobileDatePicker","moment","ClearIcon","AddShoppingCartOutlinedIcon","LOGO","axios","DataGrid","set","Add_data","NavS","value","setValue","Date","data","setData","pdata","setPdata","show_success","setShow_success","show_error","setShow_error","show_err","setShow_err","selectname","setSelectname","datadata","setDatdata","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","Msg","setMsg","add_customerdata","e","preventDefault","post","Customer_name","Customer_email","Customer_cell","Customer_address","toString","format","split","Customer_total","Customer_payment","then","res","Result","Message","setDisble","dataproduct","setDataproduct","name","map","Product_name","get","num","setNum","test","setTest","columns","field","headerName","headerAlign","renderCell","cellValues","color","fontSize","textAlign","headerClassName","row","setRow","disble","Customer_purchase","Customer_date","backgroundColor","border","borderRadius","newValue","params","target","length","parseInt","Customer_ID","index","list","display","flexWrap","gap","Product_ID","Customer_Quantity","filter","Product_price","indexOf","currentTarget","splice"],"mappings":"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","sourcesContent":["import { \r\n  Fab, \r\n  Grid , \r\n  Typography, \r\n  Box, \r\n  Button, \r\n  FormControlLabel, \r\n  Alert, \r\n  Collapse, \r\n  Radio, \r\n  RadioGroup, \r\n  Select, \r\n  Chip, \r\n  MenuItem, \r\n  Checkbox, \r\n  ListItemText,\r\n  TextField,\r\n  Autocomplete,\r\n} from '@mui/material'\r\nimport Dialog, { DialogProps } from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CcTextField } from '../Stocks';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport MobileDatePicker from '@mui/lab/MobileDatePicker'\r\nimport moment from 'moment'\r\n// ICONS\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';\r\n\r\nimport LOGO  from '../../icons/user.png'\r\nimport axios from 'axios';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { set } from 'date-fns';\r\n\r\n\r\n\r\n\r\nconst Add_data = () => {\r\n// Routes\r\n  let NavS = useNavigate();\r\n\r\n\r\n// Date ITO\r\nconst [value,setValue] = useState(\r\n  new Date()\r\n)\r\n  //JSON\r\n  const [data, setData] = useState({\r\n    \"Customer_name\": \"\",\r\n    \"Customer_email\": \"\",\r\n    \"Customer_cell\": \"\",\r\n    \"Customer_address\": \"\",\r\n    \"Customer_purchase\": \"\",\r\n    \"Customer_date\": new Date(),\r\n    \"Customer_total\": 0,\r\n    \"Customer_payment\":  \"Paid\"\r\n  })\r\n\r\n  const [pdata,setPdata] = useState([\r\n    {\r\n    \"Customer_ID\": 1,\r\n    \"Customer_purchase\": \"\",\r\n    \"Customer_price\": \"\",\r\n    \"Customer_quantity\": \"\",\r\n    \"Customer_total\": \"\",\r\n  }\r\n])\r\n// Show success\r\nconst [show_success,setShow_success] = useState()\r\n\r\n// Show error\r\nconst [show_error,setShow_error] = useState(true)\r\n\r\n// Show error show\r\nconst [show_err,setShow_err] = useState()\r\n\r\n// Product purchase\r\nconst [selectname, setSelectname] = useState(\"Select Product\")\r\n\r\nconst [datadata,setDatdata] = useState([])\r\n\r\n// Menu props\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\n// Message if data exist\r\nconst [Msg,setMsg] = useState()\r\n\r\n// Add customer data\r\nconst add_customerdata = e => {\r\n\r\n  e.preventDefault()  \r\n\r\n  \r\n  axios.post(\"http://localhost/REACTJS/cognate1%20api/Create_CustomerdataAPI.php\", {\r\n    \"Customer_name\": data.Customer_name,\r\n    \"Customer_email\": data.Customer_email,\r\n    \"Customer_cell\": data.Customer_cell,\r\n    \"Customer_address\": data.Customer_address,\r\n    \"Customer_purchase\": selectname.toString(),\r\n    \"Customer_date\": moment(value,\"mm-dd-yyyy\").format().split('T')[0],\r\n    \"Customer_total\": data.Customer_total,\r\n    \"Customer_payment\":  data.Customer_payment\r\n  })\r\n  .then(res => \r\n    {\r\n      setShow_success(res.data[0].Result)\r\n      setShow_error(res.data[0].Result)\r\n      setShow_err(res.data[0].Result)\r\n      setMsg(res.data[0].Message)\r\n    })\r\n    setDisble(true)\r\n\r\n  }\r\n\r\n// Data product\r\nconst [dataproduct,setDataproduct] = useState([])\r\n\r\n// filtered fetch product name\r\nconst name = !dataproduct ? \r\n\"empty\" \r\n: dataproduct.map(name=>name.Product_name )\r\n\r\n//Product name Proouct\r\n\r\n\r\n// fetch name \r\nuseEffect(() => {\r\n axios.get('http://localhost/REACTJS/cognate1%20api/ProductdataAPI.php')\r\n .then(res=> setDataproduct(res.data))\r\n})\r\n\r\nconst [num,setNum] = useState(\"\")\r\n\r\n// Data purchase\r\nconst [test,setTest] = useState([\r\n  \r\n    {\r\n      \"Customer_ID\": 0,\r\n      \"Customer_purchase\": \"Select product\",\r\n      \"Customer_Quantity\": 0,\r\n      \"Customer_total\": 2,\r\n      }\r\n  \r\n\r\n\r\n])\r\n\r\nconst columns = [\r\n\r\n  // ID Column\r\n  { field: 'Product_ID', \r\n    headerName: 'ID', \r\n    width: 70 ,\r\n    headerAlign: 'center',\r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n\r\n  // ID Column\r\n  { field: 'Product_name', \r\n    headerName: 'name', \r\n    width: 200,\r\n    headerClassName: 'super-app-theme--header',\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n  },\r\n\r\n\r\n  { field: 'Product_price', \r\n    headerName: 'price', \r\n    width: 130,\r\n    headerAlign: 'center', \r\n\r\n    renderCell: (cellValues) => {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 18,\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {cellValues.value}\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n  \r\n];\r\n\r\nconst [row,setRow] = useState([])\r\n\r\nconst [disble,setDisble] = useState(false)\r\n\r\n  return ( <div>\r\n\r\n  {/* Message Dialog */}\r\n  \r\n \r\n{/* // Whole Container */}\r\n         {/* Alert Success */}\r\n         <Collapse in={show_success}>\r\n         <Alert severity=\"success\"\r\n         onClose={()=>{\r\n           \r\n           setShow_success(false) \r\n           setData({\r\n\r\n            Customer_name: \"\",\r\n            Customer_email: \"\",\r\n            Customer_cell: \"\",\r\n            Customer_address: \"\",\r\n            Customer_purchase: [\"\"],\r\n            Customer_date: new Date(),\r\n            Customer_total: 0,\r\n            Customer_payment:  \"Paid\"\r\n\r\n\r\n           })\r\n           setSelectname([])\r\n           setDisble(false)\r\n         }}\r\n         >\r\n           Data has been updated\r\n         </Alert>\r\n       </Collapse>\r\n\r\n{/* Alert Error */}\r\n<Collapse fullWidth in={show_err ? false : true}>\r\n         <Alert severity=\"error\"\r\n         onClose={()=>{\r\n           \r\n           setShow_err(true) \r\n           setShow_error(true)\r\n           setDisble(false)\r\n         }}\r\n         >\r\n           ATTENTION! textfield should not be empty!\r\n         </Alert>\r\n       </Collapse>\r\n\r\n    <Grid container padding={6} paddingTop={2} >\r\n    \r\n\r\n\r\n    \r\n\r\n{/* Container para sa button paar may padding */}\r\n      <Grid container padding={2}>\r\n\r\n               \r\n        {/* Button cancel */}\r\n        <Fab \r\n        color=\"primary\"  \r\n        aria-label=\"add\" \r\n        onClick={e=>NavS(\"/Mainpage/Invoice\")} \r\n        >\r\n          <ClearIcon />\r\n         \r\n        </Fab>\r\n        <Typography variant='h3'  marginLeft={2}> Add Data</Typography>\r\n      </Grid>\r\n\r\n{/* Container for all components */}\r\n      <Grid \r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"flex-start\" \r\n      style={{\r\n        backgroundColor:\"white\",\r\n        border:\"2px solid black\",\r\n        borderRadius: 5\r\n      }}\r\n      onClick={e=>\r\n        {\r\n          setData({...data,Customer_purchase: selectname.toString()})\r\n        }\r\n      }\r\n     >\r\n\r\n{/* Name textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Name' type='text' fullWidth />\r\n        </Grid>\r\n\r\n{/* Email textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Email Address' type='Email' fullWidth/>\r\n        </Grid>   \r\n\r\n{/* Contact textfield */}\r\n        <Grid item md={10} padding={2}>\r\n            <CcTextField label='Contact Number' type='text' fullWidth/>\r\n        </Grid>\r\n\r\n{/* Address textfield */}\r\n        <Grid item md={12} padding={2}>\r\n            <CcTextField multiline label='Address' type='text' fullWidth/>\r\n        </Grid> \r\n\r\n  {/* Date textfield */}\r\n        <Grid item md={2} padding={2}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <MobileDatePicker\r\n                error={show_error? false : true}\r\n                inputFormat=\"MM/dd/yyyy\"\r\n                value={value}\r\n                onChange={(newValue) => setValue(newValue) }\r\n                renderInput={(params) => <CcTextField  {...params} \r\n                onClick={()=>{\r\n                  setShow_error(true)\r\n                }}\r\n                />}\r\n          \r\n                />\r\n\r\n                </LocalizationProvider>\r\n\r\n        \r\n        </Grid> \r\n\r\n  {/* Radio Button for payment status */}\r\n        <Grid item md={6} padding={2}>\r\n        \r\n            <RadioGroup\r\n              row\r\n              value={data.Customer_payment}\r\n              onChange={e => {\r\n              setData({...data,Customer_payment: e.target.value })\r\n              }}\r\n            >\r\n              <FormControlLabel  value=\"Paid\" control={<Radio />} label=\"Paid\" />\r\n              <FormControlLabel value=\"Pending\" control={<Radio />} label=\"Pending\" />\r\n            </RadioGroup>\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n\r\n{/* Customer item purchase detail */}\r\n        <Grid item md={12} padding={4}>\r\n\r\n\r\n\r\n          <Grid \r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"center\" \r\n          style={{\r\n            border: \"2px solid #9B3C21\",\r\n            borderRadius:'10px'\r\n          }} \r\n          paddingBottom={2}\r\n          spacing={2}>\r\n\r\n\r\n\r\n{/* Add purchase row */}\r\n            <Grid item md={12}>\r\n             \r\n              <Fab \r\n                color='primary'\r\n                aria-label=\"add\" \r\n                variant='extended'\r\n                size='large'\r\n                onClick={e=>{\r\n                  e.preventDefault()\r\n\r\n              \r\n                  test.length ?\r\n                  setTest([\r\n                    ...test, {\r\n                      \"Customer_ID\": parseInt(test[test.length - 1].Customer_ID) + 1,\r\n                      \"Customer_purchase\": \"Select product\",\r\n                      \"Customer_Quantity\": 0,\r\n                      \"Customer_total\": 0,  \r\n                    }\r\n                  ]) : \r\n                  setTest([\r\n                    ...test, {\r\n                      \"Customer_ID\": 0,\r\n                      \"Customer_purchase\": \"Select product\",\r\n                      \"Customer_Quantity\": 0,\r\n                      \"Customer_total\": 0,  \r\n                    }\r\n                  ])\r\n                 \r\n                }} \r\n                \r\n                >\r\n                <AddShoppingCartOutlinedIcon fontSize='medium'/>      \r\n                 <span>Add purchase details</span>\r\n              </Fab>\r\n            </Grid>\r\n\r\n\r\n        {/* List pf product purchase detail */}\r\n            {test.map((index)=>(\r\n\r\n              <Grid  key={index.Customer_ID} padding={2} spacing={2} \r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"flex-start\"\r\n              alignItems=\"center\">\r\n\r\n{/* Customer purchase */ }\r\n                <Grid item md={4}>\r\n                 \r\n                  <Select\r\n                    value={index.Customer_purchase}\r\n                    fullWidth\r\n                    onChange={e=>{\r\n                                 // const {name, value} = e.target\r\n                      const list = [...test]\r\n\r\n                      list[index.Customer_ID][\"Customer_purchase\"] = e.target.value\r\n                      list[index.Customer_ID][\"Customer_Quantity\"] = 1\r\n                      //console.log(list[index.Customer_ID][\"Customer_purchase\"] )\r\n                    setTest(list)\r\n                    }}\r\n                    renderValue={() => (\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        <Chip label={index.Customer_purchase} color='primary'/>\r\n                      </Box>\r\n                      )}\r\n                    >\r\n\r\n                    {dataproduct.map((name) => (\r\n                      <MenuItem key={name.Product_ID} value={name.Product_name}>\r\n                        <Checkbox checked={test[index.Customer_ID][\"Customer_purchase\"]===name.Product_name} />\r\n                        <ListItemText primary={name.Product_name} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n\r\n    \r\n\r\n\r\n                      \r\n                </Grid>\r\n\r\n{/* Quantity */}\r\n                <Grid item md={2}>\r\n             \r\n                  <CcTextField label=\"Quantity\" fullWidth\r\n                    value={index.Customer_Quantity}\r\n                    onChange={\r\n                      e=>{\r\n                        const list = [...test]\r\n                        list[index.Customer_ID][\"Customer_Quantity\"] = e.target.value\r\n                        setTest(list)\r\n                      }\r\n                    }\r\n                />\r\n                </Grid>\r\n\r\n{/* Total price */}\r\n                <Grid item md={2}>\r\n             \r\n                  <CcTextField label=\"Total price\" fullWidth\r\n                  value={\r\n                    // Multiplication\r\n                    index.Customer_Quantity \r\n                    * \r\n                    dataproduct.filter(e => \r\n                      e.Product_name \r\n                      === test[index.Customer_ID][\"Customer_purchase\"])\r\n                    .map(e=>e.Product_price)}\r\n                />\r\n                </Grid>   \r\n\r\n{/* Total price */}\r\n                <Grid item md={2.5}>\r\n             \r\n                  <CcTextField label=\"Total price\" fullWidth\r\n                  value={\r\n                    // Multiplication\r\n                    index.Customer_Quantity \r\n                    * \r\n                    dataproduct.filter(e => \r\n                      e.Product_name \r\n                      === test[index.Customer_ID][\"Customer_purchase\"])\r\n                    .map(e=>e.Product_price)}\r\n                />\r\n                </Grid>\r\n\r\n\r\n{/* Button remove */} \r\n                <Grid item md={2} >\r\n                  <Fab \r\n                  \r\n                  value={ index.Customer_ID}\r\n                  color=\"primary\"  \r\n                  aria-label=\"add\" \r\n                  onClick={e=> \r\n                    {\r\n\r\n                      const index = test.map(e=>e.Customer_ID).indexOf(parseInt(e.currentTarget.value))\r\n                      test.splice(index,1)\r\n                    }\r\n                \r\n                  }\r\n                  size='small'\r\n                  >\r\n                    <ClearIcon />\r\n         \r\n                  </Fab>\r\n            </Grid>                \r\n\r\n              </Grid>\r\n\r\n\r\n\r\n\r\n            )\r\n            )}\r\n\r\n\r\n\r\n\r\n\r\n\r\n      \r\n            \r\n          </Grid>\r\n\r\n    \r\n       \r\n        </Grid>\r\n\r\n\r\n\r\n      </Grid>\r\n\r\n    </Grid>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Add_data"]},"metadata":{},"sourceType":"module"}